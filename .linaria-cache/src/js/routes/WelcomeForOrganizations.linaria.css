.wteszsv{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-flow:column nowrap;-ms-flex-flow:column nowrap;flex-flow:column nowrap;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;background:white;overflow-x:hidden;padding-top:var(--wteszsv-0);}
.hhlicem{position:relative;height:590px;width:110%;color:white;background-image:linear-gradient(to bottom,#415a99,#2d3b5e);border-bottom-left-radius:50% 25%;border-bottom-right-radius:50% 25%;padding:0 2em;margin-top:-72px;}@media (max-width:var(--hhlicem-0)){.hhlicem{height:450px;}}@media (max-width:var(--hhlicem-1)){.hhlicem{height:380px;}}
.sck1njg{color:rgb(219,179,86);font-weight:bold;}
/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkQ6XFxKYXJvZFxcV2VWb3RlXFxXZWJBcHBcXHNyY1xcanNcXHJvdXRlc1xcV2VsY29tZUZvck9yZ2FuaXphdGlvbnMuanN4Il0sIm5hbWVzIjpbIi53dGVzenN2IiwiLmhobGljZW0iLCIuc2NrMW5qZyJdLCJtYXBwaW5ncyI6IkFBaVRNQTtBQVNBQztBQWtCQUMiLCJmaWxlIjoiRDpcXEphcm9kXFxXZVZvdGVcXFdlYkFwcFxcc3JjXFxqc1xccm91dGVzXFxXZWxjb21lRm9yT3JnYW5pemF0aW9ucy5qc3giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IEhlbG1ldCBmcm9tICdyZWFjdC1oZWxtZXQnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IHN0eWxlZCB9IGZyb20gJ2xpbmFyaWEvcmVhY3QnO1xuaW1wb3J0IEJ1dHRvbiBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZS9CdXR0b24nO1xuaW1wb3J0IHsgd2l0aFN0eWxlcyB9IGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlL3N0eWxlcyc7XG5pbXBvcnQgZmZ3ZExvZ28gZnJvbSAnLi4vLi4vaW1nL2dsb2JhbC9sb2dvcy9mZndkLWxvZ28ucG5nJztcbmltcG9ydCBnb29nbGVMb2dvIGZyb20gJy4uLy4uL2ltZy9nbG9iYWwvbG9nb3MvZ29vZ2xlLWxvZ28uc3ZnJztcbmltcG9ydCB2b3RlRG90T3JnTG9nbyBmcm9tICcuLi8uLi9pbWcvZ2xvYmFsL2xvZ29zL3ZvdGVfZG90X29yZ19sb2dvLTUzMHgyMDAucG5nJztcbmltcG9ydCB2aXBMb2dvIGZyb20gJy4uLy4uL2ltZy9nbG9iYWwvbG9nb3MvdmlwLWxvZ28tMTAwMHgyMDgucG5nJztcbmltcG9ydCBBbmFseXRpY3NBY3Rpb25zIGZyb20gJy4uL2FjdGlvbnMvQW5hbHl0aWNzQWN0aW9ucyc7XG5pbXBvcnQgQXBwQWN0aW9ucyBmcm9tICcuLi9hY3Rpb25zL0FwcEFjdGlvbnMnO1xuaW1wb3J0IEZvb3RlciBmcm9tICcuLi9jb21wb25lbnRzL1dlbGNvbWUvRm9vdGVyJztcbmltcG9ydCB7IGNvcmRvdmFTY3JvbGxhYmxlUGFuZVRvcFBhZGRpbmcgfSBmcm9tICcuLi91dGlscy9jb3Jkb3ZhT2Zmc2V0cyc7XG5pbXBvcnQgeyBoaXN0b3J5UHVzaCwgY29yZG92YURvdCB9IGZyb20gJy4uL3V0aWxzL2NvcmRvdmFVdGlscyc7XG5pbXBvcnQgeyByZW5kZXJMb2cgfSBmcm9tICcuLi91dGlscy9sb2dnaW5nJztcbmltcG9ydCBUZXN0aW1vbmlhbCBmcm9tICcuLi9jb21wb25lbnRzL1dpZGdldHMvVGVzdGltb25pYWwnO1xuaW1wb3J0IFZvdGVyU3RvcmUgZnJvbSAnLi4vc3RvcmVzL1ZvdGVyU3RvcmUnO1xuaW1wb3J0IHsgVGl0bGUsIEJsdWVUaXRsZSwgU3ViVGl0bGUsIFZpZGVvLCBQbGF5ZXJDb250YWluZXIgfSBmcm9tICcuLi9jb21wb25lbnRzL1dlbGNvbWUvSGVhZGVyV2VsY29tZSc7XG5pbXBvcnQgU2VjdGlvbiwge1xuICBTZWN0aW9uVGl0bGUsXG4gIFNlY3Rpb25UaXRsZUJvbGQsXG4gIERlc2NyaXB0aW9uQ29udGFpbmVyLFxuICBEZXNjcmlwdGlvbkxlZnRDb2x1bW4sXG4gIERlc2NyaXB0aW9uSW1hZ2VDb2x1bW4sXG4gIERlc2NyaXB0aW9uLFxuICBJbWFnZSxcbiAgQm9sZCxcbiAgTmV0d29ya0NvbnRhaW5lcixcbiAgTmV0d29ya0ltYWdlLFxufSBmcm9tICcuLi9jb21wb25lbnRzL1dlbGNvbWUvU2VjdGlvbic7XG5pbXBvcnQgV2VsY29tZUFwcGJhciBmcm9tICcuLi9jb21wb25lbnRzL05hdmlnYXRpb24vV2VsY29tZUFwcGJhcic7XG5cbmNsYXNzIFdlbGNvbWVGb3JPcmdhbml6YXRpb25zIGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgc3RhdGljIHByb3BUeXBlcyA9IHtcbiAgICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIHBhdGhuYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICB9O1xuXG4gIGNvbnN0cnVjdG9yIChwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgdm90ZXI6IHt9LFxuICAgICAgYW5pbWF0ZVRleHRBcnJheTogWydNZW1iZXJzJywgJ1N0YWZmJywgJ0NvbnN0aXR1ZW50cycsICdGYW5zJywgJ1N1YnNjcmliZXJzJywgJ0ZvbGxvd2VycycsICdWb3RlcnMnXSxcbiAgICAgIGN1cnJlbnRBbmltYXRlVGV4dEluZGV4OiAwLFxuICAgIH07XG4gIH1cblxuICBjb21wb25lbnREaWRNb3VudCAoKSB7XG4gICAgdGhpcy5vblZvdGVyU3RvcmVDaGFuZ2UoKTtcbiAgICB0aGlzLnZvdGVyU3RvcmVMaXN0ZW5lciA9IFZvdGVyU3RvcmUuYWRkTGlzdGVuZXIodGhpcy5vblZvdGVyU3RvcmVDaGFuZ2UuYmluZCh0aGlzKSk7XG4gICAgQW5hbHl0aWNzQWN0aW9ucy5zYXZlQWN0aW9uV2VsY29tZVZpc2l0KFZvdGVyU3RvcmUuZWxlY3Rpb25JZCgpKTtcblxuICAgIHRoaXMuYXV0b0FuaW1hdGVUZXh0KCk7XG4gIH1cblxuICBjb21wb25lbnRXaWxsVW5tb3VudCAoKSB7XG4gICAgdGhpcy52b3RlclN0b3JlTGlzdGVuZXIucmVtb3ZlKCk7XG4gIH1cblxuICBvblZvdGVyU3RvcmVDaGFuZ2UgKCkge1xuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgdm90ZXI6IFZvdGVyU3RvcmUuZ2V0Vm90ZXIoKSxcbiAgICB9KTtcbiAgfVxuXG4gIGdldFN0YXJ0ZWRGb3JPcmdhbml6YXRpb25zICgpIHtcbiAgICBjb25zdCB7IHZvdGVyIH0gPSB0aGlzLnN0YXRlO1xuICAgIGxldCBpc1NpZ25lZEluID0gZmFsc2U7XG4gICAgaWYgKHZvdGVyKSB7XG4gICAgICAoeyBpc19zaWduZWRfaW46IGlzU2lnbmVkSW4gfSA9IHZvdGVyKTtcbiAgICB9XG4gICAgaWYgKGlzU2lnbmVkSW4pIHtcbiAgICAgIGhpc3RvcnlQdXNoKCcvc2V0dGluZ3MvcHJvZmlsZScpO1xuICAgIH0gZWxzZSB7XG4gICAgICBBcHBBY3Rpb25zLnNldEdldFN0YXJ0ZWRNb2RlKCdnZXRTdGFydGVkRm9yT3JnYW5pemF0aW9ucycpO1xuICAgICAgQXBwQWN0aW9ucy5zZXRTaG93U2lnbkluTW9kYWwodHJ1ZSk7XG4gICAgfVxuICB9XG5cbiAgYXV0b0FuaW1hdGVUZXh0ICgpIHtcbiAgICBjb25zdCBjdXJyZW50U3RhdGVBbmltYXRlVGV4dEluZGV4ID0gdGhpcy5zdGF0ZS5jdXJyZW50QW5pbWF0ZVRleHRJbmRleDtcbiAgICBjb25zdCBzaG93TWVtYmVyVGV4dEZvclRoaXNMb25nID0gMjAwMDtcbiAgICBpZiAodGhpcy5zdGF0ZS5jdXJyZW50QW5pbWF0ZVRleHRJbmRleCA8IHRoaXMuc3RhdGUuYW5pbWF0ZVRleHRBcnJheS5sZW5ndGggLSAxKSB7XG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IGN1cnJlbnRBbmltYXRlVGV4dEluZGV4OiBjdXJyZW50U3RhdGVBbmltYXRlVGV4dEluZGV4ICsgMSB9KTtcblxuICAgICAgICB0aGlzLmF1dG9BbmltYXRlVGV4dCgpO1xuICAgICAgfSwgc2hvd01lbWJlclRleHRGb3JUaGlzTG9uZyk7XG4gICAgfVxuICB9XG5cbiAgcmVuZGVyICgpIHtcbiAgICByZW5kZXJMb2coJ1dlbGNvbWVGb3JPcmdhbml6YXRpb25zLmpzeCcpOyAgLy8gU2V0IExPR19SRU5ERVJfRVZFTlRTIHRvIGxvZyBhbGwgcmVuZGVyc1xuICAgIGNvbnN0IHsgY2xhc3NlcywgcGF0aG5hbWUgfSA9IHRoaXMucHJvcHM7XG4gICAgLy8gY29uc29sZS5sb2coJ1dlbGNvbWVGb3JPcmdhbml6YXRpb25zLCBwYXRobmFtZTogJywgcGF0aG5hbWUpO1xuICAgIGNvbnN0IHsgdm90ZXIsIGFuaW1hdGVUZXh0QXJyYXksIGN1cnJlbnRBbmltYXRlVGV4dEluZGV4IH0gPSB0aGlzLnN0YXRlO1xuICAgIGNvbnN0IGlzVm90ZXJTaWduZWRJbiA9IHZvdGVyLmlzX3NpZ25lZF9pbjtcblxuICAgIGNvbnN0IGN1cnJlbnRUaXRsZVRleHRUb0Rpc3BsYXkgPSBhbmltYXRlVGV4dEFycmF5W2N1cnJlbnRBbmltYXRlVGV4dEluZGV4XTtcbiAgICAvLyBjb25zb2xlLmxvZyhjdXJyZW50VGl0bGVUZXh0VG9EaXNwbGF5KTtcblxuICAgIGNvbnN0IHRlc3RpbW9uaWFsQXV0aG9yID0gJ0p1ZHkgSi4sIE9ha2xhbmQsIENhbGlmb3JuaWEnO1xuICAgIGNvbnN0IHRlc3RpbW9uaWFsSW1hZ2VVcmwgPSBjb3Jkb3ZhRG90KCcvaW1nL2dsb2JhbC9waG90b3MvSnVkeV9KLTEwOXgxMDkuanBnJyk7XG4gICAgY29uc3QgdGVzdGltb25pYWwgPSAnTGV0XFwncyBiZSByZWFsOiBmZXcgcGVvcGxlIGFyZSByZWFkaW5nIHRob3NlIHdvbmt5IGJhbGxvdCBkZXNjcmlwdGlvbnMuIEkgd2FudCBkZWNpZGluZyBob3cgdG8gdm90ZSB0byBiZSBhcyBlYXN5IGFuZCBvYnZpb3VzIGFzIGEgc29saWQgWWVscCByZXZpZXcuIEZpbmFsbHkgV2UgVm90ZSBoZWxwcyBtZSBwbGFuIHRoZSB3aG9sZSB0aGluZyBvdXQgd2F5IGZhc3Rlci4nO1xuICAgIHJldHVybiAoXG4gICAgICA8V3JhcHBlciBwYWRUb3A9e2NvcmRvdmFTY3JvbGxhYmxlUGFuZVRvcFBhZGRpbmcoKX0+XG4gICAgICAgIDxIZWxtZXQgdGl0bGU9XCJXZWxjb21lIE9yZ2FuaXphdGlvbnMgLSBXZSBWb3RlXCIgLz5cbiAgICAgICAgPFdlbGNvbWVBcHBiYXIgcGF0aG5hbWU9e3BhdGhuYW1lfSAvPlxuICAgICAgICA8SGVhZGVyRm9yT3JnYW5pemF0aW9ucz5cbiAgICAgICAgICA8VGl0bGU+XG4gICAgICAgICAgICBTdXBlcmNoYXJnZSBZb3VyXG4gICAgICAgICAgICA8Qmx1ZVRpdGxlPntgICR7Y3VycmVudFRpdGxlVGV4dFRvRGlzcGxheX1gfTwvQmx1ZVRpdGxlPlxuICAgICAgICAgIDwvVGl0bGU+XG4gICAgICAgICAgPFN1YlRpdGxlPk9ubHkgNiBvdXQgb2YgMTAgZWxpZ2libGUgdm90ZXJzIGFyZSBwcmVkaWN0ZWQgdG8gY2FzdCBhIGJhbGxvdCBuZXh0IHllYXIuPC9TdWJUaXRsZT5cbiAgICAgICAgICA8UGxheWVyQ29udGFpbmVyPlxuICAgICAgICAgICAgPFZpZGVvXG4gICAgICAgICAgICAgIHNyYz1cImh0dHBzOi8vcGxheWVyLnZpbWVvLmNvbS92aWRlby8zMjkxNjQyNDNcIlxuICAgICAgICAgICAgICBmcmFtZUJvcmRlcj1cIjBcIlxuICAgICAgICAgICAgICBhbGxvdz1cImZ1bGxzY3JlZW5cIlxuICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDxzY3JpcHQgc3JjPVwiaHR0cHM6Ly9wbGF5ZXIudmltZW8uY29tL2FwaS9wbGF5ZXIuanNcIiAvPlxuICAgICAgICAgIDwvUGxheWVyQ29udGFpbmVyPlxuICAgICAgICA8L0hlYWRlckZvck9yZ2FuaXphdGlvbnM+XG4gICAgICAgIDxTZWN0aW9uPlxuICAgICAgICAgIDxTZWN0aW9uVGl0bGU+XG4gICAgICAgICAgICBFbXBvd2VyIHZvdGVycyB3aXRoXG4gICAgICAgICAgICA8U2VjdGlvblRpdGxlQm9sZD4gbmV1dHJhbCBpbmZvcm1hdGlvbjwvU2VjdGlvblRpdGxlQm9sZD5cbiAgICAgICAgICAgIC5cbiAgICAgICAgICA8L1NlY3Rpb25UaXRsZT5cbiAgICAgICAgICA8RGVzY3JpcHRpb25Db250YWluZXI+XG4gICAgICAgICAgICA8RGVzY3JpcHRpb24+XG4gICAgICAgICAgICAgIFlvdSBkb24mYXBvczt0IGhhdmUgdG8gYmUgaW52b2x2ZWQgd2l0aCBwb2xpdGljcyB0byBib29zdCBjaXZpYyBlbmdhZ2VtZW50LlxuICAgICAgICAgICAgICB7JyAnfVxuICAgICAgICAgICAgICBUaGVyZSBhcmUgZWFzeSwgYXBwcm9wcmlhdGUgd2F5cyBmb3IgZXZlcnkgb3JnYW5pemF0aW9uIG9yIGJ1c2luZXNzIHRvIGluY3JlYXNlIHZvdGVyIHBhcnRpY2lwYXRpb246XG4gICAgICAgICAgICA8L0Rlc2NyaXB0aW9uPlxuICAgICAgICAgICAgPERlc2NyaXB0aW9uPlxuICAgICAgICAgICAgICA8Qm9sZD5cbiAgICAgICAgICAgICAgICBIZWxwIHlvdXIgc3RhZmYsIGN1c3RvbWVycyBvciBtZW1iZXJzIGdldCBhY2N1cmF0ZSwgaGVscGZ1bCBpbmZvcm1hdGlvbiBhYm91dCB3aGF0JmFwb3M7cyBvbiB0aGVpciBiYWxsb3QuXG4gICAgICAgICAgICAgIDwvQm9sZD5cbiAgICAgICAgICAgIDwvRGVzY3JpcHRpb24+XG4gICAgICAgICAgICA8RGVzY3JpcHRpb24gY2xhc3NOYW1lPVwidV9tYXJnaW4tY2VudGVyXCI+XG4gICAgICAgICAgICAgIDxCdXR0b25cbiAgICAgICAgICAgICAgICB2YXJpYW50PVwiY29udGFpbmVkXCJcbiAgICAgICAgICAgICAgICBjb2xvcj1cInByaW1hcnlcIlxuICAgICAgICAgICAgICAgIHNpemU9XCJsYXJnZVwiXG4gICAgICAgICAgICAgICAgY2xhc3Nlcz17eyByb290OiBjbGFzc2VzLmJ1dHRvbk1heFdpZHRoLCBjb250YWluZWRQcmltYXJ5OiBjbGFzc2VzLmJ1dHRvbkNvbnRhaW5lZCB9fVxuICAgICAgICAgICAgICAgIGlkPVwid2VsY29tZUZvck9yZ2FuaXphdGlvbnNIb3dJdFdvcmtzRm9yT3JnYW5pemF0aW9uc1wiXG4gICAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4gaGlzdG9yeVB1c2goJy9ob3cvZm9yLW9yZ2FuaXphdGlvbnMnKX1cbiAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIEhvdyBpdCBXb3JrcyBmb3IgT3JnYW5pemF0aW9uc1xuICAgICAgICAgICAgICA8L0J1dHRvbj5cbiAgICAgICAgICAgIDwvRGVzY3JpcHRpb24+XG4gICAgICAgICAgPC9EZXNjcmlwdGlvbkNvbnRhaW5lcj5cbiAgICAgICAgPC9TZWN0aW9uPlxuICAgICAgICA8U2VjdGlvbiB2YXJpYW50PVwiZGFya1wiIHJvdW5kZWQ+XG4gICAgICAgICAgPFNlY3Rpb25UaXRsZT5cbiAgICAgICAgICAgIEZvclxuICAgICAgICAgICAgeycgJ31cbiAgICAgICAgICAgIDxTZWN0aW9uVGl0bGVCb2xkPk5vbi1QYXJ0aXNhbiBPcmdhbml6YXRpb25zPC9TZWN0aW9uVGl0bGVCb2xkPlxuICAgICAgICAgIDwvU2VjdGlvblRpdGxlPlxuICAgICAgICAgIDxEZXNjcmlwdGlvbkNvbnRhaW5lcj5cbiAgICAgICAgICAgIDxEZXNjcmlwdGlvbkxlZnRDb2x1bW4+XG4gICAgICAgICAgICAgIDxEZXNjcmlwdGlvbj5cbiAgICAgICAgICAgICAgICBCb29zdCB5b3VyIHNvY2lhbCBpbXBhY3QgYnJhbmQgYXMgYSByZXNwb25zaWJsZSBzdXBwb3J0ZXIgb2YgY2l2aWMgZW5nYWdlbWVudC5cbiAgICAgICAgICAgICAgPC9EZXNjcmlwdGlvbj5cbiAgICAgICAgICAgICAgPERlc2NyaXB0aW9uPlxuICAgICAgICAgICAgICAgIEFzIGFcbiAgICAgICAgICAgICAgICB7JyAnfVxuICAgICAgICAgICAgICAgIDxCb2xkPm5vbnBhcnRpc2FuIHBhcnRuZXI8L0JvbGQ+XG4gICAgICAgICAgICAgICAgLCB5b3VyIG9yZ2FuaXphdGlvbiBvciBidXNpbmVzcyBjYW4gY3VzdG9taXplIGFuZCBzaGFyZSBhIGJyYW5kZWQgbGFuZGluZyBwYWdlIHdpdGggeW91ciBsaXN0LlxuICAgICAgICAgICAgICAgIHsnICd9XG4gICAgICAgICAgICAgICAgWW91IHdpbGwgYmUgZW1wb3dlcmluZyBpbmRpdmlkdWFscyB0byByZWdpc3RlciB0byB2b3RlLCByZXZpZXcgdGhlaXIgYmFsbG90LFxuICAgICAgICAgICAgICAgIHsnICd9XG4gICAgICAgICAgICAgICAgZmluZCB0aGVpciBwb2xsaW5nIGxvY2F0aW9uLCBhbmQgdXNlIFdlIFZvdGUgdG9vbHMgdG8gY29uZmlkZW50bHkgbWFrZSB2b3RpbmcgZGVjaXNpb25zLlxuICAgICAgICAgICAgICA8L0Rlc2NyaXB0aW9uPlxuICAgICAgICAgICAgICA8RGVzY3JpcHRpb24gY2xhc3NOYW1lPVwidV9tYXJnaW4tY2VudGVyXCI+XG4gICAgICAgICAgICAgICAgPEJ1dHRvblxuICAgICAgICAgICAgICAgICAgdmFyaWFudD1cImNvbnRhaW5lZFwiXG4gICAgICAgICAgICAgICAgICBjb2xvcj1cInByaW1hcnlcIlxuICAgICAgICAgICAgICAgICAgc2l6ZT1cImxhcmdlXCJcbiAgICAgICAgICAgICAgICAgIGNsYXNzZXM9e3sgcm9vdDogY2xhc3Nlcy5idXR0b25NYXhXaWR0aCwgY29udGFpbmVkUHJpbWFyeTogY2xhc3Nlcy5idXR0b25Db250YWluZWQgfX1cbiAgICAgICAgICAgICAgICAgIGlkPVwid2VsY29tZUZvck9yZ2FuaXphdGlvbnNHZXRTdGFydGVkXCJcbiAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHRoaXMuZ2V0U3RhcnRlZEZvck9yZ2FuaXphdGlvbnMoKX1cbiAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICBHZXQgU3RhcnRlZFxuICAgICAgICAgICAgICAgIDwvQnV0dG9uPlxuICAgICAgICAgICAgICA8L0Rlc2NyaXB0aW9uPlxuICAgICAgICAgICAgPC9EZXNjcmlwdGlvbkxlZnRDb2x1bW4+XG4gICAgICAgICAgICA8RGVzY3JpcHRpb25JbWFnZUNvbHVtbj5cbiAgICAgICAgICAgICAgPEltYWdlIHNyYz17Y29yZG92YURvdCgnL2ltZy93ZWxjb21lL1dlbGNvbWVGb3JPcmdhbml6YXRpb25zLVlvdXJMb2dvU2NyZWVuU2hvdC5wbmcnKX0gLz5cbiAgICAgICAgICAgIDwvRGVzY3JpcHRpb25JbWFnZUNvbHVtbj5cbiAgICAgICAgICA8L0Rlc2NyaXB0aW9uQ29udGFpbmVyPlxuICAgICAgICA8L1NlY3Rpb24+XG4gICAgICAgIDxTZWN0aW9uPlxuICAgICAgICAgIDxTZWN0aW9uVGl0bGU+XG4gICAgICAgICAgICBWb3RpbmcgU2hvdWxkIGJlXG4gICAgICAgICAgICA8U2VjdGlvblRpdGxlQm9sZD4gU2ltcGxlPC9TZWN0aW9uVGl0bGVCb2xkPlxuICAgICAgICAgIDwvU2VjdGlvblRpdGxlPlxuICAgICAgICAgIDxEZXNjcmlwdGlvbkNvbnRhaW5lcj5cbiAgICAgICAgICAgIDxEZXNjcmlwdGlvbkltYWdlQ29sdW1uPlxuICAgICAgICAgICAgICA8SW1hZ2Ugc3JjPXtjb3Jkb3ZhRG90KCcvaW1nL3dlbGNvbWUvV2VsY29tZUZvck9yZ2FuaXphdGlvbnMtUG9sbGluZ0xvY2F0aW9uU2NyZWVuU2hvdC5wbmcnKX0gLz5cbiAgICAgICAgICAgIDwvRGVzY3JpcHRpb25JbWFnZUNvbHVtbj5cbiAgICAgICAgICAgIDxEZXNjcmlwdGlvbkxlZnRDb2x1bW4+XG4gICAgICAgICAgICAgIDxEZXNjcmlwdGlvbj5cbiAgICAgICAgICAgICAgICBXZSBWb3RlIGlzIGEgZnJlZSwgZWFzeSB0b29sIHRoYXQgYWxsb3dzIHZvdGVycyB0byBnZW9sb2NhdGUgdGhlaXIgc3BlY2lmaWNcbiAgICAgICAgICAgICAgICB7JyAnfVxuICAgICAgICAgICAgICAgIGJhbGxvdCBhbmQgdGhlbiBwbGFuIHdobyB0byB2b3RlIGZvciB1c2luZyBlYXN5IHZpc3VhbCBndWlkZXMuIFZvdGVycyBjYW5cbiAgICAgICAgICAgICAgICB7JyAnfVxuICAgICAgICAgICAgICAgIGN1c3RvbWl6ZSB0aGVpciBvd24gYmFsbG90IHRvIGRpc3BsYXkgZW5kb3JzZW1lbnRzIHRoZXkgdHJ1c3QsIGZyb21cbiAgICAgICAgICAgICAgICB7JyAnfVxuICAgICAgICAgICAgICAgIGZyaWVuZHMgYW5kIG9yZ2FuaXphdGlvbnMuXG4gICAgICAgICAgICAgIDwvRGVzY3JpcHRpb24+XG4gICAgICAgICAgICAgIDxEZXNjcmlwdGlvbj5cbiAgICAgICAgICAgICAgICBVc2luZyBXZSBWb3RlLCB2b3RlcnMgY2FuIG5vdyBjb25maWRlbnRseSBwbGFuIG91dCB0aGVpciB3aG9sZSBiYWxsb3QgaW5cbiAgICAgICAgICAgICAgICB7JyAnfVxuICAgICAgICAgICAgICAgIHNpeCBtaW51dGVzIG9yIGxlc3MuXG4gICAgICAgICAgICAgIDwvRGVzY3JpcHRpb24+XG4gICAgICAgICAgICAgIDxEZXNjcmlwdGlvbiBjbGFzc05hbWU9XCJ1X21hcmdpbi1jZW50ZXJcIj5cbiAgICAgICAgICAgICAgICA8QnV0dG9uXG4gICAgICAgICAgICAgICAgICB2YXJpYW50PVwiY29udGFpbmVkXCJcbiAgICAgICAgICAgICAgICAgIGNvbG9yPVwicHJpbWFyeVwiXG4gICAgICAgICAgICAgICAgICBzaXplPVwibGFyZ2VcIlxuICAgICAgICAgICAgICAgICAgY2xhc3Nlcz17eyByb290OiBjbGFzc2VzLmJ1dHRvbk1heFdpZHRoLCBjb250YWluZWRQcmltYXJ5OiBjbGFzc2VzLmJ1dHRvbkNvbnRhaW5lZCB9fVxuICAgICAgICAgICAgICAgICAgaWQ9XCJ3ZWxjb21lRm9yT3JnYW5pemF0aW9uc0hvd0l0V29ya3NGb3JWb3RlcnNcIlxuICAgICAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4gaGlzdG9yeVB1c2goJy9ob3cvZm9yLXZvdGVycycpfVxuICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgIEhvdyBpdCBXb3JrcyBGb3IgVm90ZXJzXG4gICAgICAgICAgICAgICAgPC9CdXR0b24+XG4gICAgICAgICAgICAgIDwvRGVzY3JpcHRpb24+XG4gICAgICAgICAgICA8L0Rlc2NyaXB0aW9uTGVmdENvbHVtbj5cbiAgICAgICAgICA8L0Rlc2NyaXB0aW9uQ29udGFpbmVyPlxuICAgICAgICA8L1NlY3Rpb24+XG4gICAgICAgIDxTZWN0aW9uPlxuICAgICAgICAgIDxTZWN0aW9uVGl0bGU+VGVzdGltb25pYWxzPC9TZWN0aW9uVGl0bGU+XG4gICAgICAgICAgPERlc2NyaXB0aW9uQ29udGFpbmVyPlxuICAgICAgICAgICAgPFRlc3RpbW9uaWFsXG4gICAgICAgICAgICAgIGltYWdlVXJsPXt0ZXN0aW1vbmlhbEltYWdlVXJsfVxuICAgICAgICAgICAgICB0ZXN0aW1vbmlhbEF1dGhvcj17dGVzdGltb25pYWxBdXRob3J9XG4gICAgICAgICAgICAgIHRlc3RpbW9uaWFsPXt0ZXN0aW1vbmlhbH1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgPC9EZXNjcmlwdGlvbkNvbnRhaW5lcj5cbiAgICAgICAgPC9TZWN0aW9uPlxuICAgICAgICA8U2VjdGlvbj5cbiAgICAgICAgICA8U2VjdGlvblRpdGxlPlxuICAgICAgICAgICAgV2UgVm90ZVxuICAgICAgICAgICAgeycgJ31cbiAgICAgICAgICAgIDxTZWN0aW9uVGl0bGVCb2xkR29sZD5QcmVtaXVtPC9TZWN0aW9uVGl0bGVCb2xkR29sZD5cbiAgICAgICAgICA8L1NlY3Rpb25UaXRsZT5cbiAgICAgICAgICA8RGVzY3JpcHRpb25Db250YWluZXI+XG4gICAgICAgICAgICA8RGVzY3JpcHRpb24+XG4gICAgICAgICAgICAgIEluIGFkZGl0aW9uIHRvIG91ciBmcmVlIHRvb2xzZXRzLCB3ZSBhbHNvIG9mZmVyIGFkdmFuY2VkIHBhcnRuZXJzaGlwIG9wcG9ydHVuaXRpZXMgdG8gY3VzdG9taXplIG9yIGV4cGFuZCB5b3VyIHJlYWNoLlxuICAgICAgICAgICAgPC9EZXNjcmlwdGlvbj5cbiAgICAgICAgICAgIDxEZXNjcmlwdGlvbj5cbiAgICAgICAgICAgICAgT3VyIHRlYW0gY2FuIHBhcnRuZXIgd2l0aCB5b3VyIGJyYW5kIHRvIGNvbmZpZ3VyZSBhIGN1c3RvbWl6ZWQgbGFuZGluZyBwYWdlIGZvciB5b3UgdG8gc2hhcmUgd2l0aCBtZW1iZXJzLFxuICAgICAgICAgICAgICB7JyAnfVxuICAgICAgICAgICAgICBhZGQgYSBXZSBWb3RlIHdpZGdldCB0byB5b3VyIHdlYnNpdGUsIGFzc2lzdCBpbiBtZXNzYWdpbmcgdG8gbGF1bmNoIHRoZSBwYXJ0bmVyc2hpcCwgZHJpdmUgYWRkaXRpb25hbCB0cmFmZmljLCBvciBwcm92aWRlIGFuYWx5dGljcy4gTGVhcm4gbW9yZSFcbiAgICAgICAgICAgIDwvRGVzY3JpcHRpb24+XG4gICAgICAgICAgICA8RGVzY3JpcHRpb24gY2xhc3NOYW1lPVwidV9tYXJnaW4tY2VudGVyXCI+XG4gICAgICAgICAgICAgIDxCdXR0b25cbiAgICAgICAgICAgICAgICB2YXJpYW50PVwiY29udGFpbmVkXCJcbiAgICAgICAgICAgICAgICBjb2xvcj1cInByaW1hcnlcIlxuICAgICAgICAgICAgICAgIHNpemU9XCJsYXJnZVwiXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtjbGFzc2VzLmdvbGRCdXR0b259XG4gICAgICAgICAgICAgICAgY2xhc3Nlcz17eyByb290OiBjbGFzc2VzLmJ1dHRvbk1heFdpZHRoLCBjb250YWluZWRQcmltYXJ5OiBjbGFzc2VzLmJ1dHRvbkNvbnRhaW5lZCB9fVxuICAgICAgICAgICAgICAgIGlkPVwid2VsY29tZUZvck9yZ2FuaXphdGlvbnNQcmljaW5nXCJcbiAgICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiBoaXN0b3J5UHVzaCgnL21vcmUvcHJpY2luZy9vcmdhbml6YXRpb25zJyl9XG4gICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICBWaWV3IFByaWNpbmdcbiAgICAgICAgICAgICAgPC9CdXR0b24+XG4gICAgICAgICAgICA8L0Rlc2NyaXB0aW9uPlxuICAgICAgICAgIDwvRGVzY3JpcHRpb25Db250YWluZXI+XG4gICAgICAgIDwvU2VjdGlvbj5cbiAgICAgICAgPFNlY3Rpb24gdmFyaWFudD1cImRhcmtcIiByb3VuZGVkPXshaXNWb3RlclNpZ25lZElufT5cbiAgICAgICAgICA8U2VjdGlvblRpdGxlPk91ciBOZXR3b3JrPC9TZWN0aW9uVGl0bGU+XG4gICAgICAgICAgPE5ldHdvcmtDb250YWluZXI+XG4gICAgICAgICAgICA8TmV0d29ya0ltYWdlIHNyYz17Y29yZG92YURvdChmZndkTG9nbyl9IGFsdD1cIkZhc3QgRm9yd2FyZFwiIC8+XG4gICAgICAgICAgICA8TmV0d29ya0ltYWdlIHNyYz17Y29yZG92YURvdChnb29nbGVMb2dvKX0gYWx0PVwiR29vZ2xlXCIgLz5cbiAgICAgICAgICAgIHsvKiA8TmV0d29ya0ltYWdlIHNyYz17Y29yZG92YURvdCgnL2ltZy9nbG9iYWwvbG9nb3MvY3RjbF9sb2dvLTIwMHgyMDAucG5nJyl9IGFsdD1cIkNlbnRlciBmb3IgVGVjaG5vbG9neSBhbmQgQ2l2aWMgTGlmZVwiIC8+ICovfVxuICAgICAgICAgICAgPE5ldHdvcmtJbWFnZSBzcmM9e2NvcmRvdmFEb3Qodm90ZURvdE9yZ0xvZ28pfSBhbHQ9XCJWb3RlLm9yZ1wiIC8+XG4gICAgICAgICAgICA8TmV0d29ya0ltYWdlIHNyYz17Y29yZG92YURvdCh2aXBMb2dvKX0gYWx0PVwiVm90aW5nIEluZm9ybWF0aW9uIFByb2plY3RcIiAvPlxuICAgICAgICAgIDwvTmV0d29ya0NvbnRhaW5lcj5cbiAgICAgICAgPC9TZWN0aW9uPlxuICAgICAgICA8Rm9vdGVyIC8+XG4gICAgICA8L1dyYXBwZXI+XG4gICAgKTtcbiAgfVxufVxuXG5jb25zdCBzdHlsZXMgPSAoKSA9PiAoe1xuICBidXR0b25Db250YWluZWQ6IHtcbiAgICBib3JkZXJSYWRpdXM6IDMyLFxuICB9LFxuICBidXR0b25NYXhXaWR0aDoge1xuICAgIHdpZHRoOiAnMTAwJScsXG4gICAgbWFyZ2luOiAnMCBhdXRvJyxcbiAgfSxcbiAgaWNvbkJ1dHRvbjoge1xuICAgIGNvbG9yOiAnd2hpdGUnLFxuICB9LFxuICBnb2xkQnV0dG9uOiB7XG4gICAgYmFja2dyb3VuZDogJ2xpbmVhci1ncmFkaWVudCg3MGRlZywgcmdiYSgyMTksMTc5LDg2LDEpIDE0JSwgcmdiYSgxNjIsMTI0LDMzLDEpIDk0JSknLFxuICB9LFxufSk7XG5cbmNvbnN0IFdyYXBwZXIgPSBzdHlsZWQuZGl2YFxuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWZsb3c6IGNvbHVtbiBub3dyYXA7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIGJhY2tncm91bmQ6IHdoaXRlO1xuICBvdmVyZmxvdy14OiBoaWRkZW47XG4gIHBhZGRpbmctdG9wOiAkeyh7IHBhZFRvcCB9KSA9PiBwYWRUb3B9O1xuYDtcblxuY29uc3QgSGVhZGVyRm9yT3JnYW5pemF0aW9ucyA9IHN0eWxlZC5kaXZgXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgaGVpZ2h0OiA1OTBweDtcbiAgd2lkdGg6IDExMCU7XG4gIGNvbG9yOiB3aGl0ZTtcbiAgYmFja2dyb3VuZC1pbWFnZTogbGluZWFyLWdyYWRpZW50KHRvIGJvdHRvbSwgIzQxNWE5OSwgIzJkM2I1ZSk7XG4gIGJvcmRlci1ib3R0b20tbGVmdC1yYWRpdXM6IDUwJSAyNSU7XG4gIGJvcmRlci1ib3R0b20tcmlnaHQtcmFkaXVzOiA1MCUgMjUlO1xuICBwYWRkaW5nOiAwIDJlbTtcbiAgbWFyZ2luLXRvcDogLTcycHg7XG4gIEBtZWRpYSAobWF4LXdpZHRoOiAkeyh7IHRoZW1lIH0pID0+IHRoZW1lLmJyZWFrcG9pbnRzLm1kfSkge1xuICAgIGhlaWdodDogNDUwcHg7XG4gIH1cbiAgQG1lZGlhIChtYXgtd2lkdGg6ICR7KHsgdGhlbWUgfSkgPT4gdGhlbWUuYnJlYWtwb2ludHMueHN9KSB7XG4gICAgaGVpZ2h0OiAzODBweDtcbiAgfVxuYDtcblxuY29uc3QgU2VjdGlvblRpdGxlQm9sZEdvbGQgPSBzdHlsZWQuc3BhbmBcbiAgY29sb3I6IHJnYigyMTksIDE3OSwgODYpO1xuICBmb250LXdlaWdodDogYm9sZDtcbmA7XG5cbmV4cG9ydCBkZWZhdWx0IHdpdGhTdHlsZXMoc3R5bGVzKShXZWxjb21lRm9yT3JnYW5pemF0aW9ucyk7XG4iXX0=*/