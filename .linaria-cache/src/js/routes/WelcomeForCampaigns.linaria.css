.w1ofv90z{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-flow:column nowrap;-ms-flex-flow:column nowrap;flex-flow:column nowrap;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;background:white;overflow-x:hidden;padding-top:var(--w1ofv90z-0);}
.h1mwoabw{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-flow:column;-ms-flex-flow:column;flex-flow:column;padding:1em 1em 3em 1em;text-align:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;color:#333;width:100%;}
.h7fvxt5{position:relative;height:530px;width:110%;color:white;background-image:linear-gradient(to bottom,#415a99,#2d3b5e);border-bottom-left-radius:50% 25%;border-bottom-right-radius:50% 25%;padding:0 2em;margin-top:-72px;}@media (max-width:var(--h7fvxt5-0)){.h7fvxt5{height:530px;}}@media (max-width:var(--h7fvxt5-1)){.h7fvxt5{height:560px;}}
.h16n3aot{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-flow:row nowrap;-ms-flex-flow:row nowrap;flex-flow:row nowrap;font-size:18px;padding:8px;background:rgb(65,81,118);width:400px;max-width:100%;margin-top:1rem;border-radius:4px;}@media (max-width:var(--h16n3aot-0)){.h16n3aot{width:100%;}}
.h3sere2{width:24px;height:24px;background:white;color:var(--h3sere2-0);border-radius:4px;}@media (max-width:var(--h3sere2-1)){.h3sere2{width:24px;height:24px;min-width:24px;}}
.hzslm2a{font-weight:bold;color:white;margin:0 .7rem;text-align:left;}@media (max-width:var(--hzslm2a-0)){.hzslm2a{margin:auto .7rem;}}
.h10p6qn5{margin:30px auto;}
.f126vgix{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-flow:row nowrap;-ms-flex-flow:row nowrap;flex-flow:row nowrap;font-size:18px;padding:8px;background:rgb(216,221,232);width:600px;max-width:100%;margin-top:1rem;padding-top:var(--f126vgix-0);border-radius:4px;}@media (max-width:var(--f126vgix-1)){.f126vgix{width:100%;}}
.f1c8umzf{font-weight:bold;margin:0 .7rem;text-align:left;}@media (max-width:var(--f1c8umzf-0)){.f1c8umzf{margin:auto .7rem;}}
.fs1wbhi{color:rgb(6,33,79);}
/*# sourceMappingURL=data:application/json;base64,*/