.wvbphn4{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-flow:column nowrap;-ms-flex-flow:column nowrap;flex-flow:column nowrap;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;background:white;overflow-x:hidden;padding-top:var(--wvbphn4-0);}
.s1nkxgd{background:white;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-flow:column;-ms-flex-flow:column;flex-flow:column;width:960px;max-width:90%;padding-bottom:2em;}
.d1mixafs{display:inherit;}@media (max-width:var(--d1mixafs-0)){.d1mixafs{display:none;}}
.m17g7v9k{display:inherit;margin-top:var(--m17g7v9k-0);}@media (min-width:var(--m17g7v9k-1)){.m17g7v9k{display:none;}}
/*# sourceMappingURL=data:application/json;base64,*/