.w18mvicm{padding-top:80px;}
.svziui9{width:-webkit-fit-content;width:-moz-fit-content;width:fit-content;font-weight:bolder;font-size:18px;margin-bottom:4px;}
.ibcj9ok{position:absolute;left:158px;top:16px;}.ibcj9ok *{color:#777;}
/*# sourceMappingURL=data:application/json;base64,*/