.wdfn3co{padding-top:var(--wdfn3co-0);}
.b17dedj{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;}
/*# sourceMappingURL=data:application/json;base64,{"version":3,"sources":["D:\\Jarod\\WeVote\\WebApp\\src\\js\\routes\\Ballot\\Ballot.jsx"],"names":[".wdfn3co",".b17dedj"],"mappings":"AA+kCMA;AAKAC","file":"D:\\Jarod\\WeVote\\WebApp\\src\\js\\routes\\Ballot\\Ballot.jsx","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Helmet from 'react-helmet';\nimport moment from 'moment';\nimport { styled } from 'linaria/react';\nimport Badge from '@material-ui/core/Badge';\nimport Chip from '@material-ui/core/Chip';\nimport Link from '@material-ui/core/Link';\nimport { withStyles } from '@material-ui/core/styles';\nimport AddressBox from '../../components/AddressBox';\nimport AnalyticsActions from '../../actions/AnalyticsActions';\nimport BallotActions from '../../actions/BallotActions';\nimport BallotElectionListWithFilters from '../../components/Ballot/BallotElectionListWithFilters';\nimport BallotDecisionsTabs from '../../components/Navigation/BallotDecisionsTabs';\nimport BallotItemCompressed from '../../components/Ballot/BallotItemCompressed';\nimport BallotTitleHeader from './BallotTitleHeader';\nimport BallotSideBar from '../../components/Navigation/BallotSideBar';\nimport BallotSearch from '../../components/Ballot/BallotSearch';\nimport BallotStatusMessage from '../../components/Ballot/BallotStatusMessage';\nimport BallotStore from '../../stores/BallotStore';\nimport BrowserPushMessage from '../../components/Widgets/BrowserPushMessage';\nimport cookies from '../../utils/cookies';\nimport { cordovaBallotFilterTopMargin, cordovaScrollablePaneTopPadding } from '../../utils/cordovaOffsets';\nimport { historyPush, isCordova, isWebApp } from '../../utils/cordovaUtils';\nimport ElectionActions from '../../actions/ElectionActions';\nimport ElectionStore from '../../stores/ElectionStore';\nimport isMobile from '../../utils/isMobile';\nimport LocationGuess from '../../components/Ballot/LocationGuess';\nimport mapCategoryFilterType from '../../utils/map-category-filter-type';\nimport IssueActions from '../../actions/IssueActions';\nimport IssueStore from '../../stores/IssueStore';\nimport OpenExternalWebSite from '../../components/Widgets/OpenExternalWebSite';\nimport OrganizationActions from '../../actions/OrganizationActions';\nimport { renderLog } from '../../utils/logging';\nimport SupportActions from '../../actions/SupportActions';\nimport SupportStore from '../../stores/SupportStore';\nimport VoterActions from '../../actions/VoterActions';\nimport VoterGuideStore from '../../stores/VoterGuideStore';\nimport AppStore from '../../stores/AppStore';\nimport VoterStore from '../../stores/VoterStore';\nimport webAppConfig from '../../config';\nimport { formatVoterBallotList, checkShouldUpdate } from './utils';\nimport AppActions from '../../actions/AppActions';\nimport BallotSummaryFooter from '../../components/Navigation/BallotSummaryFooter';\n\nconst TYPES = require('keymirror')({\n  OFFICE: null,\n  MEASURE: null,\n});\n\n// Related to WebApp/src/js/components/VoterGuide/VoterGuideBallot.jsx\nconst BALLOT_ITEM_FILTER_TYPES = ['Federal', 'State', 'Measure', 'Local'];\nconst delayBeforeVoterRefreshCall = 1000;\n\nclass Ballot extends Component {\n  static propTypes = {\n    location: PropTypes.object,\n    pathname: PropTypes.string,\n    params: PropTypes.object,\n    classes: PropTypes.object,\n  };\n\n  constructor (props) {\n    super(props);\n    this.state = {\n      ballotElectionList: [],\n      ballotItemUnfurledTracker: {},\n      ballotLength: 0,\n      ballotRemainingChoicesLength: 0,\n      ballotWithAllItems: [],\n      ballotWithItemsFromCompletionFilterType: [],\n      foundFirstRaceLevel: false,\n      raceLevelFilterType: '',\n      ballotReturnedWeVoteId: '',\n      ballotLocationShortcut: '',\n      candidateForModal: {\n        voter_guides_to_follow_for_latest_ballot_item: [],\n        position_list: [],\n      },\n      componentDidMountFinished: false,\n      lastHashUsedInLinkScroll: '',\n      measureForModal: {\n        voter_guides_to_follow_for_latest_ballot_item: [],\n        position_list: [],\n      },\n      memberViewedBallotHasBeenSavedOnce: {},\n      mounted: false,\n      numberOfVoterRetrieveAttempts: 0,\n      showSelectBallotModal: false,\n      voterBallotList: [],\n      showFilterTabs: false,\n      ballotHeaderUnpinned: false,\n      isSearching: false,\n      ballotSearchResults: [],\n      raceLevelFilterItemsInThisBallot: undefined,\n    };\n\n    this.ballotItems = {};\n    this.ballotItemLinkHasBeenClicked = this.ballotItemLinkHasBeenClicked.bind(this);\n    this.toggleSelectBallotModal = this.toggleSelectBallotModal.bind(this);\n    this.updateOfficeDisplayUnfurledTracker = this.updateOfficeDisplayUnfurledTracker.bind(this);\n  }\n\n  componentDidMount () {\n    const ballotBaseUrl = '/ballot';\n    this.appStoreListener = AppStore.addListener(this.onAppStoreChange.bind(this));\n\n    this.setState({\n      componentDidMountFinished: true,\n      mounted: true,\n    });\n\n    const completionLevelFilterType = BallotStore.getCompletionLevelFilterTypeSaved() || 'all';\n    const ballotWithItemsFromCompletionFilterType = BallotStore.getBallotByCompletionLevelFilterType(completionLevelFilterType);\n    if (ballotWithItemsFromCompletionFilterType !== undefined) {\n      // console.log('ballotWithItemsFromCompletionFilterType !== undefined');\n      if (completionLevelFilterType === 'all') {\n        this.setState({\n          ballotWithAllItems: ballotWithItemsFromCompletionFilterType,\n          ballotWithItemsFromCompletionFilterType,\n        });\n      } else {\n        const ballotWithAllItems = BallotStore.getBallotByCompletionLevelFilterType('all');\n        this.setState({\n          ballotWithAllItems,\n          ballotWithItemsFromCompletionFilterType,\n        });\n      }\n    }\n\n    let googleCivicElectionIdFromUrl = this.props.params.google_civic_election_id || 0;\n\n    // console.log('googleCivicElectionIdFromUrl: ', googleCivicElectionIdFromUrl);\n    let ballotReturnedWeVoteId = this.props.params.ballot_returned_we_vote_id || '';\n    ballotReturnedWeVoteId = ballotReturnedWeVoteId === 'none' ? '' : ballotReturnedWeVoteId;\n\n    // console.log('this.props.params.ballot_returned_we_vote_id: ', this.props.params.ballot_returned_we_vote_id);\n    let ballotLocationShortcut = this.props.params.ballot_location_shortcut || '';\n    ballotLocationShortcut = ballotLocationShortcut.trim();\n    ballotLocationShortcut = ballotLocationShortcut === 'none' ? '' : ballotLocationShortcut;\n    let googleCivicElectionId = 0;\n\n    // console.log('componentDidMount, BallotStore.ballotProperties: ', BallotStore.ballotProperties);\n    if (googleCivicElectionIdFromUrl !== 0) {\n      googleCivicElectionIdFromUrl = parseInt(googleCivicElectionIdFromUrl, 10);\n\n      // googleCivicElectionId = googleCivicElectionIdFromUrl;\n    } else if (BallotStore.ballotProperties && BallotStore.ballotProperties.google_civic_election_id) {\n      googleCivicElectionId = BallotStore.ballotProperties.google_civic_election_id;\n    }\n\n    // console.log('ballotReturnedWeVoteId: ', ballotReturnedWeVoteId, ', ballotLocationShortcut:', ballotLocationShortcut, ', googleCivicElectionIdFromUrl: ', googleCivicElectionIdFromUrl);\n    if (ballotReturnedWeVoteId || ballotLocationShortcut || googleCivicElectionIdFromUrl) {\n      if (ballotLocationShortcut !== '') {\n        // Change the ballot on load to make sure we are getting what we expect from the url\n        BallotActions.voterBallotItemsRetrieve(0, '', ballotLocationShortcut);\n\n        // Change the URL to match\n        historyPush(`${ballotBaseUrl}/${ballotLocationShortcut}`);\n      } else if (ballotReturnedWeVoteId !== '') {\n        // Change the ballot on load to make sure we are getting what we expect from the url\n        BallotActions.voterBallotItemsRetrieve(0, ballotReturnedWeVoteId, '');\n\n        // Change the URL to match\n        historyPush(`${ballotBaseUrl}/id/${ballotReturnedWeVoteId}`);\n      } else if (googleCivicElectionIdFromUrl !== 0) {\n        // Change the ballot on load to make sure we are getting what we expect from the url\n        if (googleCivicElectionId !== googleCivicElectionIdFromUrl) {\n          BallotActions.voterBallotItemsRetrieve(googleCivicElectionIdFromUrl, '', '');\n\n          // Change the URL to match\n          const ballotElectionUrl = `${ballotBaseUrl}/election/${googleCivicElectionIdFromUrl}`;\n          historyPush(ballotElectionUrl);\n        }\n\n        // No change to the URL needed\n        // Now set googleCivicElectionId\n        googleCivicElectionId = googleCivicElectionIdFromUrl;\n      } else if (googleCivicElectionId !== 0) {\n        // No need to retrieve data again\n        // Change the URL to match the current googleCivicElectionId\n        const ballotElectionUrl2 = `${ballotBaseUrl}/election/${googleCivicElectionId}`;\n        historyPush(ballotElectionUrl2);\n      }\n    } else if (BallotStore.ballotProperties && BallotStore.ballotProperties.ballot_found === false) { // No ballot found\n      // console.log('if (BallotStore.ballotProperties && BallotStore.ballotProperties.ballot_found === false');\n      historyPush('/settings/location');\n    } else if (ballotWithItemsFromCompletionFilterType === undefined) {\n      // console.log('WebApp doesn't know the election or have ballot data, so ask the API server to return best guess');\n      BallotActions.voterBallotItemsRetrieve(0, '', '');\n    }\n\n    // console.log('Ballot, googleCivicElectionId: ', googleCivicElectionId, ', ballotLocationShortcut: ', ballotLocationShortcut, 'ballotReturnedWeVoteId: ', ballotReturnedWeVoteId);\n    // console.log('VoterStore.election_id: ', VoterStore.electionId());\n    if (googleCivicElectionId || ballotLocationShortcut || ballotReturnedWeVoteId) {\n      // console.log('CALLING IssueActions.issuesRetrieveForElection');\n\n      if (IssueStore.getPreviousGoogleCivicElectionId() < 1) {\n        IssueActions.issuesRetrieveForElection(googleCivicElectionId, ballotLocationShortcut, ballotReturnedWeVoteId);\n      }\n\n      this.setState({\n        issuesRetrievedFromGoogleCivicElectionId: googleCivicElectionId,\n        issuesRetrievedFromBallotReturnedWeVoteId: ballotReturnedWeVoteId,\n        issuesRetrievedFromBallotLocationShortcut: ballotLocationShortcut,\n      });\n    }\n    // We need a ballotStoreListener here because we want the ballot to display before positions are received\n    this.ballotStoreListener = BallotStore.addListener(this.onBallotStoreChange.bind(this));\n    // NOTE: voterAllPositionsRetrieve is also called in SupportStore when voterAddressRetrieve is received,\n    // so we get duplicate calls when you come straight to the Ballot page. There is no easy way around this currently.\n    SupportActions.voterAllPositionsRetrieve();\n\n    BallotActions.voterBallotListRetrieve(); // Retrieve a list of ballots for the voter from other elections\n    this.voterGuideStoreListener = VoterGuideStore.addListener(this.onVoterGuideStoreChange.bind(this));\n    this.supportStoreListener = SupportStore.addListener(this.onBallotStoreChange.bind(this));\n    this.onVoterStoreChange();\n    this.voterStoreListener = VoterStore.addListener(this.onVoterStoreChange.bind(this));\n\n    // Once a voter hits the ballot, they have gone through orientation\n    cookies.setItem('ballot_has_been_visited', '1', Infinity, '/');\n\n    this.electionListListener = ElectionStore.addListener(this.onElectionStoreChange.bind(this));\n    ElectionActions.electionsRetrieve();\n    OrganizationActions.organizationsFollowedRetrieve();\n    VoterActions.voterRetrieve(); // This is needed to update the interface status settings\n\n    if (googleCivicElectionId && googleCivicElectionId !== 0) {\n      AnalyticsActions.saveActionBallotVisit(googleCivicElectionId);\n    } else {\n      AnalyticsActions.saveActionBallotVisit(VoterStore.electionId());\n    }\n\n    const { location } = this.props;\n    const { pathname } = location;\n    this.setState({\n      ballotElectionList: BallotStore.ballotElectionList(),\n      completionLevelFilterType,\n      ballotReturnedWeVoteId,\n      ballotLocationShortcut,\n      googleCivicElectionId: parseInt(googleCivicElectionId, 10),\n      location,\n      pathname,\n      raceLevelFilterType: BallotStore.getRaceLevelFilterTypeSaved() || 'Federal',\n    });\n\n    const { hash } = location;\n    if (location && hash) {\n      // this.hashLinkScroll();\n      this.setState({ lastHashUsedInLinkScroll: hash });\n    }\n  }\n\n  componentWillReceiveProps (nextProps) {\n    // console.log('Ballot componentWillReceiveProps');\n\n    // We don't want to let the googleCivicElectionId disappear\n    const googleCivicElectionId = nextProps.params.google_civic_election_id || this.state.googleCivicElectionId;\n    let ballotReturnedWeVoteId = nextProps.params.ballot_returned_we_vote_id || '';\n    ballotReturnedWeVoteId = ballotReturnedWeVoteId.trim();\n    let ballotLocationShortcut = nextProps.params.ballot_location_shortcut || '';\n    ballotLocationShortcut = ballotLocationShortcut.trim();\n    const completionLevelFilterType = BallotStore.getCompletionLevelFilterTypeSaved() || 'all';\n\n    // Were there any actual changes?\n    if (ballotReturnedWeVoteId !== this.state.ballotReturnedWeVoteId ||\n        ballotLocationShortcut !== this.state.ballotLocationShortcut ||\n        googleCivicElectionId !== this.state.googleCivicElectionId ||\n        completionLevelFilterType !== this.state.completionLevelFilterType) {\n      // console.log('Ballot componentWillReceiveProps changes found');\n      this.setState({\n        ballotWithAllItems: BallotStore.getBallotByCompletionLevelFilterType('all'),\n        ballotWithItemsFromCompletionFilterType: BallotStore.getBallotByCompletionLevelFilterType(completionLevelFilterType),\n        ballotReturnedWeVoteId,\n        ballotLocationShortcut,\n        completionLevelFilterType,\n        googleCivicElectionId: parseInt(googleCivicElectionId, 10),\n        location: nextProps.location,\n        pathname: nextProps.location.pathname,\n      });\n      if (googleCivicElectionId && googleCivicElectionId !== 0) {\n        AnalyticsActions.saveActionBallotVisit(googleCivicElectionId);\n      } else if (VoterStore.electionId()) {\n        AnalyticsActions.saveActionBallotVisit(VoterStore.electionId());\n      }\n    } else {\n      // console.log('Ballot componentWillReceiveProps NO changes found');\n    }\n\n    if (nextProps.location && nextProps.location.hash) {\n      // this.hashLinkScroll();\n      this.setState({ lastHashUsedInLinkScroll: nextProps.location.hash });\n    }\n  }\n\n  shouldComponentUpdate (nextProps, nextState) {\n    // This lifecycle method tells the component to NOT render if componentWillReceiveProps didn't see any changes\n    return checkShouldUpdate(this.state, nextState);\n  }\n\n  componentDidUpdate (prevProps, prevState) {\n    // console.log('Ballot componentDidUpdate');\n    const { ballotWithAllItems, foundFirstRaceLevel, raceLevelFilterType } = this.state;\n    if (!foundFirstRaceLevel) {\n      // We only need to be here if we haven't found the first Race level we are going to show, or we don't have a raceLevelFilterType identified\n      let { newRaceLevelFilterType } = this.state;\n      let raceLevelFilterTypeChanged = false;\n      // console.log('Ballot, componentDidUpdate raceLevelFilterType BEFORE:', raceLevelFilterType, ', newRaceLevelFilterType: ', newRaceLevelFilterType);\n\n      let raceLevelFilterItemsInThisBallot = [];\n      if (ballotWithAllItems && ballotWithAllItems.length) {\n        // console.log('Ballot, componentDidUpdate ballotWithAllItems:', this.state.ballotWithAllItems);\n        // const raceLevelFilterItems = ballotWithAllItems.filter(item => item.race_office_level === raceLevelFilterType ||\n        //   item.kind_of_ballot_item === raceLevelFilterType.toUpperCase());\n        let currentIndex = 0;\n        let lowestIndexFound = 3;\n        const raceLevelsAlreadyFound = [];\n        let ballotItemRaceOfficeLevel;\n        let raceLevelCapitalized;\n        let ballotItemKindOfOfficeItem;\n        raceLevelFilterItemsInThisBallot = ballotWithAllItems.filter((ballotItem) => {\n          // If true comes back from this filter, the \"map\" tacked onto the end of this returns just the race_office_level\n          raceLevelCapitalized = '';\n          ballotItemRaceOfficeLevel = ballotItem.race_office_level || '';\n          if (ballotItemRaceOfficeLevel) {\n            // For Federal, State, Local\n            raceLevelCapitalized = ballotItemRaceOfficeLevel.charAt(0).toUpperCase() + ballotItemRaceOfficeLevel.slice(1).toLowerCase();\n          } else {\n            // For Measures\n            ballotItemKindOfOfficeItem = ballotItem.kind_of_ballot_item || '';\n            raceLevelCapitalized = ballotItemKindOfOfficeItem.charAt(0).toUpperCase() + ballotItemKindOfOfficeItem.slice(1).toLowerCase();\n          }\n          currentIndex = BALLOT_ITEM_FILTER_TYPES.indexOf(raceLevelCapitalized);\n          if (currentIndex > -1) {\n            if (currentIndex < lowestIndexFound) {\n              newRaceLevelFilterType = raceLevelCapitalized;\n              lowestIndexFound = currentIndex;\n            }\n            if (raceLevelsAlreadyFound.indexOf(raceLevelCapitalized) === -1) {\n              // If this office level hasn't already been added, then add it\n              raceLevelsAlreadyFound.push(raceLevelCapitalized);\n              return raceLevelCapitalized;\n            } else {\n              return null;\n            }\n          }\n          return null;\n        }).map((ballotItem) => {\n          raceLevelCapitalized = '';\n          ballotItemRaceOfficeLevel = ballotItem.race_office_level || '';\n          if (ballotItemRaceOfficeLevel) {\n            // For Federal, State, Local\n            raceLevelCapitalized = ballotItemRaceOfficeLevel.charAt(0).toUpperCase() + ballotItemRaceOfficeLevel.slice(1).toLowerCase();\n          } else {\n            // For Measures\n            ballotItemKindOfOfficeItem = ballotItem.kind_of_ballot_item || '';\n            raceLevelCapitalized = ballotItemKindOfOfficeItem.charAt(0).toUpperCase() + ballotItemKindOfOfficeItem.slice(1).toLowerCase();\n          }\n          return raceLevelCapitalized;\n        });\n\n        // We must have a raceLevelFilterType that matches this ballot\n        const currentRaceLevelFilterTypeNotFoundInBallot = raceLevelFilterItemsInThisBallot.indexOf(raceLevelFilterType) === -1;\n        if (!raceLevelFilterType || currentRaceLevelFilterTypeNotFoundInBallot) {\n          newRaceLevelFilterType = BALLOT_ITEM_FILTER_TYPES[lowestIndexFound];\n          raceLevelFilterTypeChanged = true;\n        }\n      }\n\n      this.setState({ raceLevelFilterItemsInThisBallot });\n      // console.log('Ballot, componentDidUpdate raceLevelFilterType AFTER:', raceLevelFilterType, ', newRaceLevelFilterType: ', newRaceLevelFilterType);\n      // console.log('Ballot, componentDidUpdate raceLevelFilterItemsInThisBallot:', raceLevelFilterItemsInThisBallot);\n\n      if (this.state.lastHashUsedInLinkScroll && this.state.lastHashUsedInLinkScroll !== prevState.lastHashUsedInLinkScroll) {\n        this.hashLinkScroll();\n      }\n\n      if (!foundFirstRaceLevel || raceLevelFilterTypeChanged) {\n        if (raceLevelFilterTypeChanged) {\n          this.setState({\n            raceLevelFilterType: newRaceLevelFilterType,\n          });\n        }\n        this.setState({\n          foundFirstRaceLevel: true,\n          showFilterTabs: raceLevelFilterItemsInThisBallot.length > 1,\n        });\n      }\n    }\n  }\n\n  componentWillUnmount () {\n    // console.log('Ballot componentWillUnmount');\n    this.setState({\n      mounted: false,\n    });\n\n    this.ballotStoreListener.remove();\n    this.electionListListener.remove();\n    this.supportStoreListener.remove();\n    this.voterGuideStoreListener.remove();\n    this.voterStoreListener.remove();\n    this.appStoreListener.remove();\n    this.timer = null;\n  }\n\n  // See https://reactjs.org/docs/error-boundaries.html\n  static getDerivedStateFromError (error) { // eslint-disable-line no-unused-vars\n    // Update state so the next render will show the fallback UI, We should have a 'Oh snap' page\n    return { hasError: true };\n  }\n\n  onAppStoreChange () {\n    this.setState({\n      ballotHeaderUnpinned: AppStore.getScrolledDown(),\n      showSelectBallotModal: AppStore.showSelectBallotModal(),\n    });\n    const { googleCivicElectionId } = this.state;\n    const membershipOrganizationWeVoteId = AppStore.getSiteOwnerOrganizationWeVoteId();\n    // console.log('onAppStoreChange membershipOrganizationWeVoteId: ', membershipOrganizationWeVoteId);\n    if (membershipOrganizationWeVoteId) {\n      const googleCivicElectionIdViewed = googleCivicElectionId || VoterStore.electionId();\n      if (!this.memberViewedBallotHasBeenSavedOnce(membershipOrganizationWeVoteId, googleCivicElectionIdViewed)) {\n        // console.log('onAppStoreChange getting ready to save: ', googleCivicElectionIdViewed);\n        if (googleCivicElectionIdViewed && googleCivicElectionIdViewed !== 0) {\n          AnalyticsActions.saveActionBallotVisit(googleCivicElectionIdViewed);\n          this.memberViewedBallot(membershipOrganizationWeVoteId, googleCivicElectionIdViewed);\n        }\n      } else {\n        // console.log('onAppStoreChange already saved: ', googleCivicElectionIdViewed);\n      }\n    }\n  }\n\n  onVoterStoreChange () {\n    // console.log('Ballot.jsx onVoterStoreChange');\n    const { mounted, googleCivicElectionId } = this.state;\n    if (mounted) {\n      let voterRefreshTimerOn = false;\n      if (this.props.location && this.props.location.query && this.props.location.query.voter_refresh_timer_on) {\n        voterRefreshTimerOn = (this.props.location.query.voter_refresh_timer_on);\n        // console.log('onVoterStoreChange voterRefreshTimerOn: ', voterRefreshTimerOn);\n      } else {\n        // console.log('onVoterStoreChange voterRefreshTimerOn is FALSE');\n      }\n      if (voterRefreshTimerOn) {\n        const voter = VoterStore.getVoter();\n        const { numberOfVoterRetrieveAttempts } = this.state;\n        if (voter && voter.is_signed_in) {\n          // console.log('onVoterStoreChange, about to historyPush(this.state.pathname):', this.state.pathname);\n          // Return to the same page without the \"voter_refresh_timer_on\" variable\n          historyPush(this.state.pathname);\n        } else if (numberOfVoterRetrieveAttempts < 3) {\n          // console.log('About to startTimerToRetrieveVoter');\n          this.startTimerToRetrieveVoter();\n        } else {\n          // We have exceeded the number of allowed attempts and want to \"turn off\" the request to refresh the voter object\n          // Return to the same page without the \"voter_refresh_timer_on\" variable\n          // console.log('Exiting voterRefreshTimerOn');\n          historyPush(this.state.pathname);\n        }\n      } else {\n        // console.log('Ballot.jsx onVoterStoreChange VoterStore.getVoter: ', VoterStore.getVoter());\n        this.setState({\n          googleCivicElectionId: parseInt(VoterStore.electionId(), 10),\n          textForMapSearch: VoterStore.getTextForMapSearch(),\n          voter: VoterStore.getVoter(),\n        });\n      }\n      const membershipOrganizationWeVoteId = AppStore.getSiteOwnerOrganizationWeVoteId();\n      // console.log('onVoterStoreChange membershipOrganizationWeVoteId: ', membershipOrganizationWeVoteId);\n      if (membershipOrganizationWeVoteId) {\n        const googleCivicElectionIdViewed = googleCivicElectionId || VoterStore.electionId();\n        if (!this.memberViewedBallotHasBeenSavedOnce(membershipOrganizationWeVoteId, googleCivicElectionIdViewed)) {\n          // console.log('onVoterStoreChange getting ready to save: ', googleCivicElectionIdViewed);\n          if (googleCivicElectionIdViewed && googleCivicElectionIdViewed !== 0) {\n            AnalyticsActions.saveActionBallotVisit(googleCivicElectionIdViewed);\n            this.memberViewedBallot(membershipOrganizationWeVoteId, googleCivicElectionIdViewed);\n          }\n        } else {\n          // console.log('onVoterStoreChange already saved: ', googleCivicElectionIdViewed);\n        }\n      }\n    }\n  }\n\n  onBallotStoreChange () {\n    // console.log('Ballot.jsx onBallotStoreChange');\n    const completionLevelFilterType = BallotStore.getCompletionLevelFilterTypeSaved() || '';\n    const { ballot, ballotProperties } = BallotStore;\n    // console.log('Ballot.jsx onBallotStorechange, ballotProperties: ', ballotProperties);\n    const {\n      mounted, issuesRetrievedFromGoogleCivicElectionId,\n      issuesRetrievedFromBallotReturnedWeVoteId, issuesRetrievedFromBallotLocationShortcut,\n    } = this.state;\n    let { raceLevelFilterType } = this.state;\n    if (!raceLevelFilterType) {\n      raceLevelFilterType = ''; // Make sure this is a string\n    }\n\n    if (mounted) {\n      if (ballotProperties && ballotProperties.ballot_found && ballot && ballot.length === 0) {\n        // Ballot is found but ballot is empty. We want to stay put.\n        // console.log('onBallotStoreChange: ballotWithItemsFromCompletionFilterType is empty');\n      } else {\n        const ballotWithAllItems = BallotStore.getBallotByCompletionLevelFilterType('all');\n        // console.log('completionLevelFilterType: ', completionLevelFilterType);\n        let ballotWithItemsFromCompletionFilterType = BallotStore.getBallotByCompletionLevelFilterType(completionLevelFilterType);\n        if (ballotWithItemsFromCompletionFilterType && ballotWithItemsFromCompletionFilterType.length) {\n          const raceLevelFilterItems = ballotWithItemsFromCompletionFilterType.filter(item => item.race_office_level === raceLevelFilterType ||\n            item.kind_of_ballot_item === raceLevelFilterType.toUpperCase());\n          this.setState({\n            doubleFilteredBallotItemsLength: raceLevelFilterItems.length,\n          });\n        } else {\n          // If here, the 'completionLevelFilterType' has been made obsolete.\n          // Unfortunately we can't reset it without creating a dispatch loop\n          // BallotActions.completionLevelFilterTypeSave('all');\n          ballotWithItemsFromCompletionFilterType = ballotWithAllItems;\n        }\n        this.setState({\n          ballotWithAllItems,\n          ballotWithItemsFromCompletionFilterType,\n        });\n      }\n    }\n    if (ballotProperties) {\n      // If the incoming googleCivicElectionId, ballotReturnedWeVoteId, or ballotLocationShortcut are different, call issuesRetrieveForElection\n      if (parseInt(ballotProperties.google_civic_election_id, 10) !== issuesRetrievedFromGoogleCivicElectionId ||\n          ballotProperties.ballot_returned_we_vote_id !== issuesRetrievedFromBallotReturnedWeVoteId ||\n          ballotProperties.ballot_location_shortcut !== issuesRetrievedFromBallotLocationShortcut) {\n        // console.log('onBallotStoreChange, Calling issuesRetrieveForElection');\n\n        if (IssueStore.getPreviousGoogleCivicElectionId() < 1) {\n          IssueActions.issuesRetrieveForElection(ballotProperties.google_civic_election_id, ballotProperties.ballot_location_shortcut, ballotProperties.ballot_returned_we_vote_id);\n        }\n\n        this.setState({\n          issuesRetrievedFromGoogleCivicElectionId: parseInt(BallotStore.ballotProperties.google_civic_election_id, 10),\n          issuesRetrievedFromBallotReturnedWeVoteId: BallotStore.ballotProperties.ballot_returned_we_vote_id,\n          issuesRetrievedFromBallotLocationShortcut: BallotStore.ballotProperties.ballot_location_shortcut,\n        });\n      }\n\n      this.setState({\n        ballotReturnedWeVoteId: ballotProperties.ballot_returned_we_vote_id || '',\n        ballotLocationShortcut: ballotProperties.ballot_location_shortcut || '',\n        googleCivicElectionId: parseInt(ballotProperties.google_civic_election_id, 10),\n        textForMapSearchFromBallot: ballotProperties.text_for_map_search || '',\n      });\n    }\n    this.setState({\n      ballotElectionList: BallotStore.ballotElectionList(),\n      completionLevelFilterType,\n    });\n\n    if (this.state.ballotLength !== BallotStore.ballotLength) {\n      this.setState({\n        ballotLength: BallotStore.ballotLength,\n        // raceLevelFilterType: 'Federal',\n        showFilterTabs: false,\n        foundFirstRaceLevel: false,\n      });\n    }\n    if (this.state.ballotRemainingChoicesLength !== BallotStore.ballotRemainingChoicesLength) {\n      this.setState({\n        ballotRemainingChoicesLength: BallotStore.ballotRemainingChoicesLength,\n      });\n    }\n\n    if (Object.keys(this.state.ballotItemUnfurledTracker).length === 0) {\n      // console.log('current tracker in Ballotstore', BallotStore.current_ballot_item_unfurled_tracker)\n      this.setState({\n        ballotItemUnfurledTracker: BallotStore.currentBallotItemUnfurledTracker,\n      });\n    }\n  }\n\n  onElectionStoreChange () {\n    // console.log('Elections, onElectionStoreChange');\n    this.setState({\n      voterBallotList: formatVoterBallotList(ElectionStore.getElectionList()),\n    });\n  }\n\n  onVoterGuideStoreChange () {\n    // console.log('Ballot onVoterGuideStoreChange');\n    // Update the data for the modal to include the position of the organization related to this ballot item\n    const { candidateForModal, measureForModal } = this.state;\n    if (candidateForModal) {\n      this.setState({\n        candidateForModal: {\n          ...candidateForModal,\n          voter_guides_to_follow_for_latest_ballot_item: VoterGuideStore.getVoterGuidesToFollowForLatestBallotItem(),\n        },\n      });\n    } else if (measureForModal) {\n      this.setState({\n        measureForModal: {\n          ...measureForModal,\n          voter_guides_to_follow_for_latest_ballot_item: VoterGuideStore.getVoterGuidesToFollowForLatestBallotItem(),\n        },\n      });\n    }\n  }\n\n  setBallotItemFilterType (raceLevelFilterType, doubleFilteredBallotItemsLength) {\n    BallotActions.raceLevelFilterTypeSave(raceLevelFilterType);\n    this.setState({\n      raceLevelFilterType,\n      doubleFilteredBallotItemsLength,\n      isSearching: false,\n    });\n  }\n\n  getEmptyMessageByFilterType (completionLevelFilterType) {\n    switch (completionLevelFilterType) {\n      case 'filterRemaining':\n        return 'You have chosen a candidate for every office and decided on all measures.';\n      case 'filterDecided':\n        return 'You haven\\'t chosen any candidates or decided on any measures yet.';\n      default:\n        return '';\n    }\n  }\n\n  setRaceLevelFilterType (type) {\n    this.setState({ raceLevelFilterType: type });\n  }\n\n  memberViewedBallotHasBeenSavedOnce = (membershipOrganizationWeVoteId, googleCivicElectionId) => {\n    if (!membershipOrganizationWeVoteId || !googleCivicElectionId) {\n      return false;\n    }\n    const { memberViewedBallotHasBeenSavedOnce } = this.state;\n    if (memberViewedBallotHasBeenSavedOnce[membershipOrganizationWeVoteId]) {\n      return memberViewedBallotHasBeenSavedOnce[membershipOrganizationWeVoteId][googleCivicElectionId] || false;\n    } else {\n      return false;\n    }\n  }\n\n  memberViewedBallot = (membershipOrganizationWeVoteId, googleCivicElectionId) => {\n    if (!membershipOrganizationWeVoteId || !googleCivicElectionId) {\n      return false;\n    }\n    let { memberViewedBallotHasBeenSavedOnce } = this.state;\n    if (!memberViewedBallotHasBeenSavedOnce) {\n      memberViewedBallotHasBeenSavedOnce = {};\n    }\n    if (!memberViewedBallotHasBeenSavedOnce[membershipOrganizationWeVoteId]) {\n      memberViewedBallotHasBeenSavedOnce[membershipOrganizationWeVoteId] = {};\n    }\n    memberViewedBallotHasBeenSavedOnce[membershipOrganizationWeVoteId][googleCivicElectionId] = true;\n    this.setState({\n      memberViewedBallotHasBeenSavedOnce,\n    });\n    return true;\n  }\n\n  showUserEmptyOptions = () => {\n    const { completionLevelFilterType } = this.state;\n    let { raceLevelFilterType } = this.state;\n    if (!raceLevelFilterType) {\n      raceLevelFilterType = ''; // Make sure this is a string\n    }\n    const raceLevel = raceLevelFilterType.toLowerCase();\n    switch (completionLevelFilterType) {\n      case 'filterDecided':\n        return (\n          <div>\n            <h3>\n              You have not decided on any&nbsp;\n              {raceLevel}\n              &nbsp;ballot items yet.\n              <br />\n              <br />\n              Click on &quot;\n              {window.innerWidth > 575 ? 'Remaining Choices' : 'Choices'}\n              &quot; to see the&nbsp;\n              {raceLevel}\n              &nbsp;ballot items you need to decide on.\n            </h3>\n          </div>\n        );\n      case 'filterRemaining':\n        return (\n          <div>\n            <h3>\n              You do not have any remaining&nbsp;\n              {raceLevelFilterType.toLowerCase()}\n              &nbsp;ballot items to decide on.\n              <br />\n              <br />\n              Click on &quot;\n              {window.innerWidth > 575 ? 'Items Decided' : 'Decided'}\n              &quot; to see the&nbsp;\n              {raceLevel}\n              &nbsp;ballot items you&apos;ve decided on.\n            </h3>\n          </div>\n        );\n      default:\n        return null;\n    }\n  };\n\n  onBallotSearch = (filteredItems) => {\n    this.setState({ ballotSearchResults: filteredItems });\n  };\n\n  handleToggleSearchBallot = () => {\n    const { isSearching } = this.state;\n    this.setState({ isSearching: !isSearching });\n  };\n\n  startTimerToRetrieveVoter = () => {\n    let { numberOfVoterRetrieveAttempts } = this.state;\n    // console.log('startTimerToRetrieveVoter, numberOfVoterRetrieveAttempts:', numberOfVoterRetrieveAttempts);\n    clearTimeout(this.timer);\n    this.timer = setTimeout(() => {\n      VoterActions.voterRetrieve();\n      numberOfVoterRetrieveAttempts += 1;\n      this.setState({\n        numberOfVoterRetrieveAttempts,\n      });\n    }, delayBeforeVoterRefreshCall);\n  }\n\n  toggleSelectBallotModal (destinationUrlForHistoryPush = '') {\n    const { showSelectBallotModal } = this.state;\n    // console.log('Ballot toggleSelectBallotModal, destinationUrlForHistoryPush:', destinationUrlForHistoryPush, ', showSelectBallotModal:', showSelectBallotModal);\n    if (showSelectBallotModal && destinationUrlForHistoryPush && destinationUrlForHistoryPush !== '') {\n      historyPush(destinationUrlForHistoryPush);\n    } else {\n      // console.log('Ballot toggleSelectBallotModal, BallotActions.voterBallotListRetrieve()');\n      BallotActions.voterBallotListRetrieve(); // Retrieve a list of ballots for the voter from other elections\n    }\n\n    AppActions.setShowSelectBallotModal(!showSelectBallotModal);\n  }\n\n  // Needed to scroll to anchor tags based on hash in url (as done for bookmarks)\n  hashLinkScroll () {\n    const { hash } = window.location;\n    if (hash !== '') {\n      // Push onto callback queue so it runs after the DOM is updated,\n      // this is required when navigating from a different page so that\n      // the element is rendered on the page before trying to getElementById.\n      setTimeout(() => {\n        const id = hash.replace('#', '');\n        const element = document.getElementById(id);\n\n        if (element) {\n          const positionY = element.offsetTop;\n          if (isMobile()) {\n            window.scrollTo(0, positionY + 250);\n          } else {\n            window.scrollTo(0, positionY + 196);\n          }\n        }\n      }, 0);\n    }\n  }\n\n  toggleExpandBallotItemDetails (selectedBallotItemId) {\n    if (this.ballotItems[selectedBallotItemId] &&\n        this.ballotItems[selectedBallotItemId].ballotItem &&\n        this.ballotItems[selectedBallotItemId].ballotItem.toggleExpandDetails) {\n      this.ballotItems[selectedBallotItemId].ballotItem.toggleExpandDetails(true);\n    }\n  }\n\n  ballotItemLinkHasBeenClicked (selectedBallotItemId) {\n    const { ballotWithItemsFromCompletionFilterType, ballotWithAllItems } = this.state;\n    const ballotItem = ballotWithItemsFromCompletionFilterType.find(item => item.we_vote_id === selectedBallotItemId);\n    // If the ballot item exists in the array of ballot items filtered by the completion filter type\n    if (ballotItem) {\n      const raceCategoryDisplayText = mapCategoryFilterType(ballotItem.race_office_level || ballotItem.kind_of_ballot_item);\n      // console.log('ballotItemLinkHasBeenClicked raceLevelFilterType ballotItem=True:', raceCategoryDisplayText);\n      if (raceCategoryDisplayText) {\n        this.setState({\n          raceLevelFilterType: raceCategoryDisplayText,\n        }, () => this.toggleExpandBallotItemDetails(selectedBallotItemId));\n      }\n    } else {\n      // The ballot item was not found in the array of ballot items filtered by completion filter type\n      const ballotItemFromAll = ballotWithAllItems.find(item => item.we_vote_id === selectedBallotItemId);\n      const raceCategoryDisplayText = mapCategoryFilterType(ballotItemFromAll.race_office_level || ballotItemFromAll.kind_of_ballot_item);\n      // console.log('ballotItemLinkHasBeenClicked raceLevelFilterType ballotItem=False:', raceCategoryDisplayText);\n      BallotActions.completionLevelFilterTypeSave('filterAllBallotItems');\n      BallotActions.raceLevelFilterTypeSave(raceCategoryDisplayText);\n      if (raceCategoryDisplayText) {\n        this.setState({\n          raceLevelFilterType: raceCategoryDisplayText,\n        }, () => this.toggleExpandBallotItemDetails(selectedBallotItemId));\n      }\n    }\n  }\n\n  // componentDidCatch (error, info) {\n  //   // We should get this information to Splunk!\n  //   console.error('Ballot caught error: ', `${error} with info: `, info);\n  // }\n\n  updateOfficeDisplayUnfurledTracker (weVoteId, status) {\n    const { ballotItemUnfurledTracker } = this.state;\n    const newBallotItemUnfurledTracker = { ...ballotItemUnfurledTracker, [weVoteId]: status };\n    BallotActions.voterBallotItemOpenOrClosedSave(newBallotItemUnfurledTracker);\n    this.setState({\n      ballotItemUnfurledTracker: newBallotItemUnfurledTracker,\n    });\n  }\n\n  render () {\n    renderLog('Ballot');  // Set LOG_RENDER_EVENTS to log all renders\n    const ballotBaseUrl = '/ballot';\n    const { classes } = this.props;\n    const {\n      ballotWithItemsFromCompletionFilterType, showFilterTabs, doubleFilteredBallotItemsLength, completionLevelFilterType,\n      ballotHeaderUnpinned, isSearching, ballotWithAllItems, ballotSearchResults, raceLevelFilterItemsInThisBallot,\n    } = this.state;\n    let { raceLevelFilterType } = this.state;\n    if (!raceLevelFilterType) {\n      raceLevelFilterType = ''; // Make sure this is a string\n    }\n    // console.log(ballotWithAllItems);\n    const textForMapSearch = VoterStore.getTextForMapSearch();\n\n    if (!ballotWithItemsFromCompletionFilterType) {\n      return (\n        <div className=\"ballot container-fluid well u-stack--md u-inset--md\">\n          <div className=\"ballot__header\" style={{ marginTop: `${isCordova() ? '100px' : 'undefined'}` }}>\n            <div style={{ textAlign: 'center' }}>\n              If your ballot does not appear momentarily,\n              {' '}\n              {/* eslint-disable-next-line jsx-a11y/anchor-is-valid */}\n              <Link\n                // since we use a button as the component, we can disable that es-lint rule\n                component=\"button\"\n                id=\"ballotIfBallotDoesNotAppear\"\n                onClick={this.toggleSelectBallotModal}\n                style={{ color: 'rgb(6, 95, 212)' }}\n              >\n                please click here to change your address.\n              </Link>\n            </div>\n          </div>\n        </div>\n      );\n    }\n\n    const voterAddressMissing = this.state.location === null;\n\n    // const ballot_caveat = BallotStore.ballotProperties.ballot_caveat; // ballotProperties might be undefined\n    const electionName = BallotStore.currentBallotElectionName || '';\n    const electionDayText = BallotStore.currentBallotElectionDate;\n    const sourcePollingLocationWeVoteId = BallotStore.currentBallotPollingLocationSource;\n    const ballotReturnedAdminEditUrl = `${webAppConfig.WE_VOTE_SERVER_ROOT_URL}b/${sourcePollingLocationWeVoteId}/list_edit_by_polling_location/?google_civic_election_id=${VoterStore.electionId()}&state_code=`;\n    // console.log('electionName: ', electionName, ', electionDayText: ', electionDayText);\n\n    const emptyBallotButton = completionLevelFilterType !== 'none' && !voterAddressMissing ? (\n      <span>\n        {/* <Link to={ballotBaseUrl}>\n          <Button variant=\"primary\">View Full Ballot</Button>\n        </Link> */}\n      </span>\n    ) : (\n      <div className=\"container-fluid well u-stack--md u-inset--md\">\n        <Helmet title=\"Enter Your Address - We Vote\" />\n        <h3 className=\"h3\">\n          Enter address where you are registered to vote\n        </h3>\n        <div>\n          <AddressBox {...this.props} saveUrl={ballotBaseUrl} />\n        </div>\n      </div>\n    );\n\n    // console.log('ballotWithItemsFromCompletionFilterType.length: ', ballotWithItemsFromCompletionFilterType.length);\n    // Was: ballotWithItemsFromCompletionFilterType\n    const emptyBallot = ballotWithAllItems.length === 0 ? (\n      <div>\n        <h3 className=\"text-center\">{this.getEmptyMessageByFilterType(completionLevelFilterType)}</h3>\n        {emptyBallotButton}\n        <div className=\"container-fluid well u-stack--md u-inset--md\">\n          <BallotElectionListWithFilters\n            ballotBaseUrl={ballotBaseUrl}\n            ballotElectionList={this.state.voterBallotList}\n          />\n        </div>\n      </div>\n    ) : null;\n\n    const electionDayTextFormatted = electionDayText ? moment(electionDayText).format('MMM Do, YYYY') : '';\n    // console.log('electionName: ', electionName, ', electionDayTextFormatted: ', electionDayTextFormatted);\n\n    const inRemainingDecisionsMode = completionLevelFilterType === 'filterRemaining';\n\n    if (ballotWithItemsFromCompletionFilterType.length === 0 && inRemainingDecisionsMode) {\n      historyPush(this.state.pathname);\n    }\n\n    const showBallotDecisionTabs = (BallotStore.ballotLength !== BallotStore.ballotRemainingChoicesLength) &&\n      (BallotStore.ballotRemainingChoicesLength > 0);\n\n    return (\n      <div className=\"ballot_root\">\n        <div className={`ballot__heading ${ballotHeaderUnpinned && isWebApp() ? 'ballot__heading__unpinned' : ''}`}>\n          <div className=\"page-content-container\" style={{ marginTop: `${cordovaBallotFilterTopMargin()}` }}>\n            <div className=\"container-fluid\">\n              <div className=\"row\">\n                <div className=\"col-md-12\">\n                  <Helmet title=\"Ballot - We Vote\" />\n                  <header className=\"ballot__header__group\">\n                    <BallotTitleHeader electionName={electionName} electionDayTextFormatted={electionDayTextFormatted} />\n                  </header>\n\n                  { textForMapSearch || ballotWithItemsFromCompletionFilterType.length > 0 ? (\n                    <div className=\"ballot__filter__container\">\n                      { showBallotDecisionTabs ? (\n                        <React.Fragment>\n                          <div className=\"ballot__filter d-print-none\">\n                            <BallotDecisionsTabs\n                              completionLevelFilterType={BallotStore.cleanCompletionLevelFilterType(completionLevelFilterType)}\n                              ballotLength={BallotStore.ballotLength}\n                              ballotLengthRemaining={BallotStore.ballotRemainingChoicesLength}\n                            />\n                          </div>\n                          <hr className=\"ballot-header-divider\" />\n                        </React.Fragment>\n                      ) : undefined}\n                      <BallotFilterRow showFilterTabs={showFilterTabs}>\n                        <div className=\"ballot__item-filter-tabs\" ref={(chips) => { this.chipContainer = chips; }}>\n                          { ballotWithItemsFromCompletionFilterType.length ? (\n                            <React.Fragment>\n                              <BallotSearch\n                                isSearching={isSearching}\n                                onToggleSearch={this.handleToggleSearchBallot}\n                                items={ballotWithAllItems}\n                                onBallotSearch={this.onBallotSearch}\n                                alwaysOpen={!showFilterTabs}\n                              />\n                              { showFilterTabs ? (\n                                BALLOT_ITEM_FILTER_TYPES.map((oneTypeOfBallotItem) => {\n                                  const allBallotItemsByFilterType = this.state.ballotWithAllItems.filter((item) => {\n                                    if (oneTypeOfBallotItem === 'Measure') {\n                                      return item.kind_of_ballot_item === 'MEASURE';\n                                    } else {\n                                      return oneTypeOfBallotItem === item.race_office_level;\n                                    }\n                                  });\n                                  if (allBallotItemsByFilterType.length) {\n                                    const ballotItemsByFilterType = ballotWithItemsFromCompletionFilterType.filter((item) => {\n                                      if (oneTypeOfBallotItem === 'Measure') {\n                                        return item.kind_of_ballot_item === 'MEASURE';\n                                      } else {\n                                        return oneTypeOfBallotItem === item.race_office_level;\n                                      }\n                                    });\n                                    return (\n                                      <div className=\"ballot_filter_btns\" key={oneTypeOfBallotItem}>\n                                        <Badge\n                                          badgeContent={ballotItemsByFilterType.length}\n                                          classes={{ badge: classes.badge, colorPrimary: classes.badgeColorPrimary }}\n                                          color={(oneTypeOfBallotItem === raceLevelFilterType && !isSearching) ? 'primary' : 'default'}\n                                          id={`ballotBadge-${oneTypeOfBallotItem}`}\n                                          invisible={ballotItemsByFilterType.length === 0}\n                                          onClick={() => this.setBallotItemFilterType(oneTypeOfBallotItem, ballotItemsByFilterType.length)}\n                                        >\n                                          <Chip variant=\"outlined\"\n                                            color={(oneTypeOfBallotItem === raceLevelFilterType && !isSearching) ? 'primary' : 'default'}\n                                            onClick={() => this.setBallotItemFilterType(oneTypeOfBallotItem, ballotItemsByFilterType.length)}\n                                            className=\"btn_ballot_filter\"\n                                            classes={{ root: classes.chipRoot, label: classes.chipLabel, outlinedPrimary: (oneTypeOfBallotItem === raceLevelFilterType && !isSearching) ? classes.chipOutlined : null }}\n                                            label={oneTypeOfBallotItem}\n                                          />\n                                        </Badge>\n                                      </div>\n                                    );\n                                  } else {\n                                    return null;\n                                  }\n                                })\n                              ) :\n                                null\n                            }\n                            </React.Fragment>\n                          ) : null\n                          }\n                        </div>\n                      </BallotFilterRow>\n                    </div>\n                  ) : null\n                  }\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"page-content-container\">\n          <div className=\"container-fluid\">\n            <Wrapper padTop={cordovaScrollablePaneTopPadding()}>\n              {emptyBallot}\n              {/* eslint-disable-next-line no-nested-ternary */}\n              <div className={showBallotDecisionTabs ? 'row ballot__body' : isWebApp() ? 'row ballot__body__no-decision-tabs' : undefined}>\n                <BrowserPushMessage incomingProps={this.props} />\n                {ballotWithItemsFromCompletionFilterType.length > 0 ? (\n                  <BallotStatusMessage\n                    ballotLocationChosen\n                    googleCivicElectionId={this.state.googleCivicElectionId}\n                  />\n                ) : null\n                }\n                <div className=\"col-sm-12 col-lg-9\">\n                  <LocationGuess\n                    toggleSelectBallotModal={this.toggleSelectBallotModal}\n                  />\n                  <div>\n                    {/* The rest of the ballot items */}\n                    <div className={isWebApp() ? 'BallotList' : 'BallotList__cordova'}>\n                      {(isSearching && ballotSearchResults.length ? ballotSearchResults : ballotWithItemsFromCompletionFilterType).map((item) => {\n                        // Ballot limited by items by race_office_level = (Federal, State, Local) or kind_of_ballot_item = (Measure)\n                        if ((raceLevelFilterType === 'All' || (isSearching && ballotSearchResults.length) ||\n                          (item.kind_of_ballot_item === raceLevelFilterType.toUpperCase()) ||\n                          raceLevelFilterType === item.race_office_level)) {\n                          // console.log('Ballot item for BallotItemCompressed:', item);\n                          // {...item}\n                          const key = item.we_vote_id;\n                          return (\n                            <BallotItemCompressed\n                              key={key}\n                              isMeasure={item.kind_of_ballot_item === TYPES.MEASURE}\n                              ballotItemDisplayName={item.ballot_item_display_name}\n                              candidateList={item.candidate_list}\n                              weVoteId={item.we_vote_id}\n                            />\n                          );\n                        } else {\n                          return null;\n                        }\n                      })\n                      }\n                      {doubleFilteredBallotItemsLength === 0 &&\n                        this.showUserEmptyOptions()\n                      }\n                      <BallotSummaryFooter\n                        activeRaceItem={raceLevelFilterType}\n                        displayTitle\n                        displaySubtitles\n                        rawUrlVariablesString={this.props.location.search}\n                        ballotWithAllItemsByFilterType={this.state.ballotWithItemsFromCompletionFilterType}\n                        ballotItemLinkHasBeenClicked={this.ballotItemLinkHasBeenClicked}\n                        raceLevelFilterItemsInThisBallot={raceLevelFilterItemsInThisBallot}\n                        setActiveRaceItem={type => this.setRaceLevelFilterType(type)}\n                      />\n                    </div>\n                  </div>\n                  {/* Show links to this candidate in the admin tools */}\n                  { (this.state.voter && sourcePollingLocationWeVoteId) && (this.state.voter.is_admin || this.state.voter.is_verified_volunteer) ? (\n                    <span className=\"u-wrap-links d-print-none\">\n                      <span>Admin:</span>\n                      <OpenExternalWebSite\n                      url={ballotReturnedAdminEditUrl}\n                      target=\"_blank\"\n                      body={(\n                        <span>\n                          Ballot copied from polling location &quot;\n                          {sourcePollingLocationWeVoteId}\n                          &quot;\n                        </span>\n                      )}\n                      />\n                    </span>\n                  ) : null\n                }\n                </div>\n\n                { ballotWithItemsFromCompletionFilterType.length === 0 || isCordova() ?\n                  null : (\n                    <div className=\"col-lg-3 d-none d-lg-block sidebar-menu\">\n                      <BallotSideBar\n                        activeRaceItem={raceLevelFilterType}\n                        displayTitle\n                        displaySubtitles\n                        rawUrlVariablesString={this.props.location.search}\n                        ballotWithAllItemsByFilterType={this.state.ballotWithItemsFromCompletionFilterType}\n                        ballotItemLinkHasBeenClicked={this.ballotItemLinkHasBeenClicked}\n                        raceLevelFilterItemsInThisBallot={raceLevelFilterItemsInThisBallot}\n                      />\n                    </div>\n                  )\n                }\n              </div>\n            </Wrapper>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst Wrapper = styled.div`\n  padding-top: ${({ padTop }) => padTop};\n`;\n\n// If we want to turn off filter tabs navigation bar:  ${({ showFilterTabs }) => !showFilterTabs && 'height: 0;'}\nconst BallotFilterRow = styled.div`\n  display: flex;\n`;\n\nconst styles = theme => ({\n  badge: {\n    top: 13,\n    minWidth: 16,\n    width: 20,\n    right: 14,\n    background: 'rgba(46, 60, 93, 0.08)',\n    color: '#333',\n    cursor: 'pointer',\n    [theme.breakpoints.down('md')]: {\n      fontSize: 9,\n      width: 16,\n      height: 16,\n      top: 11,\n      right: 11,\n    },\n  },\n  badgeColorPrimary: {\n    background: 'white',\n    color: theme.palette.primary.main,\n    '@media print': {\n      color: theme.palette.primary.main,\n    },\n  },\n  unselectedBadgeColorPrimary: {\n    background: 'rgba(0, 0, 0, .2)',\n    color: '#333',\n  },\n  chipRoot: {\n    height: 26,\n    [theme.breakpoints.down('md')]: {\n      height: 22.5,\n    },\n  },\n  chipOutlined: {\n    background: theme.palette.primary.main,\n    color: 'white',\n    '&:hover': {\n      background: `${theme.palette.primary.light} !important`,\n    },\n    '&:active': {\n      background: theme.palette.primary.main,\n    },\n    '&:focus': {\n      background: `${theme.palette.primary.main} !important`,\n    },\n  },\n  chipLabel: {\n    fontSize: 13,\n    paddingLeft: 0,\n    [theme.breakpoints.up('md')]: {\n      fontSize: 14,\n    },\n  },\n  iconRoot: {\n    position: 'absolute',\n    left: 3,\n    top: 1,\n    color: theme.palette.primary.main,\n    cursor: 'pointer',\n    [theme.breakpoints.down('md')]: {\n      fontSize: 16,\n      top: 3,\n    },\n  },\n});\n\nexport default withStyles(styles)(Ballot);\n"]}*/