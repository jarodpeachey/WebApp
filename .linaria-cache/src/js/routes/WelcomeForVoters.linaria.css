.h1keewq0{position:relative;height:590px;width:110%;color:white;background-image:linear-gradient(to bottom,#415a99,#2d3b5e);border-bottom-left-radius:50% 25%;border-bottom-right-radius:50% 25%;padding:0 2em;margin-top:-72px;}@media (max-width:var(--h1keewq0-0)){.h1keewq0{height:450px;}}@media (max-width:var(--h1keewq0-1)){.h1keewq0{height:350px;}}
.w1q7gitb{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-flow:column nowrap;-ms-flex-flow:column nowrap;flex-flow:column nowrap;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;background:white;overflow-x:hidden;padding-top:var(--w1q7gitb-0);}
/*# sourceMappingURL=data:application/json;base64,*/