.r3gk8rk{margin-left:-16px;margin-right:-16px;width:var(--r3gk8rk-0);}
/*# sourceMappingURL=data:application/json;base64,*/