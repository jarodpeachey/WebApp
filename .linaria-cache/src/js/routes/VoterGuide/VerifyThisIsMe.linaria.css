.b1bwii14{text-align:left;margin:20px 0;}
.f8twiqt{-webkit-text-decoration:underline;text-decoration:underline;}
/*# sourceMappingURL=data:application/json;base64,{"version":3,"sources":["D:\\Jarod\\WeVote\\WebApp\\src\\js\\routes\\VoterGuide\\VerifyThisIsMe.jsx"],"names":[".b1bwii14",".f8twiqt"],"mappings":"AAiVMA;AAKAC","file":"D:\\Jarod\\WeVote\\WebApp\\src\\js\\routes\\VoterGuide\\VerifyThisIsMe.jsx","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Alert } from 'react-bootstrap';\nimport Helmet from 'react-helmet';\nimport { styled } from 'linaria/react';\nimport { withStyles } from '@material-ui/core';\nimport Button from '@material-ui/core/Button';\nimport AppActions from '../../actions/AppActions';\nimport CandidateItem from '../../components/Ballot/CandidateItem';\nimport CandidateStore from '../../stores/CandidateStore';\nimport { historyPush } from '../../utils/cordovaUtils';\nimport FollowToggle from '../../components/Widgets/FollowToggle';\nimport LoadingWheel from '../../components/LoadingWheel';\nimport OrganizationCard from '../../components/VoterGuide/OrganizationCard';\nimport OrganizationStore from '../../stores/OrganizationStore';\nimport { renderLog } from '../../utils/logging';\nimport TwitterAccountCard from '../../components/Twitter/TwitterAccountCard';\nimport TwitterActions from '../../actions/TwitterActions';\nimport TwitterSignIn from '../../components/Twitter/TwitterSignIn';\nimport TwitterStore from '../../stores/TwitterStore';\nimport VoterSessionActions from '../../actions/VoterSessionActions';\nimport VoterStore from '../../stores/VoterStore';\n\nclass VerifyThisIsMe extends Component {\n  static propTypes = {\n    params: PropTypes.object,\n    twitter_handle: PropTypes.string,\n  };\n\n  constructor (props) {\n    super(props);\n    this.state = {\n      candidate: {},\n      kindOfOwner: '',\n      organization: {},\n      ownerWeVoteId: '',\n      twitterHandle: '',\n      twitterDescription: '',\n      twitterFollowersCount: 0,\n      twitterName: '',\n      twitterPhotoUrl: '',\n      twitterUserWebsite: '',\n      status: '',\n      voter: {},\n    };\n  }\n\n  componentDidMount () {\n    // console.log(\"VerifyThisIsMe, Entering componentDidMount\");\n    AppActions.storeSignInStartFullUrl(); // Store cookie so we return to this page after sign in\n    this.onVoterStoreChange();\n    // console.log(`VerifyThisIsMe, componentDidMount: ${this.props.params.twitter_handle}`);\n    TwitterActions.twitterIdentityRetrieve(this.props.params.twitter_handle);\n\n    this.organizationStoreListener = OrganizationStore.addListener(this.onOrganizationStoreChange.bind(this));\n    this.voterStoreListener = VoterStore.addListener(this.onVoterStoreChange.bind(this));\n\n    this.candidateStoreListener = CandidateStore.addListener(this.onCandidateStoreChange.bind(this));\n\n    this.twitterStoreListener = TwitterStore.addListener(this.onTwitterStoreChange.bind(this));\n  }\n\n  componentWillUnmount () {\n    this.candidateStoreListener.remove();\n    this.organizationStoreListener.remove();\n    this.voterStoreListener.remove();\n    this.twitterStoreListener.remove();\n  }\n\n  onVoterStoreChange () {\n    // console.log(\"Entering onVoterStoreChange\");\n    this.setState({ voter: VoterStore.getVoter() });\n  }\n\n  onOrganizationStoreChange () {\n    const { owner_we_vote_id: ownerWeVoteId } = TwitterStore.get();\n    // console.log(`Entering onOrganizationStoreChange, ownerWeVoteId: ${ownerWeVoteId}`);\n    this.setState({\n      organization: OrganizationStore.getOrganizationByWeVoteId(ownerWeVoteId),\n    });\n  }\n\n  onCandidateStoreChange () {\n    const { owner_we_vote_id: ownerWeVoteId } = TwitterStore.get();\n    this.setState({\n      candidate: CandidateStore.getCandidate(ownerWeVoteId),\n    });\n  }\n\n  onTwitterStoreChange () {\n    const {\n      kind_of_owner: kindOfOwner, owner_we_vote_id: ownerWeVoteId, twitter_handle: twitterHandle,\n      twitter_description: twitterDescription, twitter_followers_count: twitterFollowersCount,\n      twitter_name: twitterName, twitter_photo_url: twitterPhotoUrl, twitter_user_website: twitterUserWebsite,\n      status,\n    } = TwitterStore.get();\n\n    // console.log(`Entering onTwitterStoreChange, twitterHandle: ${twitterHandle}`);\n    // Only clear if there is a value in twitterHandle\n    if (twitterHandle) {\n      this.setState({\n        kindOfOwner,\n        ownerWeVoteId,\n        twitterHandle,\n        twitterDescription,\n        twitterFollowersCount,\n        twitterName,\n        twitterPhotoUrl,\n        twitterUserWebsite,\n        status,\n      });\n    }\n  }\n\n  goToVoterGuideDisplay = () => {\n    let voterGuideDisplay = '/ballot';\n    if (this.state.twitterHandle) {\n      voterGuideDisplay = `/${this.state.twitterHandle}`;\n    }\n    historyPush(voterGuideDisplay);\n  }\n\n  voterSignOut = () => {\n    VoterSessionActions.voterSignOut();\n    TwitterActions.twitterIdentityRetrieve(this.props.params.twitter_handle);\n  }\n\n  render () {\n    renderLog('VerifyThisIsMe');  // Set LOG_RENDER_EVENTS to log all renders\n\n    // Manage the control over this organization voter guide\n    const { candidate, organization, twitterHandle, voter } = this.state;\n    const signedInTwitter = voter === undefined ? false : voter.signed_in_twitter;\n    let signedInWithThisTwitterAccount = false;\n    if (signedInTwitter) {\n      // console.log(\"VerifyThisIsMe render, signedInTwitter: \", signedInTwitter);\n      // console.log(`VerifyThisIsMe twitterHandle: ${twitterHandle}`);\n      signedInWithThisTwitterAccount = voter.twitter_screen_name.toLowerCase() === twitterHandle.toLowerCase();\n      if (signedInWithThisTwitterAccount) {\n        // If we are being asked to verify the account we are already signed into, return to the TwitterHandle page\n        // console.log(\"VerifyThisIsMe signedInWithThisTwitterAccount is True\");\n        historyPush(`/${voter.twitter_screen_name}`);\n        return LoadingWheel;\n      }\n    }\n\n    if (this.state.status === undefined) {\n      // Show a loading wheel while this component's data is loading\n      return LoadingWheel;\n    } else if (this.state.kindOfOwner === 'POLITICIAN') {\n      // console.log(\"VerifyThisIsMe this.state.kindOfOwner === POLITICIAN\");\n      this.props.params.we_vote_id = this.state.ownerWeVoteId;\n      return (\n        <span>\n          <Helmet title=\"Claim This Page - We Vote\" />\n          <div className=\"card\">\n            <div className=\"card-main\">\n              <div>\n                <br />\n                <h1 className=\"h1\">\n                  Please verify that you have the right to manage statements by this politician\n                  by signing into this Twitter account:\n                </h1>\n                <h2 className=\"h2\">\n                  @\n                  {twitterHandle}\n                </h2>\n                <br />\n              </div>\n              { signedInTwitter ? (\n                <div>\n                  Sign out from the Twitter account @\n                  {voter.twitter_screen_name}\n                  , and then Sign in with\n                  {' '}\n                  @\n                  {twitterHandle}\n                </div>\n              ) : (\n                <TwitterSignIn\n                  buttonText={`Sign in to @${twitterHandle}`}\n                  id=\"signInToVerifyAccess\"\n                />\n              )}\n            </div>\n          </div>\n          <section className=\"card\">\n            <CandidateItem\n              candidateWeVoteId={candidate.we_vote_id}\n              showLargeImage\n              showOfficeName\n            />\n          </section>\n        </span>\n      );\n    } else if (this.state.kindOfOwner === 'ORGANIZATION') {\n      // console.log(\"VerifyThisIsMe this.state.kindOfOwner === ORGANIZATION\");\n      // console.log(`VerifyThisIsMe this.state.ownerWeVoteId: ${this.state.ownerWeVoteId}`);\n      this.props.params.we_vote_id = this.state.ownerWeVoteId;\n\n      if (!organization) {\n        return <div>{LoadingWheel}</div>;\n      }\n\n      return (\n        <span>\n          <Helmet title={`Claim @${twitterHandle} - We Vote`} />\n          <div className=\"card\">\n            <div className=\"card-main\">\n              { signedInTwitter ? (\n                <div>\n                  <Alert variant=\"danger\">\n                    You are signed into We Vote with @\n                    {voter.twitter_screen_name}\n                    .\n                    To claim\n                    {' '}\n                    @\n                    {twitterHandle}\n                    ,\n                    {' '}\n                    <FakeLink onClick={this.voterSignOut}>\n                      sign out\n                    </FakeLink>\n                    {' '}\n                    of We Vote, and then sign in again with your\n                    {' '}\n                    @\n                    {twitterHandle}\n                    {' '}\n                    Twitter account.\n                  </Alert>\n                </div>\n              ) : (\n                <div>\n                  <Alert variant=\"danger\">\n                    Verify that you represent @\n                    {twitterHandle}\n                    {' '}\n                    by clicking this Twitter sign in button.\n                  </Alert>\n                  <TwitterSignIn\n                    buttonText={`Sign into @${twitterHandle}`}\n                    id=\"signInToVerifyAccess\"\n                  />\n                </div>\n              )}\n              <BackToVoterGuideWrapper>\n                <Button\n                  color=\"primary\"\n                  id=\"voterGuideSettingsPositionsSeeFullBallot\"\n                  onClick={this.goToVoterGuideDisplay}\n                  variant=\"contained\"\n                >\n                  &lt;&nbsp;&nbsp;Back to\n                  {' '}\n                  @\n                  {twitterHandle}\n                </Button>\n              </BackToVoterGuideWrapper>\n            </div>\n          </div>\n          {this.props.params.we_vote_id && (\n            <div className=\"card\">\n              <div className=\"card-main\">\n                <OrganizationCard organization={organization} />\n                <FollowToggle organizationWeVoteId={this.props.params.we_vote_id} />\n              </div>\n            </div>\n          )}\n        </span>\n      );\n    } else if (this.state.kindOfOwner === 'TWITTER_HANDLE_NOT_FOUND_IN_WE_VOTE') {\n      // console.log(\"VerifyThisIsMe this.state.kindOfOwner === TWITTER_HANDLE_NOT_FOUND_IN_WE_VOTE\");\n      return (\n        <div>\n          <Helmet title={`Claim @${twitterHandle} - We Vote`} />\n          <TwitterAccountCard {...this.state} />\n          <div>\n            <br />\n            <h1 className=\"h1\">Please verify that this is you by signing into this Twitter account:</h1>\n            <h2 className=\"h2\">\n              @\n              {twitterHandle}\n            </h2>\n            <br />\n          </div>\n          { signedInTwitter ? (\n            <div>\n              You are signed into We Vote with @\n              {voter.twitter_screen_name}\n              .\n              To claim\n              {' '}\n              @\n              {twitterHandle}\n              , sign out of We Vote, and then sign in again with your\n              {' '}\n              @\n              {twitterHandle}\n              {' '}\n              Twitter account.\n            </div>\n          ) : (\n            <TwitterSignIn\n              buttonText={`Sign in to @${twitterHandle}`}\n              id=\"signInToVerifyAccess\"\n            />\n          )}\n        </div>\n      );\n    } else {\n      return (\n        <div className=\"container-fluid well u-stack--md u-inset--md\">\n          <Helmet title={`Claim @${twitterHandle} - We Vote`} />\n          <h3 className=\"h3\">Could Not Confirm</h3>\n          <div className=\"small\">\n            We were not able to find an account for this Twitter Handle\n            { twitterHandle ? (\n              <span>\n                {' '}\n                &quot;\n                {twitterHandle}\n                &quot;\n              </span>\n            ) :\n              <span />\n            }\n            .\n          </div>\n          <br />\n        </div>\n      );\n    }\n  }\n}\n\nconst BackToVoterGuideWrapper = styled.div`\n  text-align: left;\n  margin: 20px 0;\n`;\n\nconst FakeLink = styled.span`\n  text-decoration: underline;\n`;\n\nconst styles = () => ({\n  ballotIconRoot: {\n    width: 150,\n    height: 150,\n    color: 'rgb(171, 177, 191)',\n  },\n});\n\nexport default withStyles(styles)(VerifyThisIsMe);\n"]}*/