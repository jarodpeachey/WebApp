.w1x7r6wg{padding-top:var(--w1x7r6wg-0);}

/*# sourceMappingURL=data:application/json;base64,{"version":3,"sources":["D:\\Jarod\\WeVote\\WebApp\\src\\js\\routes\\Settings\\VoterGuideSettingsDashboard.jsx"],"names":[".w1x7r6wg",".efgfu4r"],"mappings":"AAgPMA;AAIAC","file":"D:\\Jarod\\WeVote\\WebApp\\src\\js\\routes\\Settings\\VoterGuideSettingsDashboard.jsx","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { styled } from 'linaria/react';\nimport { withStyles } from '@material-ui/core';\nimport { renderLog } from '../../utils/logging';\nimport AppStore from '../../stores/AppStore';\nimport BallotActions from '../../actions/BallotActions';\nimport BallotStore from '../../stores/BallotStore';\nimport OrganizationActions from '../../actions/OrganizationActions';\nimport OrganizationStore from '../../stores/OrganizationStore';\nimport VoterGuideActions from '../../actions/VoterGuideActions';\nimport VoterGuideSettingsAddPositions from '../../components/Settings/VoterGuideSettingsAddPositions';\nimport VoterGuideStore from '../../stores/VoterGuideStore';\nimport VoterStore from '../../stores/VoterStore';\nimport { isProperlyFormattedVoterGuideWeVoteId } from '../../utils/textFormat';\n// import VoterGuideSettingsPositions from '../../components/Settings/VoterGuideSettingsPositions';\n// import { cordovaScrollablePaneTopPadding } from '../../utils/cordovaOffsets';\n\nclass VoterGuideSettingsDashboard extends Component {\n  static propTypes = {\n    params: PropTypes.object,\n  };\n\n  constructor (props) {\n    super(props);\n    this.state = {\n      getVoterGuideSettingsDashboardEditMode: '',\n      linkedOrganizationWeVoteId: '',\n      localGoogleCivicElectionId: 0,\n      localElectionHasBeenRetrieved: {},\n      localPositionListHasBeenRetrieved: {},\n      voterGuide: {},\n      voterGuideWeVoteId: '',\n    };\n  }\n\n  componentDidMount () {\n    // console.log('VoterGuideSettingsDashboard componentDidMount');\n    // if (this.props.params.edit_mode) {  // We are going to ignore the incoming edit_mode\n    this.onAppStoreChange();\n    // Get Voter Guide information\n    // console.log('this.props.params.voter_guide_we_vote_id:', this.props.params.voter_guide_we_vote_id);\n    // let voterGuideFound = false;\n    if (this.props.params.voter_guide_we_vote_id && isProperlyFormattedVoterGuideWeVoteId(this.props.params.voter_guide_we_vote_id)) {\n      this.setState({\n        voterGuideWeVoteId: this.props.params.voter_guide_we_vote_id,\n      });\n      const voterGuide = VoterGuideStore.getVoterGuideByVoterGuideId(this.props.params.voter_guide_we_vote_id);\n      if (voterGuide && voterGuide.we_vote_id) {\n        this.setState({\n          localGoogleCivicElectionId: voterGuide.google_civic_election_id,\n          voterGuide,\n        });\n        // voterGuideFound = true;\n        const currentElectionMatchesBallotLoaded = voterGuide.google_civic_election_id && BallotStore.currentBallotGoogleCivicElectionId && voterGuide.google_civic_election_id === BallotStore.currentBallotGoogleCivicElectionId;\n        // console.log('BallotStore.currentBallotGoogleCivicElectionId:', BallotStore.currentBallotGoogleCivicElectionId);\n        if (!currentElectionMatchesBallotLoaded) {\n          // console.log('VoterGuideSettingsDashboard componentDidMount retrieving ballot for: ', voterGuide.google_civic_election_id);\n          BallotActions.voterBallotItemsRetrieve(voterGuide.google_civic_election_id, '', '');\n        } else {\n          // console.log('VoterGuideSettingsDashboard componentDidMount NOT retrieving ballot for: ', voterGuide.google_civic_election_id);\n        }\n      }\n    }\n    this.onBallotStoreChange();\n    this.onVoterStoreChange();\n    this.onOrganizationStoreChange();\n    this.appStoreListener = AppStore.addListener(this.onAppStoreChange.bind(this));\n    this.ballotStoreListener = BallotStore.addListener(this.onBallotStoreChange.bind(this));\n    this.organizationStoreListener = OrganizationStore.addListener(this.onOrganizationStoreChange.bind(this));\n    this.voterGuideStoreListener = VoterGuideStore.addListener(this.onVoterGuideStoreChange.bind(this));\n    this.voterStoreListener = VoterStore.addListener(this.onVoterStoreChange.bind(this));\n  }\n\n  componentWillReceiveProps (nextProps) {\n    // console.log('VoterGuideSettingsDashboard componentDidMount');\n    this.onAppStoreChange();\n    // console.log('nextProps.params.voter_guide_we_vote_id:', nextProps.params.voter_guide_we_vote_id);\n    if (nextProps.params.voter_guide_we_vote_id && isProperlyFormattedVoterGuideWeVoteId(nextProps.params.voter_guide_we_vote_id)) {\n      const voterGuide = VoterGuideStore.getVoterGuideByVoterGuideId(nextProps.params.voter_guide_we_vote_id);\n      this.setState({\n        localGoogleCivicElectionId: voterGuide.google_civic_election_id,\n        voterGuide,\n        voterGuideWeVoteId: nextProps.params.voter_guide_we_vote_id,\n      });\n    }\n  }\n\n  shouldComponentUpdate (nextProps, nextState) {\n    if (this.state.getVoterGuideSettingsDashboardEditMode !== nextState.getVoterGuideSettingsDashboardEditMode) {\n      // console.log('this.state.getVoterGuideSettingsDashboardEditMode: ', this.state.getVoterGuideSettingsDashboardEditMode, ', nextState.getVoterGuideSettingsDashboardEditMode: ', nextState.getVoterGuideSettingsDashboardEditMode);\n      return true;\n    }\n    if (this.state.linkedOrganizationWeVoteId !== nextState.linkedOrganizationWeVoteId) {\n      // console.log('this.state.linkedOrganizationWeVoteId: ', this.state.linkedOrganizationWeVoteId, ', nextState.linkedOrganizationWeVoteId: ', nextState.linkedOrganizationWeVoteId);\n      return true;\n    }\n    if (this.state.localGoogleCivicElectionId !== nextState.localGoogleCivicElectionId) {\n      // console.log('this.state.localGoogleCivicElectionId: ', this.state.localGoogleCivicElectionId, ', nextState.localGoogleCivicElectionId: ', nextState.localGoogleCivicElectionId);\n      return true;\n    }\n    if (this.state.voterGuideWeVoteId !== nextState.voterGuideWeVoteId) {\n      // console.log('this.state.voterGuideWeVoteId: ', this.state.voterGuideWeVoteId, ', nextState.voterGuideWeVoteId: ', nextState.voterGuideWeVoteId);\n      return true;\n    }\n    return false;\n  }\n\n  componentWillUnmount () {\n    this.appStoreListener.remove();\n    this.ballotStoreListener.remove();\n    this.organizationStoreListener.remove();\n    this.voterGuideStoreListener.remove();\n    this.voterStoreListener.remove();\n  }\n\n  onAppStoreChange () {\n    this.setState({\n      getVoterGuideSettingsDashboardEditMode: AppStore.getVoterGuideSettingsDashboardEditMode(),\n    });\n  }\n\n  onBallotStoreChange () {\n    // const incomingBallotItemList = BallotStore.ballot;\n    // console.log('VoterGuideSettingsAddPositions, onBallotStoreChange incomingBallotItemList:', incomingBallotItemList);\n    this.setState({\n      // ballotItemList: incomingBallotItemList,\n      // filteredBallotItemList: incomingBallotItemList,\n    });\n  }\n\n  onOrganizationStoreChange () {\n    // console.log('onOrganizationStoreChange, linkedOrganizationWeVoteId: ', this.state.linkedOrganizationWeVoteId);\n    const { linkedOrganizationWeVoteId, localPositionListHasBeenRetrieved, voterGuide } = this.state;\n    const organization = OrganizationStore.getOrganizationByWeVoteId(linkedOrganizationWeVoteId);\n    this.setState({\n      // positionListForOneElection: organization.position_list_for_one_election,\n      // filteredPositionListForOneElection: organization.position_list_for_one_election,\n    });\n    // Positions for this organization, for this election\n    // console.log('onOrganizationStoreChange, voterGuide: ', voterGuide, ', organization:', organization);\n    if (voterGuide && voterGuide.google_civic_election_id && organization && organization.organization_we_vote_id) {\n      const doNotRetrievePositionList = localPositionListHasBeenRetrieved[voterGuide.google_civic_election_id] || OrganizationStore.positionListForOpinionMakerHasBeenRetrievedOnce(voterGuide.google_civic_election_id, organization.organization_we_vote_id);\n      if (!doNotRetrievePositionList) {\n        // console.log('CALLING positionListForOpinionMaker, VoterGuideSettingsDashboard');\n        localPositionListHasBeenRetrieved[voterGuide.google_civic_election_id] = true;\n        this.setState({\n          localPositionListHasBeenRetrieved,\n        });\n        OrganizationActions.positionListForOpinionMaker(organization.organization_we_vote_id, false, true, voterGuide.google_civic_election_id);\n        OrganizationActions.positionListForOpinionMaker(organization.organization_we_vote_id, true, false, voterGuide.google_civic_election_id);\n      }\n    }\n  }\n\n  onVoterGuideStoreChange () {\n    const { localElectionHasBeenRetrieved } = this.state;\n    // console.log('VoterGuideSettingsDashboard onVoterGuideStoreChange, this.state.voterGuideWeVoteId', this.state.voterGuideWeVoteId);\n    if (this.state.voterGuideWeVoteId && isProperlyFormattedVoterGuideWeVoteId(this.state.voterGuideWeVoteId)) {\n      const voterGuide = VoterGuideStore.getVoterGuideByVoterGuideId(this.state.voterGuideWeVoteId);\n      if (voterGuide && voterGuide.we_vote_id) {\n        // console.log('VoterGuideSettingsDashboard onVoterGuideStoreChange voterGuide FOUND');\n        this.setState({\n          localGoogleCivicElectionId: voterGuide.google_civic_election_id,\n          voterGuide,\n        });\n        const currentElectionMatchesBallotLoaded = voterGuide.google_civic_election_id && BallotStore.currentBallotGoogleCivicElectionId && voterGuide.google_civic_election_id === BallotStore.currentBallotGoogleCivicElectionId;\n        const doNotRetrieveBallotItems = localElectionHasBeenRetrieved[voterGuide.google_civic_election_id] || currentElectionMatchesBallotLoaded;\n        // console.log('BallotStore.currentBallotGoogleCivicElectionId:', BallotStore.currentBallotGoogleCivicElectionId);\n        if (!doNotRetrieveBallotItems) {\n          // console.log('VoterGuideSettingsDashboard onVoterGuideStoreChange retrieving ballot for: ', voterGuide.google_civic_election_id);\n          BallotActions.voterBallotItemsRetrieve(voterGuide.google_civic_election_id, '', '');\n        } else {\n          // console.log('VoterGuideSettingsDashboard onVoterGuideStoreChange NOT retrieving ballot for: ', voterGuide.google_civic_election_id);\n        }\n      }\n    }\n  }\n\n  onVoterStoreChange () {\n    // Get Voter and Voter's Organization\n    const voter = VoterStore.getVoter();\n    let linkedOrganizationWeVoteId;\n    if (voter && voter.we_vote_id) {\n      linkedOrganizationWeVoteId = voter.linked_organization_we_vote_id;\n      if (linkedOrganizationWeVoteId) {\n        this.setState({\n          linkedOrganizationWeVoteId,\n        });\n        let voterGuideNeeded = true;\n        if (this.state.voterGuide && this.state.voterGuide.we_vote_id) {\n          voterGuideNeeded = false;\n        }\n        if (voterGuideNeeded) {\n          // console.log('VoterGuideSettingsDashboard onVoterStoreChange calling VoterGuideActions.voterGuidesRetrieve');\n          VoterGuideActions.voterGuidesRetrieve(linkedOrganizationWeVoteId);\n        }\n        const organization = OrganizationStore.getOrganizationByWeVoteId(linkedOrganizationWeVoteId);\n        if (organization && organization.organization_we_vote_id) {\n          this.onOrganizationStoreChange();\n        } else {\n          OrganizationActions.organizationRetrieve(linkedOrganizationWeVoteId);\n          // if (voterGuide && voterGuide.google_civic_election_id) {\n          // OrganizationActions.positionListForOpinionMaker(linkedOrganizationWeVoteId, true, false); // , voterGuide.google_civic_election_id\n          // }\n        }\n      }\n    }\n    // console.log('onVoterStoreChange, linkedOrganizationWeVoteId: ', linkedOrganizationWeVoteId);\n  }\n\n  render () {\n    renderLog('VoterGuideSettingsDashboard');  // Set LOG_RENDER_EVENTS to log all renders\n    const { getVoterGuideSettingsDashboardEditMode, voterGuideWeVoteId } = this.state;\n    // console.log('VoterGuideSettingsDashboard, getVoterGuideSettingsDashboardEditMode:', getVoterGuideSettingsDashboardEditMode, ', voterGuideWeVoteId:', voterGuideWeVoteId);\n\n    // const cordovaPaddingTop = cordovaScrollablePaneTopPadding();\n    // const paddingTop = cordovaPaddingTop || '125px';\n    const paddingTop = '10px';\n\n    return (\n      <Wrapper padTop={paddingTop}>\n        <EndorsementListBody>\n          {/* Body of page \"/vg/wvYYvgYY/settings/positions\" */}\n          <VoterGuideSettingsAddPositions\n            addNewPositionsMode={getVoterGuideSettingsDashboardEditMode !== 'positions'}\n            voterGuideWeVoteId={voterGuideWeVoteId}\n          />\n        </EndorsementListBody>\n      </Wrapper>\n    );\n  }\n}\n\nconst styles = () => ({\n  formControl: {\n    width: '100%',\n  },\n});\n\nconst Wrapper = styled.div`\n  padding-top: ${({ padTop }) => padTop};\n`;\n\nconst EndorsementListBody = styled.div`\n`;\n\nexport default withStyles(styles)(VoterGuideSettingsDashboard);\n"]}*/