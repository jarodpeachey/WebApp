.w1k04l18{padding-top:var(--w1k04l18-0);}
/*# sourceMappingURL=data:application/json;base64,{"version":3,"sources":["D:\\Jarod\\WeVote\\WebApp\\src\\js\\routes\\More\\Privacy.jsx"],"names":[".w1k04l18"],"mappings":"AAyJMA","file":"D:\\Jarod\\WeVote\\WebApp\\src\\js\\routes\\More\\Privacy.jsx","sourcesContent":["import React from 'react';\nimport Helmet from 'react-helmet';\nimport { styled } from 'linaria/react';\nimport { cordovaScrollablePaneTopPadding } from '../../utils/cordovaOffsets';\nimport { renderLog } from '../../utils/logging';\nimport OpenExternalWebSite from '../../components/Widgets/OpenExternalWebSite';\n\nexport default class Privacy extends React.Component {\n  static getProps () {\n    return {};\n  }\n\n  render () {\n    renderLog('Privacy');  // Set LOG_RENDER_EVENTS to log all renders\n    return (\n      <Wrapper padTop={cordovaScrollablePaneTopPadding()}>\n        <Helmet title=\"Privacy Policy - We Vote\" />\n        <div className=\"container-fluid well\">\n          <h1 className=\"text-center\">WeVote.US Privacy Policy</h1>\n          <p><strong>Last updated: August 22, 2019</strong></p>\n          <p>\n            <span>We Vote USA has created this privacy policy to explain how We Vote (or “we”) uses information that we collect from you while you visit the We Vote websites, currently located at</span>\n            <span>\n              <OpenExternalWebSite\n                url=\"https://WeVote.US/\"\n                target=\"_blank\"\n                body={<span>WeVote.US</span>}\n              />\n              {' '}\n              (the “Site”), or while you use a portion of We Vote that is embedded on another website (the “Services”).  We Vote may modify this policy from time to time, so we encourage you to check this page when revisiting the Site.  The date of the most recent revision is listed above.\n            </span>\n          </p>\n          <p>\n            You can find additional explanations of our Privacy Policy in our\n            <OpenExternalWebSite\n              url=\"https://help.wevote.us/hc/en-us/sections/115000140987-Security-Technology\"\n              target=\"_blank\"\n              body={<span>Help Center</span>}\n            />\n            .\n          </p>\n          <h2><b>How we use your information</b></h2>\n          <p>\n            <span>\n              When you request your ballot, send messages to friends, donate, join our newsletter, or take any other action on this Site,\n              we may ask you to give us contact information, including your name, address, email address and telephone number.\n              We may also obtain information about you from outside sources and combine it with the information we collect through this Site.\n              We use this information to operate this Site, to sends you news and information about We Vote, to measure the effectiveness of our\n              programs, and to send you timely election reminders.\n              You may opt-out of receiving messages from We Vote by sending any email to\n              {' '}\n              <a href=\"mailto:info@WeVote.US\" target=\"_blank\" rel=\"noopener noreferrer\">info@WeVote.US</a>\n              {' '}\n              and asking that you not receive future email messages.\n              You may also opt-out by following the unsubscribe link at the bottom of each email.\n            </span>\n          </p>\n          <p>\n            <span>Some information on our mailing lists, such as names, email addresses, and addresses, may be exchanged with named partners and other organizations with principles and/or missions that overlap with those of We Vote. Subscribers may opt out of such mailing list exchanges at any time. Our purpose is to protect your information while making sure you have what you need to make an informed decision on Election Day.</span>\n          </p>\n          <h2><b>Donations and credit card information</b></h2>\n          <p>\n            <span>When you contribute to We Vote online, we collect credit card information from you. That information is used solely for processing your contribution; it is not maintained by We Vote; and is never disclosed to anyone, for any other purpose other than for processing your contribution.</span>\n          </p>\n          <h2><b>Security</b></h2>\n          <p>\n            <span>We Vote uses industry standard security measures to protect the information collected by this Site, but we cannot guarantee complete security.</span>\n          </p>\n          <h2><b>Use of services by minors</b></h2>\n          <p>\n            <span>We Vote does not knowingly solicit personally identifying information from children under 13 years of age.  We will promptly remove any personal information from children under 13 upon notice to us.</span>\n          </p>\n          <h2><b>Advertising</b></h2>\n          <p>\n            <span>We may place online advertising with third-party vendors, including Google, which will be shown on other sites on the internet. In some cases, those third-party vendors may decide which ads to show you based on your prior visits to the Site. At no time will you be personally identified to those third-party vendors, nor will any of the personal information you share with us be shared with those third-party vendors. If you prefer to opt out of the use of these third-party cookies on the Site, you can do so by visiting the Network Advertising Initiative opt out page.</span>\n          </p>\n          <h2><b>Cookies and data tracking</b></h2>\n          <p><span>In order to better serve you, we use cookies and periodically analyze web logs. Some cookies are used to pre-populate forms for you so that on repeat visits to the Site you don’t need to re-enter certain information.  You can set your browser to disable cookies, but then you would not have the advantage of having certain sections of forms being pre-populated for you, and you may not be able to access certain parts of the Site.</span></p>\n          <p>\n            <span>We also use third-party services such as Google Analytics </span>\n            <span>\n              <OpenExternalWebSite\n                url=\"https://policies.google.com/privacy\"\n                target=\"_blank\"\n                body={<span>https://policies.google.com/privacy</span>}\n              />\n            </span>\n            <span>\n              {' '}\n              and Full Story (\n              <OpenExternalWebSite\n                url=\"https://www.fullstory.com/legal/privacy/\"\n                target=\"_blank\"\n                body={<span>https://www.fullstory.com/legal/privacy/</span>}\n              />\n              ).\n            </span>\n            <span> They help us understand traffic patterns and know if there are problems with our Site. We may also use embedded images in emails to track open rates for our mailings, so that we can tell which mailings appeal most to We Vote subscribers.</span>\n          </p>\n          <p>\n            <span>\n              The information generated about your use of our Site (including your IP address) is transmitted to and stored by Google and\n              Full Story on servers in the United States. Google and/or Full Story may also transfer this information to third parties where\n              Google and/or Full Story are legally required, or where such third parties process the information on Google’s or Full Story&apos;s\n              behalf. Google may combine your IP address with any other data held by Google. By using this Site, you consent to the processing of\n              data by Google and Full Story in the manner and for the purposes set out above.\n            </span>\n          </p>\n          <p>\n            <span>URLs contained in emails may contain an ID that enables us to correctly identify the person who takes an action using a web page. We use these URLs to simplify the process of helping you to prepare to vote. We may occasionally present a shortened URL that references a longer URL which you can see in the browser’s address bar when you access the page.</span>\n          </p>\n          <h2><b>Links to other sites</b></h2>\n          <p>\n            <span>This Privacy Policy does not apply to ANY external links or any website not owned and operated by We Vote. Third party sites will have their own policies which may be different from ours and we recommend that you check the privacy policy of each site that you visit.</span>\n          </p>\n          <h2><b>Disclosure of information</b></h2>\n          <p>\n            <span>We Vote will challenge any attempt to gain access to the information you give us by government agencies or private organizations. In the unlikely event that we are required by law to disclose any of your information we will do our best to contact you first so that you may have the opportunity to object to the disclosure. We will also independently object to any requests for access to information about users of our Site that we believe to be improper.</span>\n          </p>\n          <h2><b>Amendments and consent to this privacy policy</b></h2>\n          <p>\n            <span>By using and/or visiting our Site, you understand and  agree to be bound by this Privacy Policy.  If you do not agree to this Privacy Policy, please do not use the Site or the Services.</span>\n          </p>\n          <h2><b>How to contact us</b></h2>\n          <p>\n            <span>\n              If you have any questions about this Privacy Policy, you may contact us by sending an e-mail to\n              {' '}\n              <a href=\"mailto:info@WeVote.US\" target=\"_blank\" rel=\"noopener noreferrer\">info@WeVote.US</a>\n              {' '}\n            </span>\n            <br />\n            <span>You can also write to us at the following address:</span>\n          </p>\n          <p>\n            We Vote USA\n            <br />\n            {' '}\n            1717 Clemens Rd\n            <br />\n            {' '}\n            Oakland, CA 94602\n            <br />\n            {' '}\n            Attn: Privacy Policy\n          </p>\n          <p>&nbsp;</p>\n        </div>\n      </Wrapper>\n    );\n  }\n}\n\nconst Wrapper = styled.div`\n  padding-top: ${({ padTop }) => padTop};\n`;\n\n"]}*/