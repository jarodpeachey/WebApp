.w1sfk2nt{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-flow:column nowrap;-ms-flex-flow:column nowrap;flex-flow:column nowrap;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;background:white;overflow-x:hidden;}
.hwyyb50{position:relative;height:190px;width:110%;color:white;background-image:linear-gradient(to bottom,#415a99,#2d3b5e);border-bottom-left-radius:50% 25%;border-bottom-right-radius:50% 25%;padding:0 2em;margin-top:-72px;text-align:center;}@media (max-width:var(--hwyyb50-0)){.hwyyb50{height:190px;}}@media (max-width:var(--hwyyb50-1)){.hwyyb50{height:150px;}}
.dvcl1zw{font-weight:bold;font-size:36px;text-align:center;margin-top:3em;margin-bottom:0;padding-bottom:0;}@media (max-width:var(--dvcl1zw-0)){.dvcl1zw{font-size:28px;margin-top:3em;}}@media (max-width:var(--dvcl1zw-1)){.dvcl1zw{font-size:18px;margin-top:5em;}}
.dur069m{margin:1em auto;margin-bottom:0;width:960px;max-width:90vw;text-align:left;}@media (min-width:960px) and (max-width:991px){.dur069m{max-width:100%;min-width:100%;width:100%;margin:0 auto;}.dur069m > *{width:90%;margin:0 auto;}}
/*# sourceMappingURL=data:application/json;base64,*/