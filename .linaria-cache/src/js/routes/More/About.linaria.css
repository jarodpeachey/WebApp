.w739sli{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-flow:column nowrap;-ms-flex-flow:column nowrap;flex-flow:column nowrap;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;background:white;overflow-x:hidden;padding-top:var(--w739sli-0);}
.h5y24b3{position:relative;height:230px;width:110%;color:white;background-image:linear-gradient(to bottom,#415a99,#2d3b5e);border-bottom-left-radius:50% 25%;border-bottom-right-radius:50% 25%;padding:0 2em;margin-top:-72px;}@media (max-width:var(--h5y24b3-0)){.h5y24b3{height:230px;}}@media (max-width:var(--h5y24b3-1)){.h5y24b3{height:215px;}}
.al4ydet{margin:1em auto;width:960px;max-width:90vw;text-align:left;}@media (max-width:var(--al4ydet-0)){.al4ydet{text-align:center;}}
.d8thz4e{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-flow:column;-ms-flex-flow:column;flex-flow:column;padding:0 20px 0 0;width:65%;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;text-align:left;}@media (max-width:var(--d8thz4e-0)){.d8thz4e{width:100%;text-align:center;}}
.ddj1pzl{width:35%;text-align:right;}@media (max-width:var(--ddj1pzl-0)){.ddj1pzl{margin:1em 0 0 0;text-align:center;width:100%;}}

.abkn271{color:#555 !default;font-size:.8rem;text-align:center;}
/*# sourceMappingURL=data:application/json;base64,*/