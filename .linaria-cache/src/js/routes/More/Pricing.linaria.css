.w83tr7{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-flow:column nowrap;-ms-flex-flow:column nowrap;flex-flow:column nowrap;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;background:white;overflow-x:hidden;padding-top:var(--w83tr7-0);}
.h1eiemn5{position:relative;height:210px;width:110%;color:white;background-image:linear-gradient(to bottom,#415a99,#2d3b5e);border-bottom-left-radius:50% 25%;border-bottom-right-radius:50% 25%;padding:0 2em;margin-top:-72px;text-align:center;}@media (max-width:var(--h1eiemn5-0)){.h1eiemn5{height:280px;}}@media (max-width:var(--h1eiemn5-1)){.h1eiemn5{height:240px;}}
.h1qar24s{position:relative;width:110%;padding:0 0 10px 0;text-align:center;}
.p1ja8rkj{font-weight:bold;font-size:36px;text-align:center;margin-top:3em;margin-bottom:0;padding-bottom:0;}@media (max-width:var(--p1ja8rkj-0)){.p1ja8rkj{font-size:28px;margin-top:3em;}}@media (max-width:var(--p1ja8rkj-1)){.p1ja8rkj{font-size:18px;margin-top:5em;}}


.pt0gt7w{margin:1em auto;width:100%;min-width:100%;text-align:left;}@media (max-width:569px){.pt0gt7w{margin-top:-1em;}}@media (min-width:960px) and (max-width:991px){.pt0gt7w{max-width:100%;min-width:100%;width:100%;margin:0 auto;}}
.r8e1ixs{margin:0 auto !important;}
/*# sourceMappingURL=data:application/json;base64,*/