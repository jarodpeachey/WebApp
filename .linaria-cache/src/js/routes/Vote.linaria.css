.v17x4x9j{padding-top:var(--v17x4x9j-0);}@media (max-width:var(--v17x4x9j-1)){.v17x4x9j{overflow-x:hidden;}}
@media (max-width:var(--w2f0383-0)){.w2f0383{margin:1em 0;}}
.t1avqdtm{padding:1em 1em 0 1em;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}
.tbvzeq2{font-weight:bold;font-size:18px;}@media print{.tbvzeq2{font-size:2rem;}}
.r1j8405d{padding:0 1em 0 1em;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}
.bshbqmr{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;}
.e1qdik73{padding:1em 2em;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-flow:column;-ms-flex-flow:column;flex-flow:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}
.eel4zx{font-size:16px;text-align:center;margin:1em 2em;}@media (max-width:var(--eel4zx-0)){.eel4zx{margin:1em;}}
.pkmckss{padding:1em 1em;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}
.c1oexv14{padding:7px;}
/*# sourceMappingURL=data:application/json;base64,*/