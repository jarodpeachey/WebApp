.wh1elk7{padding-top:10px;padding-left:15px;padding-right:15px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-flow:column;-ms-flex-flow:column;flex-flow:column;border-top:1px solid #eee;border-bottom:1px solid #eee;}
.f13ftehy{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-flow:row wrap;-ms-flex-flow:row wrap;flex-flow:row wrap;padding:0.7rem 0;}
.n17mc613{font-size:16px;font-weight:bold;padding-top:8px;}
/*# sourceMappingURL=data:application/json;base64,*/