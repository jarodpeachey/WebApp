.w1ynm2aq{display:var(--w1ynm2aq-0);-webkit-flex-flow:column;-ms-flex-flow:column;flex-flow:column;padding-top:1rem;}
.fyalhd2{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-flow:row;-ms-flex-flow:row;flex-flow:row;}
.fa5yol7{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-flow:column;-ms-flex-flow:column;flex-flow:column;margin-right:2rem;}
/*# sourceMappingURL=data:application/json;base64,*/