.p1tzi7a2{-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;width:-webkit-fit-content;width:-moz-fit-content;width:fit-content;width:100%;margin-top:12px;}
.sp3adri{margin:32px 0 32px 0;}
/*# sourceMappingURL=data:application/json;base64,*/