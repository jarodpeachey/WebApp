.btwq95t{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center !important;-webkit-justify-content:center !important;-ms-flex-pack:center !important;justify-content:center !important;width:-webkit-fit-content;width:-moz-fit-content;width:fit-content;width:100%;margin-top:12px;}
.m1q5xi4{width:100%;padding:12px 12px 4px 12px;-webkit-var(--m1q5xi4-0);-moz-var(--m1q5xi4-0);-ms-var(--m1q5xi4-0);var(--m1q5xi4-0);z-index:999;-webkit-var(--m1q5xi4-2);-moz-var(--m1q5xi4-2);-ms-var(--m1q5xi4-2);var(--m1q5xi4-2);}@media (min-width:769px){.m1q5xi4{text-align:center;-webkit-var(--m1q5xi4-1);-moz-var(--m1q5xi4-1);-ms-var(--m1q5xi4-1);var(--m1q5xi4-1);border-bottom:2px solid #f7f7f7;}}
.m3gsalj{color:var(--m3gsalj-0);font-size:18px;font-weight:bold;v-align:middle;position:relative;top:16.8px;float:right;}@media (max-width:569px){.m3gsalj{font-size:14px;top:13.6px;}}
.t1mca8z5{font-weight:bold;font-size:24px;margin-top:8px;padding:0 10px;position:relative;left:8px;color:black;}@media (min-width:769px){.t1mca8z5{font-size:28px;left:0;margin:0 auto;width:-webkit-fit-content;width:-moz-fit-content;width:fit-content;}}
.s1b15qxj{color:#666;font-size:20px;font-weight:bold;text-transform:capitalize;margin-bottom:16px;}@media (min-width:769px){.s1b15qxj{color:black;font-weight:bold;font-size:18px;}}@media (max-width:376px){.s1b15qxj{font-size:18px;}}
.r1d089l7{max-width:700px;margin:0 auto !important;}
.mg9xzp0{padding:16px 18px 16px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-content:center;-ms-flex-line-pack:center;align-content:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;}
.fo7l9pe{margin:0;}
.fy4n988{margin:0;}
.w16el64k{padding:0 32px 32px 16px;border-right:1px solid #f7f7f7;height:calc(100% - 32px);margin-top:32px;}
.w2vpgg0{padding:0 16px 32px 32px;border-left:1px solid #f7f7f7;height:calc(100% - 32px);margin-top:32px;}
.fr5zfq7{border:2px solid var(--fr5zfq7-0);border-radius:3px;margin-bottom:16px;padding-bottom:0;background:white;}@media (min-width:769px){.fr5zfq7{height:76px;-webkit-var(--fr5zfq7-1);-moz-var(--fr5zfq7-1);-ms-var(--fr5zfq7-1);var(--fr5zfq7-1);}}
.l6rlw7k{color:var(--l6rlw7k-0);font-size:12px;text-align:left;margin:0;margin-left:16px;padding:0px 8px;width:-webkit-fit-content;width:-moz-fit-content;width:fit-content;}
.plxv1pb{font-size:40px;font-weight:bold;color:var(--plxv1pb-0);margin-left:4px;}@media (max-width:569px){.plxv1pb{font-size:32px;}}
.pelc7tn{font-size:18px;color:var(--pelc7tn-0);position:relative;top:-12px;font-weight:bold;}@media (max-width:569px){.pelc7tn{font-size:16px;}}
.p16nxq6g{font-size:16px;font-weight:bold;color:var(--p16nxq6g-0);}@media (max-width:569px){.p16nxq6g{font-size:14px;}}
.w1nex0v0{padding:12px 30px;}@media (max-width:500px){.w1nex0v0{padding:12px 0;}}
.ivbfixv{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;width:100%;padding:10px;}@media (max-width:500px){.ivbfixv{display:block;}}
.itcgf5b{color:#aaa;font-weight:bold;font-size:18px;}@media (max-width:500px){.itcgf5b{font-size:16px;}}
.iwqxvmh{color:#000;font-weight:bold;font-size:18px;}
.iyrmlxu{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;width:100%;margin-top:16px;padding:10px;}@media(max-width:500px){.iyrmlxu{display:block;padding:0;}}.iyrmlxu *{width:50%;}@media(max-width:500px){.iyrmlxu *{width:100%;}}.iyrmlxu >:first-child{margin-bottom:8px;}@media(min-width:501px){.iyrmlxu >:first-child{margin:0 8px 0 0;}}@media(min-width:501px){.iyrmlxu >:last-child{margin:0 0 0 8px;}}
/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkQ6XFxKYXJvZFxcV2VWb3RlXFxXZWJBcHBcXHNyY1xcanNcXGNvbXBvbmVudHNcXFNldHRpbmdzXFxQYWlkQWNjb3VudFVwZ3JhZGVNb2RhbC5qc3giXSwibmFtZXMiOlsiLmJ0d3E5NXQiLCIubTFxNXhpNCIsIi5tM2dzYWxqIiwiLnQxbWNhOHo1IiwiLnMxYjE1cXhqIiwiLnIxZDA4OWw3IiwiLm1nOXh6cDAiLCIuZm83bDlwZSIsIi5meTRuOTg4IiwiLncxNmVsNjRrIiwiLncydnBnZzAiLCIuZnI1emZxNyIsIi5sNnJsdzdrIiwiLnBseHYxcGIiLCIucGVsYzd0biIsIi5wMTZueHE2ZyIsIi53MW5leDB2MCIsIi5pdmJmaXh2IiwiLml0Y2dmNWIiLCIuaXdxeHZtaCIsIi5peXJtbHh1Il0sIm1hcHBpbmdzIjoiQUFrdUNNQTtBQVNBQztBQWFBQztBQWVBQztBQWdCQUM7QUFnQkFDO0FBS0FDO0FBUUFDO0FBSUFDO0FBSUFDO0FBT0FDO0FBT0FDO0FBWUFDO0FBVUFDO0FBVUFDO0FBV0FDO0FBU0FDO0FBT0FDO0FBV0FDO0FBU0FDO0FBTUFDIiwiZmlsZSI6IkQ6XFxKYXJvZFxcV2VWb3RlXFxXZWJBcHBcXHNyY1xcanNcXGNvbXBvbmVudHNcXFNldHRpbmdzXFxQYWlkQWNjb3VudFVwZ3JhZGVNb2RhbC5qc3giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgRWxlbWVudHMsIFN0cmlwZVByb3ZpZGVyIH0gZnJvbSAncmVhY3Qtc3RyaXBlLWVsZW1lbnRzJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyBzdHlsZWQgfSBmcm9tICdsaW5hcmlhL3JlYWN0JztcbmltcG9ydCBCdXR0b24gZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUvQnV0dG9uJztcbmltcG9ydCBEaWFsb2cgZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUvRGlhbG9nJztcbmltcG9ydCBBcnJvd0JhY2sgZnJvbSAnQG1hdGVyaWFsLXVpL2ljb25zL0Fycm93QmFjayc7XG5pbXBvcnQgQXJyb3dCYWNrSW9zIGZyb20gJ0BtYXRlcmlhbC11aS9pY29ucy9BcnJvd0JhY2tJb3MnO1xuaW1wb3J0IEljb25CdXR0b24gZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUvSWNvbkJ1dHRvbic7XG5pbXBvcnQgQ2xvc2VJY29uIGZyb20gJ0BtYXRlcmlhbC11aS9pY29ucy9DbG9zZSc7XG5pbXBvcnQgRGlhbG9nQ29udGVudCBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZS9EaWFsb2dDb250ZW50JztcbmltcG9ydCBGb3JtQ29udHJvbCBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZS9Gb3JtQ29udHJvbCc7XG5pbXBvcnQgUmFkaW9Hcm91cCBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZS9SYWRpb0dyb3VwJztcbmltcG9ydCBGb3JtQ29udHJvbExhYmVsIGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlL0Zvcm1Db250cm9sTGFiZWwnO1xuaW1wb3J0IFJhZGlvIGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlL1JhZGlvJztcbmltcG9ydCB7IHdpdGhTdHlsZXMsIHdpdGhUaGVtZSwgT3V0bGluZWRJbnB1dCB9IGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlJztcbmltcG9ydCB7IHJlbmRlckxvZyB9IGZyb20gJy4uLy4uL3V0aWxzL2xvZ2dpbmcnO1xuaW1wb3J0IHsgaGFzSVBob25lTm90Y2gsIGlzSU9TIH0gZnJvbSAnLi4vLi4vdXRpbHMvY29yZG92YVV0aWxzJztcbmltcG9ydCBleHRyYWN0TnVtYmVyIGZyb20gJy4uLy4uL3V0aWxzL2V4dHJhY3ROdW1iZXInO1xuaW1wb3J0IHsgbnVtYmVyV2l0aENvbW1hcywgc3RyaW5nQ29udGFpbnMgfSBmcm9tICcuLi8uLi91dGlscy90ZXh0Rm9ybWF0JztcbmltcG9ydCBEb25hdGVTdG9yZSBmcm9tICcuLi8uLi9zdG9yZXMvRG9uYXRlU3RvcmUnO1xuaW1wb3J0IERvbmF0ZUFjdGlvbnMgZnJvbSAnLi4vLi4vYWN0aW9ucy9Eb25hdGVBY3Rpb25zJztcbmltcG9ydCBPcGVuRXh0ZXJuYWxXZWJTaXRlIGZyb20gJy4uL1dpZGdldHMvT3BlbkV4dGVybmFsV2ViU2l0ZSc7XG5pbXBvcnQgUHJpY2luZyBmcm9tICcuLi8uLi9yb3V0ZXMvTW9yZS9QcmljaW5nJzsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBpbXBvcnQvbm8tY3ljbGVcbmltcG9ydCBTZXR0aW5nc1N0cmlwZVBheW1lbnQgZnJvbSAnLi9TZXR0aW5nc1N0cmlwZVBheW1lbnQnO1xuaW1wb3J0IHdlYkFwcENvbmZpZyBmcm9tICcuLi8uLi9jb25maWcnO1xuXG4vKiBnbG9iYWwgJCAqL1xuXG5jbGFzcyBQYWlkQWNjb3VudFVwZ3JhZGVNb2RhbCBleHRlbmRzIENvbXBvbmVudCB7XG4gIC8vIFRoaXMgbW9kYWwgd2lsbCBzaG93IGEgdXNlcnMgYmFsbG90IGd1aWRlcyBmcm9tIHByZXZpb3VzIGFuZCBjdXJyZW50IGVsZWN0aW9ucy5cblxuICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QsXG4gICAgaW5pdGlhbFBhaWRBY2NvdW50UHJvY2Vzc1N0ZXA6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgaW5pdGlhbFByaWNpbmdQbGFuOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIHBhdGhuYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIHNob3c6IFByb3BUeXBlcy5ib29sLFxuICAgIC8vIHN0cmlwZTogUHJvcFR5cGVzLm9iamVjdCxcbiAgICB0b2dnbGVGdW5jdGlvbjogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgfTtcblxuICBjb25zdHJ1Y3RvciAocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGFtb3VudFBhaWRWaWFTdHJpcGU6IDAsXG4gICAgICBjb250YWN0U2FsZXNSZXF1aXJlZDogZmFsc2UsXG4gICAgICBjb3Vwb25Db2RlRXJyb3I6IGZhbHNlLFxuICAgICAgZGVmYXVsdFByaWNpbmc6IHtcbiAgICAgICAgZW50ZXJwcmlzZVBsYW5GdWxsUHJpY2VQZXJNb250aFBheU1vbnRobHk6IDAsXG4gICAgICAgIGVudGVycHJpc2VQbGFuRnVsbFByaWNlUGVyTW9udGhQYXlZZWFybHk6IDAsXG4gICAgICAgIHByb1BsYW5GdWxsUHJpY2VQZXJNb250aFBheU1vbnRobHk6IDAsXG4gICAgICAgIHByb1BsYW5GdWxsUHJpY2VQZXJNb250aFBheVllYXJseTogMCxcbiAgICAgICAgc3RhdHVzOiAnRnJvbSBjb25zdHJ1Y3RvcicsXG4gICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgfSxcbiAgICAgIGxhc3RDb3Vwb25SZXNwb25zZVJlY2VpdmVkRnJvbUFQSToge1xuICAgICAgICBjb3Vwb25BcHBsaWVkTWVzc2FnZTogJycsXG4gICAgICAgIGNvdXBvbkNvZGVTdHJpbmc6ICcyNU9GRicsXG4gICAgICAgIGNvdXBvbk1hdGNoRm91bmQ6IGZhbHNlLFxuICAgICAgICBjb3Vwb25TdGlsbFZhbGlkOiBmYWxzZSxcbiAgICAgICAgZW50ZXJwcmlzZVBsYW5Db3Vwb25QcmljZVBlck1vbnRoUGF5TW9udGhseTogMCxcbiAgICAgICAgZW50ZXJwcmlzZVBsYW5Db3Vwb25QcmljZVBlck1vbnRoUGF5WWVhcmx5OiAwLFxuICAgICAgICBwcm9QbGFuQ291cG9uUHJpY2VQZXJNb250aFBheU1vbnRobHk6IDE0MDAwLFxuICAgICAgICBwcm9QbGFuQ291cG9uUHJpY2VQZXJNb250aFBheVllYXJseTogMTE1MDAsXG4gICAgICAgIHZhbGlkRm9yUHJvZmVzc2lvbmFsUGxhbjogdHJ1ZSxcbiAgICAgICAgdmFsaWRGb3JFbnRlcnByaXNlUGxhbjogZmFsc2UsXG4gICAgICAgIHN0YXR1czogJ0Zyb20gY29uc3RydWN0b3InLFxuICAgICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgIH0sXG4gICAgICBwYXRobmFtZTogdW5kZWZpbmVkLFxuICAgICAgcGFpZEFjY291bnRQcm9jZXNzU3RlcDogJ2Nob29zZVBsYW4nLFxuICAgICAgcHJpY2luZ1BsYW5DaG9zZW46IHVuZGVmaW5lZCxcbiAgICAgIHJhZGlvR3JvdXBWYWx1ZTogJ2FubnVhbFBsYW5SYWRpbycsXG4gICAgICBjb3Vwb25Db2RlSW5wdXRWYWx1ZTogJycsXG4gICAgICAvLyBjb3Vwb25Db2Rlc0Zyb21BUEk6IFtdLFxuICAgICAgaXNDb3Vwb25Db2RlQXBwbGllZDogZmFsc2UsXG4gICAgICBjb3Vwb25EaXNjb3VudFZhbHVlOiAwLFxuICAgICAgd2luZG93V2lkdGg6IHVuZGVmaW5lZCxcbiAgICB9O1xuXG4gICAgdGhpcy5iYWNrVG9DaG9vc2VQbGFuID0gdGhpcy5iYWNrVG9DaG9vc2VQbGFuLmJpbmQodGhpcyk7XG4gICAgdGhpcy5jbG9zZVBhaWRBY2NvdW50VXBncmFkZU1vZGFsID0gdGhpcy5jbG9zZVBhaWRBY2NvdW50VXBncmFkZU1vZGFsLmJpbmQodGhpcyk7XG4gICAgdGhpcy5jaGVja0NvdXBvbkNvZGVWYWxpZGl0eSA9IHRoaXMuY2hlY2tDb3Vwb25Db2RlVmFsaWRpdHkuYmluZCh0aGlzKTtcbiAgICB0aGlzLmhhbmRsZVJlc2l6ZSA9IHRoaXMuaGFuZGxlUmVzaXplLmJpbmQodGhpcyk7XG4gICAgdGhpcy5vbkNvdXBvbklucHV0Q2hhbmdlID0gdGhpcy5vbkNvdXBvbklucHV0Q2hhbmdlLmJpbmQodGhpcyk7XG4gICAgdGhpcy5wYXltZW50UHJvY2Vzc2VkRnVuY3Rpb24gPSB0aGlzLnBheW1lbnRQcm9jZXNzZWRGdW5jdGlvbi5iaW5kKHRoaXMpO1xuICAgIHRoaXMucmVzZXRDb3Vwb25Db2RlID0gdGhpcy5yZXNldENvdXBvbkNvZGUuYmluZCh0aGlzKTtcbiAgfVxuXG4gIGNvbXBvbmVudERpZE1vdW50ICgpIHtcbiAgICBEb25hdGVTdG9yZS5yZXNldFN0YXRlKCk7XG4gICAgY29uc3QgZGVmYXVsdFByaWNpbmcgPSBEb25hdGVTdG9yZS5nZXREZWZhdWx0UHJpY2luZygpO1xuICAgIGlmICghZGVmYXVsdFByaWNpbmcudmFsaWRGb3JFbnRlcnByaXNlUGxhbiAmJiAhZGVmYXVsdFByaWNpbmcudmFsaWRGb3JQcm9mZXNzaW9uYWxQbGFuKSB7XG4gICAgICBEb25hdGVBY3Rpb25zLmRlZmF1bHRQcmljaW5nKCk7XG4gICAgfVxuICAgIGlmICh0aGlzLnByb3BzLmluaXRpYWxQYWlkQWNjb3VudFByb2Nlc3NTdGVwID09PSAncGF5Rm9yUGxhbicpIHtcbiAgICAgIC8vIHNldCBzdGF0ZSBvZiBwYWlkQWNjb3VudFByb2Nlc3NTdGVwIGJhc2VkIG9uIHdpbmRvdyBzaXplXG4gICAgICB0aGlzLm1vdmVUb1BheUZvclBsYW5TdGVwKCk7XG4gICAgfVxuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgZGVmYXVsdFByaWNpbmcsXG4gICAgICBwYXRobmFtZTogdGhpcy5wcm9wcy5wYXRobmFtZSxcbiAgICB9KTtcbiAgICB0aGlzLmhhbmRsZVJlc2l6ZSgpO1xuICAgIHRoaXMub25Eb25hdGVTdG9yZUNoYW5nZSgpOyAvLyBMb2FkIHVwIGRlZmF1bHQgcHJpY2luZ1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCB0aGlzLmhhbmRsZVJlc2l6ZSk7XG4gICAgRG9uYXRlQWN0aW9ucy5kb25hdGlvblJlZnJlc2hEb25hdGlvbkxpc3QoKTtcbiAgICB0aGlzLmRvbmF0ZVN0b3JlTGlzdGVuZXIgPSBEb25hdGVTdG9yZS5hZGRMaXN0ZW5lcih0aGlzLm9uRG9uYXRlU3RvcmVDaGFuZ2UpO1xuICB9XG5cbiAgY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyAobmV4dFByb3BzKSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBwYXRobmFtZTogbmV4dFByb3BzLnBhdGhuYW1lLFxuICAgIH0pO1xuICB9XG5cbiAgc2hvdWxkQ29tcG9uZW50VXBkYXRlIChuZXh0UHJvcHMsIG5leHRTdGF0ZSkge1xuICAgIGlmICh0aGlzLnN0YXRlLndpbmRvd1dpZHRoICE9PSBuZXh0U3RhdGUud2luZG93V2lkdGgpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBpZiAodGhpcy5zdGF0ZS5pc0NvdXBvbkNvZGVBcHBsaWVkICE9PSBuZXh0U3RhdGUuaXNDb3Vwb25Db2RlQXBwbGllZCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGlmICh0aGlzLnN0YXRlLmxhc3RDb3Vwb25SZXNwb25zZVJlY2VpdmVkRnJvbUFQSSAhPT0gbmV4dFN0YXRlLmxhc3RDb3Vwb25SZXNwb25zZVJlY2VpdmVkRnJvbUFQSSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGlmICh0aGlzLnN0YXRlLmNvbnRhY3RTYWxlc1JlcXVpcmVkICE9PSBuZXh0U3RhdGUuY29udGFjdFNhbGVzUmVxdWlyZWQpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBpZiAodGhpcy5zdGF0ZS5jb3Vwb25Db2RlSW5wdXRWYWx1ZSAhPT0gbmV4dFN0YXRlLmNvdXBvbkNvZGVJbnB1dFZhbHVlKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKHRoaXMuc3RhdGUuY291cG9uRGlzY291bnRWYWx1ZSAhPT0gbmV4dFN0YXRlLmNvdXBvbkRpc2NvdW50VmFsdWUpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBpZiAodGhpcy5zdGF0ZS5yYWRpb0dyb3VwVmFsdWUgIT09IG5leHRTdGF0ZS5yYWRpb0dyb3VwVmFsdWUpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBpZiAodGhpcy5zdGF0ZS5wYWlkQWNjb3VudFByb2Nlc3NTdGVwICE9PSBuZXh0U3RhdGUucGFpZEFjY291bnRQcm9jZXNzU3RlcCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGlmICh0aGlzLnN0YXRlLm51bWJlck9mTW9udGhzU2VydmljZSAhPT0gbmV4dFN0YXRlLm51bWJlck9mTW9udGhzU2VydmljZSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGlmICh0aGlzLnN0YXRlLnBheUJ5TW9udGhDb3N0UGVyTW9udGggIT09IG5leHRTdGF0ZS5wYXlCeU1vbnRoQ29zdFBlck1vbnRoKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKHRoaXMuc3RhdGUucGF5QnlZZWFyQ29zdFBlclllYXIgIT09IG5leHRTdGF0ZS5wYXlCeVllYXJDb3N0UGVyWWVhcikge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGlmICh0aGlzLnN0YXRlLnByaWNpbmdQbGFuQ2hvc2VuICE9PSBuZXh0U3RhdGUucHJpY2luZ1BsYW5DaG9zZW4pIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBpZiAodGhpcy5zdGF0ZS52YWxpZEZvckVudGVycHJpc2VQbGFuICE9PSBuZXh0U3RhdGUudmFsaWRGb3JFbnRlcnByaXNlUGxhbikge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGlmICh0aGlzLnN0YXRlLnZhbGlkRm9yUHJvZmVzc2lvbmFsUGxhbiAhPT0gbmV4dFN0YXRlLnZhbGlkRm9yUHJvZmVzc2lvbmFsUGxhbikge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGNvbXBvbmVudFdpbGxVbm1vdW50ICgpIHtcbiAgICB0aGlzLmRvbmF0ZVN0b3JlTGlzdGVuZXIucmVtb3ZlKCk7XG4gICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHRoaXMuaGFuZGxlUmVzaXplKTtcbiAgfVxuXG4gIG9uQ291cG9uSW5wdXRDaGFuZ2UgKGUpIHtcbiAgICB0aGlzLnNldFN0YXRlKHsgY291cG9uQ29kZUlucHV0VmFsdWU6IGUudGFyZ2V0LnZhbHVlIH0pO1xuICB9XG5cbiAgb25Eb25hdGVTdG9yZUNoYW5nZSA9ICgpID0+IHtcbiAgICBjb25zdCBhY3RpdmVQYWlkUGxhbiA9IERvbmF0ZVN0b3JlLmdldEFjdGl2ZVBhaWRQbGFuKCk7XG4gICAgaWYgKGFjdGl2ZVBhaWRQbGFuICYmIGFjdGl2ZVBhaWRQbGFuLnN1YnNjcmlwdGlvbl9hY3RpdmUpIHtcbiAgICAgIGxldCBhY3RpdmVQYWlkUGxhbkNob3NlbiA9ICcnO1xuICAgICAgbGV0IGFjdGl2ZVBhaWRQbGFuQ2hvc2VuRGlzcGxheSA9ICcnO1xuICAgICAgaWYgKHN0cmluZ0NvbnRhaW5zKCdQUk9GRVNTSU9OQUwnLCBhY3RpdmVQYWlkUGxhbi5wbGFuX3R5cGVfZW51bSkpIHtcbiAgICAgICAgYWN0aXZlUGFpZFBsYW5DaG9zZW4gPSAncHJvZmVzc2lvbmFsJztcbiAgICAgICAgYWN0aXZlUGFpZFBsYW5DaG9zZW5EaXNwbGF5ID0gJ1Byb2Zlc3Npb25hbCc7XG4gICAgICB9IGVsc2UgaWYgKHN0cmluZ0NvbnRhaW5zKCdFTlRFUlBSSVNFJywgYWN0aXZlUGFpZFBsYW4ucGxhbl90eXBlX2VudW0pKSB7XG4gICAgICAgIGFjdGl2ZVBhaWRQbGFuQ2hvc2VuID0gJ2VudGVycHJpc2UnO1xuICAgICAgICBhY3RpdmVQYWlkUGxhbkNob3NlbkRpc3BsYXkgPSAnRW50ZXJwcmlzZSc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhY3RpdmVQYWlkUGxhbkNob3NlbiA9ICd1bmtub3duJztcbiAgICAgICAgYWN0aXZlUGFpZFBsYW5DaG9zZW5EaXNwbGF5ID0gJ1Vua25vd24nO1xuICAgICAgfVxuICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIGFjdGl2ZVBhaWRQbGFuQ2hvc2VuLFxuICAgICAgICBhY3RpdmVQYWlkUGxhbkNob3NlbkRpc3BsYXksXG4gICAgICB9KTtcbiAgICB9XG4gICAgY29uc3QgbXNnID0gRG9uYXRlU3RvcmUuZ2V0Q291cG9uTWVzc2FnZSgpO1xuICAgIGlmIChtc2cubGVuZ3RoID4gMCkge1xuICAgICAgY29uc29sZS5sb2coJ1BhaWRBY2NvdW50VXBncmFkZU1vZGFsIHVwZGF0aW5nIGNvdXBvbiBtZXNzYWdlIHN1Y2Nlc3MgdmFsaWRhdGluZyBjb3Vwb24nKTtcbiAgICAgICQoJy51LW5vLWJyZWFrJykuaHRtbChtc2cpO1xuICAgIH1cblxuICAgIGlmIChEb25hdGVTdG9yZS5nZXRPcmdTdWJzY3JpcHRpb25BbHJlYWR5RXhpc3RzKCkpIHtcbiAgICAgIGNvbnNvbGUubG9nKCdQYWlkQWNjb3VudFVwZ3JhZGVNb2RhbCB1cGRhdGluZyBjb3Vwb24gbWVzc2FnZSBvcmdhbml6YXRpb24gc3Vic2NyaXB0aW9uIGFscmVhZHkgZXhpc3RzJyk7XG4gICAgICAkKCcudS1uby1icmVhaycpLmh0bWwoJ0Egc3Vic2NyaXB0aW9uIGFscmVhZHkgZXhpc3RzIGZvciB0aGlzIG9yZ2FuaXphdGlvbjxicj5UaGUgZXhpc3Rpbmcgc3Vic2NyaXB0aW9uIHdhcyBub3QgYWx0ZXJlZCwgbm8gY3JlZGl0IGNhcmQgY2hhcmdlIHdhcyBtYWRlLicpO1xuICAgIH1cbiAgICBjb25zdCB7IHByaWNpbmdQbGFuQ2hvc2VuLCByYWRpb0dyb3VwVmFsdWUgfSA9IHRoaXMuc3RhdGU7XG4gICAgY29uc3QgZGVmYXVsdFByaWNpbmcgPSBEb25hdGVTdG9yZS5nZXREZWZhdWx0UHJpY2luZygpO1xuICAgIGNvbnN0IGxhc3RDb3Vwb25SZXNwb25zZVJlY2VpdmVkRnJvbUFQSSA9IERvbmF0ZVN0b3JlLmdldExhc3RDb3Vwb25SZXNwb25zZVJlY2VpdmVkKCk7XG4gICAgLy8gY29uc29sZS5sb2coJ29uRG9uYXRlU3RvcmVDaGFuZ2UsIGxhc3RDb3Vwb25SZXNwb25zZVJlY2VpdmVkRnJvbUFQSTonLCBsYXN0Q291cG9uUmVzcG9uc2VSZWNlaXZlZEZyb21BUEkpO1xuICAgIGNvbnN0IHsgcHJvUGxhbkZ1bGxQcmljZVBlck1vbnRoUGF5WWVhcmx5LCBwcm9QbGFuRnVsbFByaWNlUGVyTW9udGhQYXlNb250aGx5IH0gPSBkZWZhdWx0UHJpY2luZztcbiAgICBjb25zdCB7IGNvdXBvbkRpc2NvdW50VmFsdWUsIGNvdXBvblJlY2VpdmVkLCBjb3Vwb25WaWV3ZWQsIGNvdXBvbk1hdGNoRm91bmQsIGNvdXBvblN0aWxsVmFsaWQsIGVudGVycHJpc2VQbGFuQ291cG9uUHJpY2VQZXJNb250aFBheU1vbnRobHksIGVudGVycHJpc2VQbGFuQ291cG9uUHJpY2VQZXJNb250aFBheVllYXJseSwgcHJvUGxhbkNvdXBvblByaWNlUGVyTW9udGhQYXlZZWFybHksIHByb1BsYW5Db3Vwb25QcmljZVBlck1vbnRoUGF5TW9udGhseSwgdmFsaWRGb3JFbnRlcnByaXNlUGxhbiwgdmFsaWRGb3JQcm9mZXNzaW9uYWxQbGFuIH0gPSBsYXN0Q291cG9uUmVzcG9uc2VSZWNlaXZlZEZyb21BUEk7XG5cbiAgICAvLyBUaGVzZSB2YWx1ZXMgYXJlIGRpZmZlcmVudCBiYXNlZCBvbiB0aGUgcGxhbiBjaG9zZW5cbiAgICBsZXQgY29udGFjdFNhbGVzUmVxdWlyZWQ7XG4gICAgbGV0IG51bWJlck9mTW9udGhzU2VydmljZSA9IDA7XG4gICAgbGV0IHBheUJ5TW9udGhDb3N0UGVyTW9udGggPSAwO1xuICAgIGxldCBwYXlCeVllYXJDb3N0UGVyWWVhciA9IDA7XG4gICAgbGV0IHBsYW5QcmljZUZvckRpc3BsYXlCaWxsZWRNb250aGx5O1xuICAgIGxldCBwbGFuUHJpY2VGb3JEaXNwbGF5QmlsbGVkWWVhcmx5O1xuICAgIC8vIGxldCBjdXJyZW50U2VsZWN0ZWRQbGFuQ29zdEZvclBheW1lbnQ7XG4gICAgaWYgKGNvdXBvbk1hdGNoRm91bmQgJiYgY291cG9uU3RpbGxWYWxpZCkge1xuICAgICAgaWYgKHByaWNpbmdQbGFuQ2hvc2VuID09PSAnZW50ZXJwcmlzZScpIHtcbiAgICAgICAgaWYgKHZhbGlkRm9yRW50ZXJwcmlzZVBsYW4pIHtcbiAgICAgICAgICBjb250YWN0U2FsZXNSZXF1aXJlZCA9IGZhbHNlO1xuICAgICAgICAgIHBsYW5QcmljZUZvckRpc3BsYXlCaWxsZWRNb250aGx5ID0gZW50ZXJwcmlzZVBsYW5Db3Vwb25QcmljZVBlck1vbnRoUGF5TW9udGhseTtcbiAgICAgICAgICBwbGFuUHJpY2VGb3JEaXNwbGF5QmlsbGVkWWVhcmx5ID0gZW50ZXJwcmlzZVBsYW5Db3Vwb25QcmljZVBlck1vbnRoUGF5WWVhcmx5O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnRhY3RTYWxlc1JlcXVpcmVkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICh2YWxpZEZvclByb2Zlc3Npb25hbFBsYW4pIHtcbiAgICAgICAgcGxhblByaWNlRm9yRGlzcGxheUJpbGxlZE1vbnRobHkgPSBwcm9QbGFuQ291cG9uUHJpY2VQZXJNb250aFBheU1vbnRobHk7XG4gICAgICAgIHBsYW5QcmljZUZvckRpc3BsYXlCaWxsZWRZZWFybHkgPSBwcm9QbGFuQ291cG9uUHJpY2VQZXJNb250aFBheVllYXJseTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBsYW5QcmljZUZvckRpc3BsYXlCaWxsZWRNb250aGx5ID0gcHJvUGxhbkZ1bGxQcmljZVBlck1vbnRoUGF5TW9udGhseTtcbiAgICAgICAgcGxhblByaWNlRm9yRGlzcGxheUJpbGxlZFllYXJseSA9IHByb1BsYW5GdWxsUHJpY2VQZXJNb250aFBheVllYXJseTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHByaWNpbmdQbGFuQ2hvc2VuID09PSAnZW50ZXJwcmlzZScpIHtcbiAgICAgIGNvbnRhY3RTYWxlc1JlcXVpcmVkID0gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29udGFjdFNhbGVzUmVxdWlyZWQgPSBmYWxzZTtcbiAgICAgIHBsYW5QcmljZUZvckRpc3BsYXlCaWxsZWRNb250aGx5ID0gcHJvUGxhbkZ1bGxQcmljZVBlck1vbnRoUGF5TW9udGhseTtcbiAgICAgIHBsYW5QcmljZUZvckRpc3BsYXlCaWxsZWRZZWFybHkgPSBwcm9QbGFuRnVsbFByaWNlUGVyTW9udGhQYXlZZWFybHk7XG4gICAgfVxuICAgIGlmIChyYWRpb0dyb3VwVmFsdWUgPT09ICdhbm51YWxQbGFuUmFkaW8nKSB7XG4gICAgICAvLyBjdXJyZW50U2VsZWN0ZWRQbGFuQ29zdEZvclBheW1lbnQgPSBwbGFuUHJpY2VGb3JEaXNwbGF5QmlsbGVkWWVhcmx5O1xuICAgICAgcGF5QnlZZWFyQ29zdFBlclllYXIgPSAxMiAqIHBsYW5QcmljZUZvckRpc3BsYXlCaWxsZWRZZWFybHk7XG4gICAgICBudW1iZXJPZk1vbnRoc1NlcnZpY2UgPSAxMjtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gY3VycmVudFNlbGVjdGVkUGxhbkNvc3RGb3JQYXltZW50ID0gcGxhblByaWNlRm9yRGlzcGxheUJpbGxlZE1vbnRobHk7XG4gICAgICBwYXlCeU1vbnRoQ29zdFBlck1vbnRoID0gcGxhblByaWNlRm9yRGlzcGxheUJpbGxlZE1vbnRobHk7XG4gICAgICBudW1iZXJPZk1vbnRoc1NlcnZpY2UgPSAxO1xuICAgIH1cblxuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgYW1vdW50UGFpZFZpYVN0cmlwZTogRG9uYXRlU3RvcmUuZ2V0QW1vdW50UGFpZFZpYVN0cmlwZSgpLFxuICAgICAgY29udGFjdFNhbGVzUmVxdWlyZWQsXG4gICAgICBjb3Vwb25EaXNjb3VudFZhbHVlLCAvLyBSZXBsYWNlIHRoaXMgZG9sbGFyIGRpc2NvdW50IHdpdGggcGVyY2VudGFnZVxuICAgICAgLy8gY3VycmVudFNlbGVjdGVkUGxhbkNvc3RGb3JQYXltZW50OiB0aGlzLmNvbnZlcnRQcmljZUZyb21QZW5uaWVzVG9Eb2xsYXJzKGN1cnJlbnRTZWxlY3RlZFBsYW5Db3N0Rm9yUGF5bWVudCksXG4gICAgICBkZWZhdWx0UHJpY2luZyxcbiAgICAgIGlzQ291cG9uQ29kZUFwcGxpZWQ6IGNvdXBvbk1hdGNoRm91bmQsXG4gICAgICBsYXN0Q291cG9uUmVzcG9uc2VSZWNlaXZlZEZyb21BUEksXG4gICAgICBudW1iZXJPZk1vbnRoc1NlcnZpY2UsXG4gICAgICBwYXlCeU1vbnRoQ29zdFBlck1vbnRoLFxuICAgICAgcGF5QnlZZWFyQ29zdFBlclllYXIsXG4gICAgICBwbGFuUHJpY2VGb3JEaXNwbGF5QmlsbGVkTW9udGhseTogdGhpcy5jb252ZXJ0UHJpY2VGcm9tUGVubmllc1RvRG9sbGFycyhwbGFuUHJpY2VGb3JEaXNwbGF5QmlsbGVkTW9udGhseSksXG4gICAgICBwbGFuUHJpY2VGb3JEaXNwbGF5QmlsbGVkWWVhcmx5OiB0aGlzLmNvbnZlcnRQcmljZUZyb21QZW5uaWVzVG9Eb2xsYXJzKHBsYW5QcmljZUZvckRpc3BsYXlCaWxsZWRZZWFybHkpLFxuICAgICAgdmFsaWRGb3JQcm9mZXNzaW9uYWxQbGFuLFxuICAgICAgdmFsaWRGb3JFbnRlcnByaXNlUGxhbixcbiAgICB9KTtcblxuICAgIGlmIChjb3Vwb25SZWNlaXZlZCAmJiAhY291cG9uVmlld2VkKSB7XG4gICAgICBjb25zb2xlLmxvZygnY291cG9uVmlld2VkOicsIGNvdXBvblZpZXdlZCk7XG4gICAgICBpZiAoY291cG9uTWF0Y2hGb3VuZCA9PT0gZmFsc2UpIHtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IGNvdXBvbkNvZGVFcnJvcjogdHJ1ZSwgY291cG9uQ29kZUlucHV0VmFsdWU6ICcnIH0pO1xuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICBEb25hdGVBY3Rpb25zLnNldExhdGVzdENvdXBvblZpZXdlZCh0cnVlKTtcbiAgICAgICAgICB0aGlzLnNldFN0YXRlKHsgY291cG9uQ29kZUVycm9yOiBmYWxzZSB9KTtcbiAgICAgICAgfSwgMzAwMCk7XG4gICAgICB9IGVsc2UgaWYgKGNvdXBvblN0aWxsVmFsaWQgPT09IGZhbHNlKSB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoeyBjb3Vwb25Db2RlRXJyb3I6IHRydWUsIGNvdXBvbkNvZGVJbnB1dFZhbHVlOiAnJyB9KTtcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgRG9uYXRlQWN0aW9ucy5zZXRMYXRlc3RDb3Vwb25WaWV3ZWQodHJ1ZSk7XG4gICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IGNvdXBvbkNvZGVFcnJvcjogZmFsc2UgfSk7XG4gICAgICAgIH0sIDMwMDApO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBiYWNrVG9BcHBseUNvdXBvbiA9ICgpID0+IHtcbiAgICB0aGlzLnNldFN0YXRlKHsgcGFpZEFjY291bnRQcm9jZXNzU3RlcDogJ3NlbGVjdFBsYW5EZXRhaWxzTW9iaWxlJyB9KTtcbiAgfVxuXG4gIG1vdmVUb1BheUZvclBsYW5TdGVwID0gKCkgPT4ge1xuICAgIGlmICh3aW5kb3cuaW5uZXJXaWR0aCA+IDc2OCkge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIHBhaWRBY2NvdW50UHJvY2Vzc1N0ZXA6ICdwYXlGb3JQbGFuRGVza3RvcCcsXG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIHBhaWRBY2NvdW50UHJvY2Vzc1N0ZXA6ICdwYXlGb3JQbGFuTW9iaWxlJyxcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIHByaWNpbmdQbGFuQ2hvc2VuRnVuY3Rpb24gPSAocHJpY2luZ1BsYW5DaG9zZW4pID0+IHtcbiAgICBjb25zdCB7IGFjdGl2ZVBhaWRQbGFuQ2hvc2VuLCByYWRpb0dyb3VwVmFsdWUsIGRlZmF1bHRQcmljaW5nLCBsYXN0Q291cG9uUmVzcG9uc2VSZWNlaXZlZEZyb21BUEkgfSA9IHRoaXMuc3RhdGU7XG4gICAgLy8gY29uc29sZS5sb2coJ3ByaWNpbmdQbGFuQ2hvc2VuRnVuY3Rpb24gcHJpY2luZ1BsYW5DaG9zZW46JywgcHJpY2luZ1BsYW5DaG9zZW4sICcsIGxhc3RDb3Vwb25SZXNwb25zZVJlY2VpdmVkRnJvbUFQSTonLCBsYXN0Q291cG9uUmVzcG9uc2VSZWNlaXZlZEZyb21BUEkpO1xuICAgIGlmIChwcmljaW5nUGxhbkNob3NlbiA9PT0gYWN0aXZlUGFpZFBsYW5DaG9zZW4pIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICBwYWlkQWNjb3VudFByb2Nlc3NTdGVwOiAnYWN0aXZlUGFpZFBsYW5FeGlzdHMnLFxuICAgICAgICBwcmljaW5nUGxhbkNob3NlbixcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAod2luZG93LmlubmVyV2lkdGggPiA3NjggJiYgcHJpY2luZ1BsYW5DaG9zZW4gIT09ICdmcmVlJykge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIHBhaWRBY2NvdW50UHJvY2Vzc1N0ZXA6ICdwYXlGb3JQbGFuRGVza3RvcCcsXG4gICAgICAgIHByaWNpbmdQbGFuQ2hvc2VuLFxuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmIChwcmljaW5nUGxhbkNob3NlbiAhPT0gJ2ZyZWUnKSB7XG4gICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgcGFpZEFjY291bnRQcm9jZXNzU3RlcDogJ3NlbGVjdFBsYW5EZXRhaWxzTW9iaWxlJyxcbiAgICAgICAgcHJpY2luZ1BsYW5DaG9zZW4sXG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5wcm9wcy50b2dnbGVGdW5jdGlvbih0aGlzLnN0YXRlLnBhdGhuYW1lKTtcbiAgICB9XG5cbiAgICAvLyBsZXQgY3VycmVudFNlbGVjdGVkUGxhbkNvc3RGb3JQcm8gPSAwO1xuICAgIC8vIGxldCBjdXJyZW50U2VsZWN0ZWRQbGFuQ29zdEZvckVudGVycHJpc2UgPSAwO1xuICAgIGNvbnN0IGVudGVycHJpc2VQbGFuUHJpY2VGb3JEaXNwbGF5QmlsbGVkWWVhcmx5ID0gbGFzdENvdXBvblJlc3BvbnNlUmVjZWl2ZWRGcm9tQVBJLnZhbGlkRm9yRW50ZXJwcmlzZVBsYW4gPyBsYXN0Q291cG9uUmVzcG9uc2VSZWNlaXZlZEZyb21BUEkuZW50ZXJwcmlzZVBsYW5Db3Vwb25QcmljZVBlck1vbnRoUGF5WWVhcmx5IDogZGVmYXVsdFByaWNpbmcuZW50ZXJwcmlzZVBsYW5GdWxsUHJpY2VQZXJNb250aFBheVllYXJseTtcbiAgICBjb25zdCBlbnRlcnByaXNlUGxhblByaWNlRm9yRGlzcGxheUJpbGxlZE1vbnRobHkgPSBsYXN0Q291cG9uUmVzcG9uc2VSZWNlaXZlZEZyb21BUEkudmFsaWRGb3JFbnRlcnByaXNlUGxhbiA/IGxhc3RDb3Vwb25SZXNwb25zZVJlY2VpdmVkRnJvbUFQSS5lbnRlcnByaXNlUGxhbkNvdXBvblByaWNlUGVyTW9udGhQYXlNb250aGx5IDogZGVmYXVsdFByaWNpbmcuZW50ZXJwcmlzZVBsYW5GdWxsUHJpY2VQZXJNb250aFBheU1vbnRobHk7XG4gICAgbGV0IG51bWJlck9mTW9udGhzU2VydmljZSA9IDA7XG4gICAgbGV0IHBheUJ5TW9udGhDb3N0UGVyTW9udGggPSAwO1xuICAgIGxldCBwYXlCeVllYXJDb3N0UGVyWWVhciA9IDA7XG4gICAgY29uc3QgcHJvUGxhblByaWNlRm9yRGlzcGxheUJpbGxlZFllYXJseSA9IGxhc3RDb3Vwb25SZXNwb25zZVJlY2VpdmVkRnJvbUFQSS52YWxpZEZvclByb2Zlc3Npb25hbFBsYW4gPyBsYXN0Q291cG9uUmVzcG9uc2VSZWNlaXZlZEZyb21BUEkucHJvUGxhbkNvdXBvblByaWNlUGVyTW9udGhQYXlZZWFybHkgOiBkZWZhdWx0UHJpY2luZy5wcm9QbGFuRnVsbFByaWNlUGVyTW9udGhQYXlZZWFybHk7XG4gICAgY29uc3QgcHJvUGxhblByaWNlRm9yRGlzcGxheUJpbGxlZE1vbnRobHkgPSBsYXN0Q291cG9uUmVzcG9uc2VSZWNlaXZlZEZyb21BUEkudmFsaWRGb3JQcm9mZXNzaW9uYWxQbGFuID8gbGFzdENvdXBvblJlc3BvbnNlUmVjZWl2ZWRGcm9tQVBJLnByb1BsYW5Db3Vwb25QcmljZVBlck1vbnRoUGF5TW9udGhseSA6IGRlZmF1bHRQcmljaW5nLnByb1BsYW5GdWxsUHJpY2VQZXJNb250aFBheU1vbnRobHk7XG5cbiAgICBpZiAocmFkaW9Hcm91cFZhbHVlID09PSAnYW5udWFsUGxhblJhZGlvJykge1xuICAgICAgLy8gY3VycmVudFNlbGVjdGVkUGxhbkNvc3RGb3JQcm8gPSBwcm9QbGFuUHJpY2VGb3JEaXNwbGF5QmlsbGVkWWVhcmx5O1xuICAgICAgLy8gY3VycmVudFNlbGVjdGVkUGxhbkNvc3RGb3JFbnRlcnByaXNlID0gZW50ZXJwcmlzZVBsYW5QcmljZUZvckRpc3BsYXlCaWxsZWRZZWFybHk7XG4gICAgICBudW1iZXJPZk1vbnRoc1NlcnZpY2UgPSAxMjtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gY3VycmVudFNlbGVjdGVkUGxhbkNvc3RGb3JQcm8gPSBwcm9QbGFuUHJpY2VGb3JEaXNwbGF5QmlsbGVkTW9udGhseTtcbiAgICAgIC8vIGN1cnJlbnRTZWxlY3RlZFBsYW5Db3N0Rm9yRW50ZXJwcmlzZSA9IGVudGVycHJpc2VQbGFuUHJpY2VGb3JEaXNwbGF5QmlsbGVkTW9udGhseTtcbiAgICAgIG51bWJlck9mTW9udGhzU2VydmljZSA9IDE7XG4gICAgfVxuXG4gICAgc3dpdGNoIChwcmljaW5nUGxhbkNob3Nlbikge1xuICAgICAgY2FzZSAncHJvZmVzc2lvbmFsJzpcbiAgICAgICAgaWYgKG51bWJlck9mTW9udGhzU2VydmljZSA9PT0gMSkge1xuICAgICAgICAgIHBheUJ5TW9udGhDb3N0UGVyTW9udGggPSBwcm9QbGFuUHJpY2VGb3JEaXNwbGF5QmlsbGVkTW9udGhseTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwYXlCeVllYXJDb3N0UGVyWWVhciA9IHByb1BsYW5QcmljZUZvckRpc3BsYXlCaWxsZWRZZWFybHkgKiAxMjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICBjb250YWN0U2FsZXNSZXF1aXJlZDogZmFsc2UsXG4gICAgICAgICAgbnVtYmVyT2ZNb250aHNTZXJ2aWNlLFxuICAgICAgICAgIHBheUJ5TW9udGhDb3N0UGVyTW9udGgsXG4gICAgICAgICAgcGF5QnlZZWFyQ29zdFBlclllYXIsXG4gICAgICAgICAgcGxhblByaWNlRm9yRGlzcGxheUJpbGxlZE1vbnRobHk6IHRoaXMuY29udmVydFByaWNlRnJvbVBlbm5pZXNUb0RvbGxhcnMocHJvUGxhblByaWNlRm9yRGlzcGxheUJpbGxlZE1vbnRobHkpLFxuICAgICAgICAgIHBsYW5QcmljZUZvckRpc3BsYXlCaWxsZWRZZWFybHk6IHRoaXMuY29udmVydFByaWNlRnJvbVBlbm5pZXNUb0RvbGxhcnMocHJvUGxhblByaWNlRm9yRGlzcGxheUJpbGxlZFllYXJseSksXG4gICAgICAgICAgLy8gY3VycmVudFNlbGVjdGVkUGxhbkNvc3RGb3JQYXltZW50OiB0aGlzLmNvbnZlcnRQcmljZUZyb21QZW5uaWVzVG9Eb2xsYXJzKGN1cnJlbnRTZWxlY3RlZFBsYW5Db3N0Rm9yUHJvKSxcbiAgICAgICAgfSk7XG4gICAgICAgIC8vIGNvbnNvbGUubG9nKCdsYXN0Q291cG9uUmVzcG9uc2VSZWNlaXZlZEZyb21BUEkudmFsaWRGb3JQcm9mZXNzaW9uYWxQbGFuOicsIGxhc3RDb3Vwb25SZXNwb25zZVJlY2VpdmVkRnJvbUFQSS52YWxpZEZvclByb2Zlc3Npb25hbFBsYW4pO1xuICAgICAgICBpZiAobGFzdENvdXBvblJlc3BvbnNlUmVjZWl2ZWRGcm9tQVBJLnZhbGlkRm9yUHJvZmVzc2lvbmFsUGxhbikge1xuICAgICAgICAgIC8vIExlYXZlIG90aGVyIHZhbHVlcyBpbiBwbGFjZVxuICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgaXNDb3Vwb25Db2RlQXBwbGllZDogdHJ1ZSxcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgIGlzQ291cG9uQ29kZUFwcGxpZWQ6IGZhbHNlLFxuICAgICAgICAgICAgY291cG9uRGlzY291bnRWYWx1ZTogMCxcbiAgICAgICAgICAgIGNvdXBvbkNvZGVJbnB1dFZhbHVlOiAnJyxcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ2VudGVycHJpc2UnOlxuICAgICAgICBpZiAobnVtYmVyT2ZNb250aHNTZXJ2aWNlID09PSAxKSB7XG4gICAgICAgICAgcGF5QnlNb250aENvc3RQZXJNb250aCA9IGVudGVycHJpc2VQbGFuUHJpY2VGb3JEaXNwbGF5QmlsbGVkTW9udGhseTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwYXlCeVllYXJDb3N0UGVyWWVhciA9IGVudGVycHJpc2VQbGFuUHJpY2VGb3JEaXNwbGF5QmlsbGVkWWVhcmx5ICogMTI7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgLy8gY3VycmVudFNlbGVjdGVkUGxhbkNvc3RGb3JQYXltZW50OiB0aGlzLmNvbnZlcnRQcmljZUZyb21QZW5uaWVzVG9Eb2xsYXJzKGN1cnJlbnRTZWxlY3RlZFBsYW5Db3N0Rm9yRW50ZXJwcmlzZSksXG4gICAgICAgICAgbnVtYmVyT2ZNb250aHNTZXJ2aWNlLFxuICAgICAgICAgIHBheUJ5TW9udGhDb3N0UGVyTW9udGgsXG4gICAgICAgICAgcGF5QnlZZWFyQ29zdFBlclllYXIsXG4gICAgICAgICAgcGxhblByaWNlRm9yRGlzcGxheUJpbGxlZE1vbnRobHk6IHRoaXMuY29udmVydFByaWNlRnJvbVBlbm5pZXNUb0RvbGxhcnMoZW50ZXJwcmlzZVBsYW5QcmljZUZvckRpc3BsYXlCaWxsZWRNb250aGx5KSxcbiAgICAgICAgICBwbGFuUHJpY2VGb3JEaXNwbGF5QmlsbGVkWWVhcmx5OiB0aGlzLmNvbnZlcnRQcmljZUZyb21QZW5uaWVzVG9Eb2xsYXJzKGVudGVycHJpc2VQbGFuUHJpY2VGb3JEaXNwbGF5QmlsbGVkWWVhcmx5KSxcbiAgICAgICAgfSk7XG4gICAgICAgIC8vIGNvbnNvbGUubG9nKCdsYXN0Q291cG9uUmVzcG9uc2VSZWNlaXZlZEZyb21BUEkudmFsaWRGb3JFbnRlcnByaXNlUGxhbjonLCBsYXN0Q291cG9uUmVzcG9uc2VSZWNlaXZlZEZyb21BUEkudmFsaWRGb3JFbnRlcnByaXNlUGxhbik7XG4gICAgICAgIGlmIChsYXN0Q291cG9uUmVzcG9uc2VSZWNlaXZlZEZyb21BUEkudmFsaWRGb3JFbnRlcnByaXNlUGxhbikge1xuICAgICAgICAgIC8vIExlYXZlIG90aGVyIHZhbHVlcyBpbiBwbGFjZVxuICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgY29udGFjdFNhbGVzUmVxdWlyZWQ6IGZhbHNlLFxuICAgICAgICAgICAgaXNDb3Vwb25Db2RlQXBwbGllZDogdHJ1ZSxcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgIGNvbnRhY3RTYWxlc1JlcXVpcmVkOiB0cnVlLFxuICAgICAgICAgICAgaXNDb3Vwb25Db2RlQXBwbGllZDogZmFsc2UsXG4gICAgICAgICAgICBjb3Vwb25EaXNjb3VudFZhbHVlOiAwLFxuICAgICAgICAgICAgY291cG9uQ29kZUlucHV0VmFsdWU6ICcnLFxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKG51bWJlck9mTW9udGhzU2VydmljZSA9PT0gMSkge1xuICAgICAgICAgIHBheUJ5TW9udGhDb3N0UGVyTW9udGggPSBwcm9QbGFuUHJpY2VGb3JEaXNwbGF5QmlsbGVkTW9udGhseTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwYXlCeVllYXJDb3N0UGVyWWVhciA9IHByb1BsYW5QcmljZUZvckRpc3BsYXlCaWxsZWRZZWFybHkgKiAxMjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICBjb250YWN0U2FsZXNSZXF1aXJlZDogZmFsc2UsXG4gICAgICAgICAgLy8gY3VycmVudFNlbGVjdGVkUGxhbkNvc3RGb3JQYXltZW50OiB0aGlzLmNvbnZlcnRQcmljZUZyb21QZW5uaWVzVG9Eb2xsYXJzKGN1cnJlbnRTZWxlY3RlZFBsYW5Db3N0Rm9yUHJvKSxcbiAgICAgICAgICBudW1iZXJPZk1vbnRoc1NlcnZpY2UsXG4gICAgICAgICAgcGF5QnlNb250aENvc3RQZXJNb250aCxcbiAgICAgICAgICBwYXlCeVllYXJDb3N0UGVyWWVhcixcbiAgICAgICAgICBwbGFuUHJpY2VGb3JEaXNwbGF5QmlsbGVkTW9udGhseTogdGhpcy5jb252ZXJ0UHJpY2VGcm9tUGVubmllc1RvRG9sbGFycyhwcm9QbGFuUHJpY2VGb3JEaXNwbGF5QmlsbGVkTW9udGhseSksXG4gICAgICAgICAgcGxhblByaWNlRm9yRGlzcGxheUJpbGxlZFllYXJseTogdGhpcy5jb252ZXJ0UHJpY2VGcm9tUGVubmllc1RvRG9sbGFycyhwcm9QbGFuUHJpY2VGb3JEaXNwbGF5QmlsbGVkWWVhcmx5KSxcbiAgICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgaGFuZGxlUmFkaW9Hcm91cENoYW5nZSA9IChldmVudCkgPT4ge1xuICAgIGNvbnN0IHsgcmFkaW9Hcm91cFZhbHVlLCBwbGFuUHJpY2VGb3JEaXNwbGF5QmlsbGVkTW9udGhseSwgcGxhblByaWNlRm9yRGlzcGxheUJpbGxlZFllYXJseSB9ID0gdGhpcy5zdGF0ZTtcbiAgICBpZiAocmFkaW9Hcm91cFZhbHVlICE9PSBldmVudC50YXJnZXQudmFsdWUpIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICByYWRpb0dyb3VwVmFsdWU6IGV2ZW50LnRhcmdldC52YWx1ZSB8fCAnJyxcbiAgICAgIH0pO1xuICAgIH1cbiAgICBsZXQgbnVtYmVyT2ZNb250aHNTZXJ2aWNlO1xuICAgIGxldCBwYXlCeU1vbnRoQ29zdFBlck1vbnRoID0gMDtcbiAgICBsZXQgcGF5QnlZZWFyQ29zdFBlclllYXIgPSAwO1xuICAgIGlmIChldmVudC50YXJnZXQudmFsdWUgPT09ICdhbm51YWxQbGFuUmFkaW8nKSB7XG4gICAgICBudW1iZXJPZk1vbnRoc1NlcnZpY2UgPSAxMjtcbiAgICAgIHBheUJ5TW9udGhDb3N0UGVyTW9udGggPSAwO1xuICAgICAgcGF5QnlZZWFyQ29zdFBlclllYXIgPSBwbGFuUHJpY2VGb3JEaXNwbGF5QmlsbGVkWWVhcmx5ICogMTIgKiAxMDA7XG4gICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgLy8gY3VycmVudFNlbGVjdGVkUGxhbkNvc3RGb3JQYXltZW50OiBwbGFuUHJpY2VGb3JEaXNwbGF5QmlsbGVkWWVhcmx5LFxuICAgICAgICBudW1iZXJPZk1vbnRoc1NlcnZpY2UsXG4gICAgICAgIHBheUJ5TW9udGhDb3N0UGVyTW9udGgsXG4gICAgICAgIHBheUJ5WWVhckNvc3RQZXJZZWFyLFxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG51bWJlck9mTW9udGhzU2VydmljZSA9IDE7XG4gICAgICBwYXlCeU1vbnRoQ29zdFBlck1vbnRoID0gcGxhblByaWNlRm9yRGlzcGxheUJpbGxlZE1vbnRobHkgKiAxMDA7XG4gICAgICBwYXlCeVllYXJDb3N0UGVyWWVhciA9IDA7XG4gICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgLy8gY3VycmVudFNlbGVjdGVkUGxhbkNvc3RGb3JQYXltZW50OiBwbGFuUHJpY2VGb3JEaXNwbGF5QmlsbGVkTW9udGhseSxcbiAgICAgICAgbnVtYmVyT2ZNb250aHNTZXJ2aWNlLFxuICAgICAgICBwYXlCeU1vbnRoQ29zdFBlck1vbnRoLFxuICAgICAgICBwYXlCeVllYXJDb3N0UGVyWWVhcixcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIHBheW1lbnRQcm9jZXNzZWRGdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBwYWlkQWNjb3VudFByb2Nlc3NTdGVwOiAncGF5bWVudFByb2Nlc3NlZCcsXG4gICAgfSk7XG4gIH1cblxuICBoYW5kbGVSZXNpemUgKCkge1xuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgd2luZG93V2lkdGg6IHdpbmRvdy5pbm5lcldpZHRoLFxuICAgIH0pO1xuXG4gICAgaWYgKHdpbmRvdy5pbm5lcldpZHRoIDwgNzY5KSB7XG4gICAgICBzd2l0Y2ggKHRoaXMuc3RhdGUucGFpZEFjY291bnRQcm9jZXNzU3RlcCkge1xuICAgICAgICBjYXNlICdwYXlGb3JQbGFuRGVza3RvcCc6XG4gICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IHBhaWRBY2NvdW50UHJvY2Vzc1N0ZXA6ICdzZWxlY3RQbGFuRGV0YWlsc01vYmlsZScgfSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ3NlbGVjdFBsYW5EZXRhaWxzTW9iaWxlJzpcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHdpbmRvdy5pbm5lcldpZHRoID49IDc2OSkge1xuICAgICAgc3dpdGNoICh0aGlzLnN0YXRlLnBhaWRBY2NvdW50UHJvY2Vzc1N0ZXApIHtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnc2VsZWN0UGxhbkRldGFpbHNNb2JpbGUnOlxuICAgICAgICAgIHRoaXMuc2V0U3RhdGUoeyBwYWlkQWNjb3VudFByb2Nlc3NTdGVwOiAncGF5Rm9yUGxhbkRlc2t0b3AnIH0pO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdwYXlGb3JQbGFuTW9iaWxlJzpcbiAgICAgICAgICB0aGlzLnNldFN0YXRlKHsgcGFpZEFjY291bnRQcm9jZXNzU3RlcDogJ3BheUZvclBsYW5EZXNrdG9wJyB9KTtcbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBiYWNrVG9DaG9vc2VQbGFuICgpIHtcbiAgICB0aGlzLnNldFN0YXRlKHsgcGFpZEFjY291bnRQcm9jZXNzU3RlcDogJ2Nob29zZVBsYW4nIH0pO1xuICB9XG5cbiAgcmVzZXRDb3Vwb25Db2RlICgpIHtcbiAgICBjb25zdCB7IGRlZmF1bHRQcmljaW5nLCBwcmljaW5nUGxhbkNob3NlbiwgcmFkaW9Hcm91cFZhbHVlIH0gPSB0aGlzLnN0YXRlO1xuXG4gICAgbGV0IG51bWJlck9mTW9udGhzU2VydmljZSA9IDA7XG4gICAgbGV0IHBheUJ5TW9udGhDb3N0UGVyTW9udGggPSAwO1xuICAgIGxldCBwYXlCeVllYXJDb3N0UGVyWWVhciA9IDA7XG4gICAgbGV0IHBsYW5QcmljZUZvckRpc3BsYXlCaWxsZWRNb250aGx5ID0gMDtcbiAgICBsZXQgcGxhblByaWNlRm9yRGlzcGxheUJpbGxlZFllYXJseSA9IDA7XG4gICAgLy8gbGV0IGN1cnJlbnRTZWxlY3RlZFBsYW5Db3N0Rm9yUGF5bWVudCA9IDA7XG4gICAgbGV0IGNvbnRhY3RTYWxlc1JlcXVpcmVkO1xuICAgIGlmIChwcmljaW5nUGxhbkNob3NlbiA9PT0gJ2VudGVycHJpc2UnKSB7XG4gICAgICBjb250YWN0U2FsZXNSZXF1aXJlZCA9IHRydWU7XG4gICAgICBwbGFuUHJpY2VGb3JEaXNwbGF5QmlsbGVkTW9udGhseSA9IGRlZmF1bHRQcmljaW5nLmVudGVycHJpc2VQbGFuRnVsbFByaWNlUGVyTW9udGhQYXlNb250aGx5O1xuICAgICAgcGxhblByaWNlRm9yRGlzcGxheUJpbGxlZFllYXJseSA9IGRlZmF1bHRQcmljaW5nLmVudGVycHJpc2VQbGFuRnVsbFByaWNlUGVyTW9udGhQYXlZZWFybHk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnRhY3RTYWxlc1JlcXVpcmVkID0gZmFsc2U7XG4gICAgICBwbGFuUHJpY2VGb3JEaXNwbGF5QmlsbGVkTW9udGhseSA9IGRlZmF1bHRQcmljaW5nLnByb1BsYW5GdWxsUHJpY2VQZXJNb250aFBheU1vbnRobHk7XG4gICAgICBwbGFuUHJpY2VGb3JEaXNwbGF5QmlsbGVkWWVhcmx5ID0gZGVmYXVsdFByaWNpbmcucHJvUGxhbkZ1bGxQcmljZVBlck1vbnRoUGF5WWVhcmx5O1xuICAgIH1cbiAgICBpZiAocmFkaW9Hcm91cFZhbHVlID09PSAnYW5udWFsUGxhblJhZGlvJykge1xuICAgICAgLy8gY3VycmVudFNlbGVjdGVkUGxhbkNvc3RGb3JQYXltZW50ID0gcGxhblByaWNlRm9yRGlzcGxheUJpbGxlZFllYXJseTtcbiAgICAgIHBheUJ5WWVhckNvc3RQZXJZZWFyID0gMTIgKiBwbGFuUHJpY2VGb3JEaXNwbGF5QmlsbGVkWWVhcmx5O1xuICAgICAgbnVtYmVyT2ZNb250aHNTZXJ2aWNlID0gMTI7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGN1cnJlbnRTZWxlY3RlZFBsYW5Db3N0Rm9yUGF5bWVudCA9IHBsYW5QcmljZUZvckRpc3BsYXlCaWxsZWRNb250aGx5O1xuICAgICAgcGF5QnlNb250aENvc3RQZXJNb250aCA9IHBsYW5QcmljZUZvckRpc3BsYXlCaWxsZWRNb250aGx5O1xuICAgICAgbnVtYmVyT2ZNb250aHNTZXJ2aWNlID0gMTtcbiAgICB9XG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBjb250YWN0U2FsZXNSZXF1aXJlZCxcbiAgICAgIGlzQ291cG9uQ29kZUFwcGxpZWQ6IGZhbHNlLFxuICAgICAgY291cG9uQ29kZUlucHV0VmFsdWU6ICcnLFxuICAgICAgLy8gY3VycmVudFNlbGVjdGVkUGxhbkNvc3RGb3JQYXltZW50OiB0aGlzLmNvbnZlcnRQcmljZUZyb21QZW5uaWVzVG9Eb2xsYXJzKGN1cnJlbnRTZWxlY3RlZFBsYW5Db3N0Rm9yUGF5bWVudCksXG4gICAgICBudW1iZXJPZk1vbnRoc1NlcnZpY2UsXG4gICAgICBwYXlCeU1vbnRoQ29zdFBlck1vbnRoLFxuICAgICAgcGF5QnlZZWFyQ29zdFBlclllYXIsXG4gICAgICBwbGFuUHJpY2VGb3JEaXNwbGF5QmlsbGVkTW9udGhseTogdGhpcy5jb252ZXJ0UHJpY2VGcm9tUGVubmllc1RvRG9sbGFycyhwbGFuUHJpY2VGb3JEaXNwbGF5QmlsbGVkTW9udGhseSksXG4gICAgICBwbGFuUHJpY2VGb3JEaXNwbGF5QmlsbGVkWWVhcmx5OiB0aGlzLmNvbnZlcnRQcmljZUZyb21QZW5uaWVzVG9Eb2xsYXJzKHBsYW5QcmljZUZvckRpc3BsYXlCaWxsZWRZZWFybHkpLFxuICAgICAgbGFzdENvdXBvblJlc3BvbnNlUmVjZWl2ZWRGcm9tQVBJOiB7fSxcbiAgICAgIGNvdXBvbkRpc2NvdW50VmFsdWU6IDAsXG4gICAgfSk7XG4gIH1cblxuICBjaGVja0NvdXBvbkNvZGVWYWxpZGl0eSAoKSB7XG4gICAgY29uc3QgeyBjb3Vwb25Db2RlSW5wdXRWYWx1ZSB9ID0gdGhpcy5zdGF0ZTtcbiAgICBEb25hdGVBY3Rpb25zLmNvdXBvblN1bW1hcnlSZXRyaWV2ZShjb3Vwb25Db2RlSW5wdXRWYWx1ZSk7XG4gIH1cblxuICBjbG9zZVBhaWRBY2NvdW50VXBncmFkZU1vZGFsICgpIHtcbiAgICB0aGlzLnByb3BzLnRvZ2dsZUZ1bmN0aW9uKHRoaXMuc3RhdGUucGF0aG5hbWUpO1xuICB9XG5cbiAgY29udmVydFByaWNlRnJvbVBlbm5pZXNUb0RvbGxhcnMgKHByaWNlSW5QZW5uaWVzKSB7XG4gICAgaWYgKCFwcmljZUluUGVubmllcykge1xuICAgICAgcmV0dXJuIDA7XG4gICAgfVxuICAgIGxldCBwcmljZUluUGVubmllc0ludCA9IDA7XG4gICAgaWYgKHByaWNlSW5QZW5uaWVzID09PSBwYXJzZUludChwcmljZUluUGVubmllcywgMTApKSB7XG4gICAgICBwcmljZUluUGVubmllc0ludCA9IHByaWNlSW5QZW5uaWVzO1xuICAgIH0gZWxzZSB7XG4gICAgICBwcmljZUluUGVubmllc0ludCA9IGV4dHJhY3ROdW1iZXIocHJpY2VJblBlbm5pZXMpO1xuICAgIH1cbiAgICBjb25zdCBwcmljZUluRG9sbGFycyA9IHByaWNlSW5QZW5uaWVzSW50IC8gMTAwO1xuICAgIHJldHVybiBudW1iZXJXaXRoQ29tbWFzKHByaWNlSW5Eb2xsYXJzKTtcbiAgfVxuXG4gIGNvbnZlcnRQcmljZUZyb21Eb2xsYXJzU3RyaW5nVG9QZW5uaWVzSW50IChwcmljZUluRG9sbGFyc1N0cmluZykge1xuICAgIGlmICghcHJpY2VJbkRvbGxhcnNTdHJpbmcpIHtcbiAgICAgIHJldHVybiAwO1xuICAgIH1cbiAgICBjb25zdCBwcmljZUluRG9sbGFyc0ludCA9IGV4dHJhY3ROdW1iZXIocHJpY2VJbkRvbGxhcnNTdHJpbmcpO1xuICAgIHJldHVybiBwcmljZUluRG9sbGFyc0ludCAqIDEwMDtcbiAgfVxuXG4gIHJlbmRlciAoKSB7XG4gICAgcmVuZGVyTG9nKCdQYWlkQWNjb3VudFVwZ3JhZGVNb2RhbCcpOyAgLy8gU2V0IExPR19SRU5ERVJfRVZFTlRTIHRvIGxvZyBhbGwgcmVuZGVyc1xuICAgIGNvbnN0IHsgY2xhc3NlcyB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCB7XG4gICAgICBhY3RpdmVQYWlkUGxhbkNob3NlbiwgYWN0aXZlUGFpZFBsYW5DaG9zZW5EaXNwbGF5LCBhbW91bnRQYWlkVmlhU3RyaXBlLCBudW1iZXJPZk1vbnRoc1NlcnZpY2UsXG4gICAgICBwYXlCeU1vbnRoQ29zdFBlck1vbnRoLFxuICAgICAgcGF5QnlZZWFyQ29zdFBlclllYXIsXG4gICAgICBjb250YWN0U2FsZXNSZXF1aXJlZCwgcmFkaW9Hcm91cFZhbHVlLCBjb3Vwb25Db2RlSW5wdXRWYWx1ZSwgY291cG9uRGlzY291bnRWYWx1ZSxcbiAgICAgIGlzQ291cG9uQ29kZUFwcGxpZWQsIHBhaWRBY2NvdW50UHJvY2Vzc1N0ZXAsIHByaWNpbmdQbGFuQ2hvc2VuLCBjb3Vwb25Db2RlRXJyb3IsIHBsYW5QcmljZUZvckRpc3BsYXlCaWxsZWRNb250aGx5LFxuICAgICAgcGxhblByaWNlRm9yRGlzcGxheUJpbGxlZFllYXJseSxcbiAgICB9ID0gdGhpcy5zdGF0ZTtcbiAgICAvLyBjb25zb2xlLmxvZygnY3VycmVudFNlbGVjdGVkUGxhbkNvc3RGb3JQYXltZW50OicsIGN1cnJlbnRTZWxlY3RlZFBsYW5Db3N0Rm9yUGF5bWVudCk7XG4gICAgLy8gY29uc29sZS5sb2codGhpcy5zdGF0ZSk7XG5cbiAgICBsZXQgbW9kYWxUaXRsZSA9ICcnO1xuICAgIGxldCBiYWNrVG9CdXR0b247XG4gICAgbGV0IG1vZGFsSHRtbENvbnRlbnRzID0gPHNwYW4gLz47XG4gICAgY29uc3QgcGxhbk5hbWVUaXRsZSA9IGAke3ByaWNpbmdQbGFuQ2hvc2VufSBQbGFuYDtcbiAgICBjb25zdCBjb3Vwb25EaXNjb3VudFZhbHVlU3RyaW5nID0gYCAkJHtjb3Vwb25EaXNjb3VudFZhbHVlfWA7XG5cbiAgICBzd2l0Y2ggKHBhaWRBY2NvdW50UHJvY2Vzc1N0ZXApIHtcbiAgICAgIGNhc2UgJ2Nob29zZVBsYW4nOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgbW9kYWxUaXRsZSA9ICdDaG9vc2UgWW91ciBQbGFuJztcbiAgICAgICAgbW9kYWxIdG1sQ29udGVudHMgPSAoXG4gICAgICAgICAgPFByaWNpbmdcbiAgICAgICAgICAgIGluaXRpYWxQcmljaW5nQ2hvaWNlPVwiY2FtcGFpZ25zXCJcbiAgICAgICAgICAgIGluaXRpYWxQcmljaW5nUGxhbj17dGhpcy5zdGF0ZS5wcmljaW5nUGxhbkNob3NlbiA/IHRoaXMuc3RhdGUucHJpY2luZ1BsYW5DaG9zZW4gOiB0aGlzLnByb3BzLmluaXRpYWxQcmljaW5nUGxhbn1cbiAgICAgICAgICAgIG1vZGFsRGlzcGxheU1vZGVcbiAgICAgICAgICAgIHByaWNpbmdQbGFuQ2hvc2VuRnVuY3Rpb249e3RoaXMucHJpY2luZ1BsYW5DaG9zZW5GdW5jdGlvbn1cbiAgICAgICAgICAvPlxuICAgICAgICApO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ3NlbGVjdFBsYW5EZXRhaWxzTW9iaWxlJzpcbiAgICAgICAgYmFja1RvQnV0dG9uID0gKFxuICAgICAgICAgIDxCdXR0b24gY2xhc3NOYW1lPXtjbGFzc2VzLmJhY2tUb0J1dHRvbn0gb25DbGljaz17dGhpcy5iYWNrVG9DaG9vc2VQbGFufT5cbiAgICAgICAgICAgIHtpc0lPUygpID8gPEFycm93QmFja0lvcyAvPiA6IDxBcnJvd0JhY2sgLz59XG4gICAgICAgICAgICBDaG9vc2UgUGxhblxuICAgICAgICAgIDwvQnV0dG9uPlxuICAgICAgICApO1xuICAgICAgICBtb2RhbFRpdGxlID0gJ0JpbGxpbmcgT3B0aW9ucyc7XG4gICAgICAgIG1vZGFsSHRtbENvbnRlbnRzID0gKFxuICAgICAgICAgIDxNb2JpbGVXcmFwcGVyIGNsYXNzTmFtZT1cInUtZnVsbC1oZWlnaHRcIj5cbiAgICAgICAgICAgIDxGbGV4U2VjdGlvbk9uZT5cbiAgICAgICAgICAgICAgPFNlY3Rpb25UaXRsZT5cbiAgICAgICAgICAgICAgICB7cGxhbk5hbWVUaXRsZX1cbiAgICAgICAgICAgICAgPC9TZWN0aW9uVGl0bGU+XG4gICAgICAgICAgICAgIHtpc0NvdXBvbkNvZGVBcHBsaWVkID8gKFxuICAgICAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17Y2xhc3Nlcy5jb3Vwb25BbGVydH1cbiAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICBDb3Vwb24gQXBwbGllZC4gRGVkdWN0ZWRcbiAgICAgICAgICAgICAgICAgIHtjb3Vwb25EaXNjb3VudFZhbHVlU3RyaW5nfVxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICApIDogbnVsbH1cbiAgICAgICAgICAgICAge2NvdXBvbkNvZGVFcnJvciA/IChcbiAgICAgICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2NsYXNzZXMuY291cG9uQWxlcnRFcnJvcn1cbiAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICBJbnZhbGlkIENvdXBvbiBDb2RlXG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICkgOiBudWxsfVxuICAgICAgICAgICAgICB7YWN0aXZlUGFpZFBsYW5DaG9zZW4gJiYgKFxuICAgICAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17Y2xhc3Nlcy5jb3Vwb25BbGVydEVycm9yfVxuICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgIFlvdSBhcmUgYWxyZWFkeSBzdWJzY3JpYmVkIHRvIGFcbiAgICAgICAgICAgICAgICAgIHsnICd9XG4gICAgICAgICAgICAgICAgICB7YWN0aXZlUGFpZFBsYW5DaG9zZW5EaXNwbGF5fVxuICAgICAgICAgICAgICAgICAgeycgJ31cbiAgICAgICAgICAgICAgICAgIFBsYW4uXG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAgIHtjb250YWN0U2FsZXNSZXF1aXJlZCA/IChcbiAgICAgICAgICAgICAgICA8T3BlbkV4dGVybmFsV2ViU2l0ZVxuICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwib3Blbi13ZWItc2l0ZVwiXG4gICAgICAgICAgICAgICAgICB1cmw9XCJodHRwczovL2hlbHAud2V2b3RlLnVzL2hjL2VuLXVzL3JlcXVlc3RzL25ld1wiXG4gICAgICAgICAgICAgICAgICB0YXJnZXQ9XCJfYmxhbmtcIlxuICAgICAgICAgICAgICAgICAgYm9keT17PGRpdj5Db250YWN0IFNhbGVzIGZvciBFbnRlcnByaXNlIENvdXBvbiBDb2RlPC9kaXY+fVxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICAgICAgPD5cbiAgICAgICAgICAgICAgICAgIDxGaWVsZHNldCBkaXNhYmxlZE1vZGU9eyhyYWRpb0dyb3VwVmFsdWUgIT09ICdhbm51YWxQbGFuUmFkaW8nKX0+XG4gICAgICAgICAgICAgICAgICAgIDxGb3JtQ29udHJvbCBjbGFzc2VzPXt7IHJvb3Q6IGNsYXNzZXMuZm9ybUNvbnRyb2wgfX0+XG4gICAgICAgICAgICAgICAgICAgICAgPFJhZGlvR3JvdXBcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU9XCJwbGFuUmFkaW9Hcm91cFwiXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT17cmFkaW9Hcm91cFZhbHVlfVxuICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e3RoaXMuaGFuZGxlUmFkaW9Hcm91cENoYW5nZX1cbiAgICAgICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgICAgICA8Rm9ybUNvbnRyb2xMYWJlbFxuICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc2VzPXt7IHJvb3Q6IGNsYXNzZXMuZm9ybUNvbnRyb2xMYWJlbCwgbGFiZWw6IGNsYXNzZXMuZm9ybUNvbnRyb2xMYWJlbFNwYW4gfX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9XCJhbm51YWxQbGFuUmFkaW9cIlxuICAgICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sPXs8UmFkaW8gY29sb3I9XCJwcmltYXJ5XCIgY2xhc3Nlcz17eyByb290OiBjbGFzc2VzLnJhZGlvQnV0dG9uIH19IC8+fVxuICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbD17KFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDw+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8UHJpY2VMYWJlbERvbGxhclNpZ24+JDwvUHJpY2VMYWJlbERvbGxhclNpZ24+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8UHJpY2VMYWJlbD57cGxhblByaWNlRm9yRGlzcGxheUJpbGxlZFllYXJseX08L1ByaWNlTGFiZWw+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8UHJpY2VMYWJlbFN1YlRleHQ+IC9tb250aDwvUHJpY2VMYWJlbFN1YlRleHQ+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8TW9iaWxlUHJpY2luZ1BsYW5OYW1lPkJpbGxlZCBZZWFybHk8L01vYmlsZVByaWNpbmdQbGFuTmFtZT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Lz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgb25DbGljaz17dGhpcy5oYW5kbGVSYWRpb0dyb3VwQ2hvaWNlU3ViZG9tYWlufVxuICAgICAgICAgICAgICAgICAgICAgICAgICBjaGVja2VkPXtyYWRpb0dyb3VwVmFsdWUgPT09ICdhbm51YWxQbGFuUmFkaW8nfVxuICAgICAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgICAgICA8L1JhZGlvR3JvdXA+XG4gICAgICAgICAgICAgICAgICAgIDwvRm9ybUNvbnRyb2w+XG4gICAgICAgICAgICAgICAgICA8L0ZpZWxkc2V0PlxuICAgICAgICAgICAgICAgICAgPEZpZWxkc2V0IGRpc2FibGVkTW9kZT17KHJhZGlvR3JvdXBWYWx1ZSAhPT0gJ21vbnRobHlQbGFuUmFkaW8nKX0+XG4gICAgICAgICAgICAgICAgICAgIDxGb3JtQ29udHJvbCBjbGFzc2VzPXt7IHJvb3Q6IGNsYXNzZXMuZm9ybUNvbnRyb2wgfX0+XG4gICAgICAgICAgICAgICAgICAgICAgPFJhZGlvR3JvdXBcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU9XCJwbGFuUmFkaW9Hcm91cFwiXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT17cmFkaW9Hcm91cFZhbHVlfVxuICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e3RoaXMuaGFuZGxlUmFkaW9Hcm91cENoYW5nZX1cbiAgICAgICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgICAgICA8Rm9ybUNvbnRyb2xMYWJlbFxuICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc2VzPXt7IHJvb3Q6IGNsYXNzZXMuZm9ybUNvbnRyb2xMYWJlbCwgbGFiZWw6IGNsYXNzZXMuZm9ybUNvbnRyb2xMYWJlbFNwYW4gfX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9XCJtb250aGx5UGxhblJhZGlvXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbD17PFJhZGlvIGNvbG9yPVwicHJpbWFyeVwiIGNsYXNzZXM9e3sgcm9vdDogY2xhc3Nlcy5yYWRpb0J1dHRvbiB9fSAvPn1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw9eyhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPFByaWNlTGFiZWxEb2xsYXJTaWduPiQ8L1ByaWNlTGFiZWxEb2xsYXJTaWduPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPFByaWNlTGFiZWw+e3BsYW5QcmljZUZvckRpc3BsYXlCaWxsZWRNb250aGx5fTwvUHJpY2VMYWJlbD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxQcmljZUxhYmVsU3ViVGV4dD4gL21vbnRoPC9QcmljZUxhYmVsU3ViVGV4dD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxNb2JpbGVQcmljaW5nUGxhbk5hbWU+QmlsbGVkIE1vbnRobHk8L01vYmlsZVByaWNpbmdQbGFuTmFtZT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Lz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgb25DbGljaz17dGhpcy5oYW5kbGVSYWRpb0dyb3VwQ2hvaWNlU3ViZG9tYWlufVxuICAgICAgICAgICAgICAgICAgICAgICAgICBjaGVja2VkPXtyYWRpb0dyb3VwVmFsdWUgPT09ICdtb250aGx5UGxhblJhZGlvJ31cbiAgICAgICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICAgICAgPC9SYWRpb0dyb3VwPlxuICAgICAgICAgICAgICAgICAgICA8L0Zvcm1Db250cm9sPlxuICAgICAgICAgICAgICAgICAgPC9GaWVsZHNldD5cbiAgICAgICAgICAgICAgICA8Lz5cbiAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgICAgPGJyIC8+XG4gICAgICAgICAgICAgIDxTZWN0aW9uVGl0bGU+Q291cG9uIENvZGU8L1NlY3Rpb25UaXRsZT5cbiAgICAgICAgICAgICAgPE91dGxpbmVkSW5wdXRcbiAgICAgICAgICAgICAgICBjbGFzc2VzPXt7IHJvb3Q6IGlzQ291cG9uQ29kZUFwcGxpZWQgPyBjbGFzc2VzLnRleHRGaWVsZENvdXBvbkFwcGxpZWQgOiBjbGFzc2VzLnRleHRGaWVsZCwgaW5wdXQ6IGNvdXBvbkNvZGVJbnB1dFZhbHVlICE9PSAnJyA/IGNsYXNzZXMudGV4dEZpZWxkSW5wdXRVcHBlcmNhc2UgOiBjbGFzc2VzLnRleHRGaWVsZElucHV0IH19XG4gICAgICAgICAgICAgICAgaW5wdXRQcm9wcz17eyB9fVxuICAgICAgICAgICAgICAgIC8vIG1hcmdpbj1cIm5vcm1hbFwiXG4gICAgICAgICAgICAgICAgLy8gdmFyaWFudD1cIm91dGxpbmVkXCJcbiAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj1cIkVudGVyIEhlcmUuLi5cIlxuICAgICAgICAgICAgICAgIGZ1bGxXaWR0aFxuICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXt0aGlzLm9uQ291cG9uSW5wdXRDaGFuZ2V9XG4gICAgICAgICAgICAgICAgZGlzYWJsZWQ9e2lzQ291cG9uQ29kZUFwcGxpZWR9XG4gICAgICAgICAgICAgICAgdmFsdWU9e2NvdXBvbkNvZGVJbnB1dFZhbHVlfVxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICB7aXNDb3Vwb25Db2RlQXBwbGllZCA/IChcbiAgICAgICAgICAgICAgICA8PlxuICAgICAgICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2NsYXNzZXMuY291cG9uQWxlcnR9XG4gICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgIEFQUExJRURcbiAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgPEJ1dHRvbiBzaXplPVwic21hbGxcIiBjbGFzc05hbWU9e2NsYXNzZXMucmVzZXRCdXR0b259IG9uQ2xpY2s9e3RoaXMucmVzZXRDb3Vwb25Db2RlfT5cbiAgICAgICAgICAgICAgICAgICAgVXNlIG5ldyBjb2RlXG4gICAgICAgICAgICAgICAgICA8L0J1dHRvbj5cbiAgICAgICAgICAgICAgICA8Lz5cbiAgICAgICAgICAgICAgKSA6IChcbiAgICAgICAgICAgICAgICA8QnV0dG9uXG4gICAgICAgICAgICAgICAgICBkaXNhYmxlZD17Y291cG9uQ29kZUlucHV0VmFsdWUgPT09ICcnfVxuICAgICAgICAgICAgICAgICAgZnVsbFdpZHRoXG4gICAgICAgICAgICAgICAgICB2YXJpYW50PVwiY29udGFpbmVkXCJcbiAgICAgICAgICAgICAgICAgIG1hcmdpbj1cIm5vcm1hbFwiXG4gICAgICAgICAgICAgICAgICBjb2xvcj1cInByaW1hcnlcIlxuICAgICAgICAgICAgICAgICAgY2xhc3Nlcz17eyByb290OiBjbGFzc2VzLmNvdXBvbkJ1dHRvbiB9fVxuICAgICAgICAgICAgICAgICAgb25DbGljaz17dGhpcy5jaGVja0NvdXBvbkNvZGVWYWxpZGl0eX1cbiAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICBBUFBMWVxuICAgICAgICAgICAgICAgIDwvQnV0dG9uPlxuICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgPC9GbGV4U2VjdGlvbk9uZT5cbiAgICAgICAgICAgIDxGbGV4U2VjdGlvblR3bz5cbiAgICAgICAgICAgICAgPEJ1dHRvblxuICAgICAgICAgICAgICAgIGNvbG9yPVwicHJpbWFyeVwiXG4gICAgICAgICAgICAgICAgdmFyaWFudD1cImNvbnRhaW5lZFwiXG4gICAgICAgICAgICAgICAgY2xhc3Nlcz17eyByb290OiBjbGFzc2VzLm5leHRCdXR0b24gfX1cbiAgICAgICAgICAgICAgICBvbkNsaWNrPXt0aGlzLm1vdmVUb1BheUZvclBsYW5TdGVwfVxuICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgTkVYVFxuICAgICAgICAgICAgICA8L0J1dHRvbj5cbiAgICAgICAgICAgIDwvRmxleFNlY3Rpb25Ud28+XG4gICAgICAgICAgPC9Nb2JpbGVXcmFwcGVyPlxuICAgICAgICApO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ3BheUZvclBsYW5Nb2JpbGUnOlxuICAgICAgICBiYWNrVG9CdXR0b24gPSAoXG4gICAgICAgICAgPEJ1dHRvbiBjbGFzc05hbWU9e2NsYXNzZXMuYmFja1RvQnV0dG9ufSBvbkNsaWNrPXt0aGlzLmJhY2tUb0FwcGx5Q291cG9ufT5cbiAgICAgICAgICAgIHtpc0lPUygpID8gPEFycm93QmFja0lvcyAvPiA6IDxBcnJvd0JhY2sgLz59XG4gICAgICAgICAgICBCaWxsaW5nIE9wdGlvbnNcbiAgICAgICAgICA8L0J1dHRvbj5cbiAgICAgICAgKTtcbiAgICAgICAgbW9kYWxUaXRsZSA9ICdDcmVkaXQgQ2FyZCc7XG4gICAgICAgIG1vZGFsSHRtbENvbnRlbnRzID0gKFxuICAgICAgICAgIDxNb2JpbGVXcmFwcGVyPlxuICAgICAgICAgICAgPFN0cmlwZVByb3ZpZGVyIGFwaUtleT17d2ViQXBwQ29uZmlnLlNUUklQRV9BUElfS0VZfT5cbiAgICAgICAgICAgICAgPEVsZW1lbnRzPlxuICAgICAgICAgICAgICAgIDxTZXR0aW5nc1N0cmlwZVBheW1lbnRcbiAgICAgICAgICAgICAgICAgIG51bWJlck9mTW9udGhzU2VydmljZT17bnVtYmVyT2ZNb250aHNTZXJ2aWNlfVxuICAgICAgICAgICAgICAgICAgcGF5QnlNb250aENvc3RQZXJNb250aD17cGF5QnlNb250aENvc3RQZXJNb250aH1cbiAgICAgICAgICAgICAgICAgIHBheUJ5WWVhckNvc3RQZXJZZWFyPXtwYXlCeVllYXJDb3N0UGVyWWVhcn1cbiAgICAgICAgICAgICAgICAgIHBheW1lbnRQcm9jZXNzZWRGdW5jdGlvbj17dGhpcy5wYXltZW50UHJvY2Vzc2VkRnVuY3Rpb259XG4gICAgICAgICAgICAgICAgICBwcmljaW5nUGxhbkNob3Nlbj17cHJpY2luZ1BsYW5DaG9zZW59XG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgPC9FbGVtZW50cz5cbiAgICAgICAgICAgIDwvU3RyaXBlUHJvdmlkZXI+XG4gICAgICAgICAgPC9Nb2JpbGVXcmFwcGVyPlxuICAgICAgICApO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ3BheUZvclBsYW5EZXNrdG9wJzpcbiAgICAgICAgYmFja1RvQnV0dG9uID0gKFxuICAgICAgICAgIDxCdXR0b24gY2xhc3NOYW1lPXtjbGFzc2VzLmJhY2tUb0J1dHRvbn0gb25DbGljaz17dGhpcy5iYWNrVG9DaG9vc2VQbGFufT5cbiAgICAgICAgICAgIHtpc0lPUygpID8gPEFycm93QmFja0lvcyAvPiA6IDxBcnJvd0JhY2sgLz59XG4gICAgICAgICAgICBDaG9vc2UgUGxhblxuICAgICAgICAgIDwvQnV0dG9uPlxuICAgICAgICApO1xuICAgICAgICBtb2RhbFRpdGxlID0gJ1BheW1lbnQnO1xuICAgICAgICBtb2RhbEh0bWxDb250ZW50cyA9IChcbiAgICAgICAgICA8Um93IGNsYXNzTmFtZT1cInJvd1wiPlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb2wgY29sLTYgcC0wXCI+XG4gICAgICAgICAgICAgIDxXcmFwcGVyTGVmdD5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInUtdGNcIj5cbiAgICAgICAgICAgICAgICAgIDxTZWN0aW9uVGl0bGU+XG4gICAgICAgICAgICAgICAgICAgIHtwbGFuTmFtZVRpdGxlfVxuICAgICAgICAgICAgICAgICAgPC9TZWN0aW9uVGl0bGU+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAge2lzQ291cG9uQ29kZUFwcGxpZWQgPyAoXG4gICAgICAgICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17Y2xhc3Nlcy5jb3Vwb25BbGVydH1cbiAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgQ291cG9uIEFwcGxpZWQuIERlZHVjdGVkXG4gICAgICAgICAgICAgICAgICAgIHtjb3Vwb25EaXNjb3VudFZhbHVlU3RyaW5nfVxuICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgKSA6IG51bGx9XG4gICAgICAgICAgICAgICAge2NvdXBvbkNvZGVFcnJvciA/IChcbiAgICAgICAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtjbGFzc2VzLmNvdXBvbkFsZXJ0RXJyb3J9XG4gICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgIEludmFsaWQgQ291cG9uIENvZGVcbiAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICkgOiBudWxsfVxuICAgICAgICAgICAgICAgIHthY3RpdmVQYWlkUGxhbkNob3NlbiAmJiAoXG4gICAgICAgICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17Y2xhc3Nlcy5jb3Vwb25BbGVydEVycm9yfVxuICAgICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICBZb3UgYXJlIGFscmVhZHkgc3Vic2NyaWJlZCB0byBhXG4gICAgICAgICAgICAgICAgICAgIHsnICd9XG4gICAgICAgICAgICAgICAgICAgIHthY3RpdmVQYWlkUGxhbkNob3NlbkRpc3BsYXl9XG4gICAgICAgICAgICAgICAgICAgIHsnICd9XG4gICAgICAgICAgICAgICAgICAgIFBsYW4uXG4gICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgICAgIHtjb250YWN0U2FsZXNSZXF1aXJlZCA/IChcbiAgICAgICAgICAgICAgICAgIDxPcGVuRXh0ZXJuYWxXZWJTaXRlXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cIm9wZW4td2ViLXNpdGVcIlxuICAgICAgICAgICAgICAgICAgICB1cmw9XCJodHRwczovL2hlbHAud2V2b3RlLnVzL2hjL2VuLXVzL3JlcXVlc3RzL25ld1wiXG4gICAgICAgICAgICAgICAgICAgIHRhcmdldD1cIl9ibGFua1wiXG4gICAgICAgICAgICAgICAgICAgIGJvZHk9ezxkaXY+Q29udGFjdCBTYWxlcyBmb3IgRW50ZXJwcmlzZSBDb3Vwb24gQ29kZTwvZGl2Pn1cbiAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgKSA6IChcbiAgICAgICAgICAgICAgICAgIDw+XG4gICAgICAgICAgICAgICAgICAgIDxGaWVsZHNldCBkaXNhYmxlZE1vZGU9eyhyYWRpb0dyb3VwVmFsdWUgIT09ICdhbm51YWxQbGFuUmFkaW8nKX0+XG4gICAgICAgICAgICAgICAgICAgICAgPExlZ2VuZD5cbiAgICAgICAgICAgICAgICAgICAgICAgIEJpbGxlZCBZZWFybHlcbiAgICAgICAgICAgICAgICAgICAgICA8L0xlZ2VuZD5cbiAgICAgICAgICAgICAgICAgICAgICA8Rm9ybUNvbnRyb2wgY2xhc3Nlcz17eyByb290OiBjbGFzc2VzLmZvcm1Db250cm9sIH19PlxuICAgICAgICAgICAgICAgICAgICAgICAgPFJhZGlvR3JvdXBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZT1cInBsYW5SYWRpb0dyb3VwXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9e3JhZGlvR3JvdXBWYWx1ZX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e3RoaXMuaGFuZGxlUmFkaW9Hcm91cENoYW5nZX1cbiAgICAgICAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgPEZvcm1Db250cm9sTGFiZWxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc2VzPXt7IHJvb3Q6IGNsYXNzZXMuZm9ybUNvbnRyb2xMYWJlbCB9fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPVwiYW5udWFsUGxhblJhZGlvXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sPXs8UmFkaW8gY29sb3I9XCJwcmltYXJ5XCIgY2xhc3Nlcz17eyByb290OiBjbGFzc2VzLnJhZGlvQnV0dG9uIH19IC8+fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsPXsoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8UHJpY2VMYWJlbERvbGxhclNpZ24+JDwvUHJpY2VMYWJlbERvbGxhclNpZ24+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxQcmljZUxhYmVsPntwbGFuUHJpY2VGb3JEaXNwbGF5QmlsbGVkWWVhcmx5fTwvUHJpY2VMYWJlbD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPFByaWNlTGFiZWxTdWJUZXh0PiAvbW9udGg8L1ByaWNlTGFiZWxTdWJUZXh0PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC8+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXt0aGlzLmhhbmRsZVJhZGlvR3JvdXBDaG9pY2VTdWJkb21haW59XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hlY2tlZD17cmFkaW9Hcm91cFZhbHVlID09PSAnYW5udWFsUGxhblJhZGlvJ31cbiAgICAgICAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvUmFkaW9Hcm91cD5cbiAgICAgICAgICAgICAgICAgICAgICA8L0Zvcm1Db250cm9sPlxuICAgICAgICAgICAgICAgICAgICA8L0ZpZWxkc2V0PlxuICAgICAgICAgICAgICAgICAgICA8RmllbGRzZXQgZGlzYWJsZWRNb2RlPXsocmFkaW9Hcm91cFZhbHVlICE9PSAnbW9udGhseVBsYW5SYWRpbycpfT5cbiAgICAgICAgICAgICAgICAgICAgICA8TGVnZW5kPlxuICAgICAgICAgICAgICAgICAgICAgICAgQmlsbGVkIE1vbnRobHlcbiAgICAgICAgICAgICAgICAgICAgICA8L0xlZ2VuZD5cbiAgICAgICAgICAgICAgICAgICAgICA8Rm9ybUNvbnRyb2wgY2xhc3Nlcz17eyByb290OiBjbGFzc2VzLmZvcm1Db250cm9sIH19PlxuICAgICAgICAgICAgICAgICAgICAgICAgPFJhZGlvR3JvdXBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZT1cInBsYW5SYWRpb0dyb3VwXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9e3JhZGlvR3JvdXBWYWx1ZX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e3RoaXMuaGFuZGxlUmFkaW9Hcm91cENoYW5nZX1cbiAgICAgICAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgPEZvcm1Db250cm9sTGFiZWxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc2VzPXt7IHJvb3Q6IGNsYXNzZXMuZm9ybUNvbnRyb2xMYWJlbCB9fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPVwibW9udGhseVBsYW5SYWRpb1wiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbD17PFJhZGlvIGNvbG9yPVwicHJpbWFyeVwiIGNsYXNzZXM9e3sgcm9vdDogY2xhc3Nlcy5yYWRpb0J1dHRvbiB9fSAvPn1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbD17KFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPFByaWNlTGFiZWxEb2xsYXJTaWduPiQ8L1ByaWNlTGFiZWxEb2xsYXJTaWduPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8UHJpY2VMYWJlbD57cGxhblByaWNlRm9yRGlzcGxheUJpbGxlZE1vbnRobHl9PC9QcmljZUxhYmVsPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8UHJpY2VMYWJlbFN1YlRleHQ+IC9tb250aDwvUHJpY2VMYWJlbFN1YlRleHQ+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Lz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9e3RoaXMuaGFuZGxlUmFkaW9Hcm91cENob2ljZVN1YmRvbWFpbn1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGVja2VkPXtyYWRpb0dyb3VwVmFsdWUgPT09ICdtb250aGx5UGxhblJhZGlvJ31cbiAgICAgICAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvUmFkaW9Hcm91cD5cbiAgICAgICAgICAgICAgICAgICAgICA8L0Zvcm1Db250cm9sPlxuICAgICAgICAgICAgICAgICAgICA8L0ZpZWxkc2V0PlxuICAgICAgICAgICAgICAgICAgPC8+XG4gICAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgICAgICA8YnIgLz5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInUtdGNcIj5cbiAgICAgICAgICAgICAgICAgIDxTZWN0aW9uVGl0bGU+Q291cG9uIENvZGU8L1NlY3Rpb25UaXRsZT5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8T3V0bGluZWRJbnB1dFxuICAgICAgICAgICAgICAgICAgY2xhc3Nlcz17eyByb290OiBpc0NvdXBvbkNvZGVBcHBsaWVkID8gY2xhc3Nlcy50ZXh0RmllbGRDb3Vwb25BcHBsaWVkIDogY2xhc3Nlcy50ZXh0RmllbGQsIGlucHV0OiBjb3Vwb25Db2RlSW5wdXRWYWx1ZSAhPT0gJycgPyBjbGFzc2VzLnRleHRGaWVsZElucHV0VXBwZXJjYXNlIDogY2xhc3Nlcy50ZXh0RmllbGRJbnB1dCB9fVxuICAgICAgICAgICAgICAgICAgaW5wdXRQcm9wcz17eyB9fVxuICAgICAgICAgICAgICAgICAgLy8gbWFyZ2luPVwibm9ybWFsXCJcbiAgICAgICAgICAgICAgICAgIC8vIHZhcmlhbnQ9XCJvdXRsaW5lZFwiXG4gICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj1cIkVudGVyIEhlcmUuLi5cIlxuICAgICAgICAgICAgICAgICAgZnVsbFdpZHRoXG4gICAgICAgICAgICAgICAgICBvbkNoYW5nZT17dGhpcy5vbkNvdXBvbklucHV0Q2hhbmdlfVxuICAgICAgICAgICAgICAgICAgZGlzYWJsZWQ9e2lzQ291cG9uQ29kZUFwcGxpZWR9XG4gICAgICAgICAgICAgICAgICB2YWx1ZT17Y291cG9uQ29kZUlucHV0VmFsdWV9XG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICB7aXNDb3Vwb25Db2RlQXBwbGllZCA/IChcbiAgICAgICAgICAgICAgICAgIDw+XG4gICAgICAgICAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2NsYXNzZXMuY291cG9uQWxlcnR9XG4gICAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgICBBUFBMSUVEXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA8QnV0dG9uIHNpemU9XCJzbWFsbFwiIGNsYXNzTmFtZT17Y2xhc3Nlcy5yZXNldEJ1dHRvbn0gb25DbGljaz17dGhpcy5yZXNldENvdXBvbkNvZGV9PlxuICAgICAgICAgICAgICAgICAgICAgIFVzZSBuZXcgY29kZVxuICAgICAgICAgICAgICAgICAgICA8L0J1dHRvbj5cbiAgICAgICAgICAgICAgICAgIDwvPlxuICAgICAgICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICAgICAgICA8QnV0dG9uXG4gICAgICAgICAgICAgICAgICAgIGRpc2FibGVkPXtjb3Vwb25Db2RlSW5wdXRWYWx1ZSA9PT0gJyd9XG4gICAgICAgICAgICAgICAgICAgIGZ1bGxXaWR0aFxuICAgICAgICAgICAgICAgICAgICB2YXJpYW50PVwiY29udGFpbmVkXCJcbiAgICAgICAgICAgICAgICAgICAgbWFyZ2luPVwibm9ybWFsXCJcbiAgICAgICAgICAgICAgICAgICAgY29sb3I9XCJwcmltYXJ5XCJcbiAgICAgICAgICAgICAgICAgICAgY2xhc3Nlcz17eyByb290OiBjbGFzc2VzLmNvdXBvbkJ1dHRvbiB9fVxuICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXt0aGlzLmNoZWNrQ291cG9uQ29kZVZhbGlkaXR5fVxuICAgICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICBBUFBMWVxuICAgICAgICAgICAgICAgICAgPC9CdXR0b24+XG4gICAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgICAgPC9XcmFwcGVyTGVmdD5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb2wgY29sLTYgcC0wXCI+XG4gICAgICAgICAgICAgIDxXcmFwcGVyUmlnaHQ+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ1LXRjXCI+XG4gICAgICAgICAgICAgICAgICA8U2VjdGlvblRpdGxlPkNyZWRpdCBDYXJkPC9TZWN0aW9uVGl0bGU+XG4gICAgICAgICAgICAgICAgICA8U3RyaXBlUHJvdmlkZXIgYXBpS2V5PXt3ZWJBcHBDb25maWcuU1RSSVBFX0FQSV9LRVl9PlxuICAgICAgICAgICAgICAgICAgICA8RWxlbWVudHM+XG4gICAgICAgICAgICAgICAgICAgICAgPFNldHRpbmdzU3RyaXBlUGF5bWVudFxuICAgICAgICAgICAgICAgICAgICAgICAgbnVtYmVyT2ZNb250aHNTZXJ2aWNlPXtudW1iZXJPZk1vbnRoc1NlcnZpY2V9XG4gICAgICAgICAgICAgICAgICAgICAgICBwYXlCeU1vbnRoQ29zdFBlck1vbnRoPXtwYXlCeU1vbnRoQ29zdFBlck1vbnRofVxuICAgICAgICAgICAgICAgICAgICAgICAgcGF5QnlZZWFyQ29zdFBlclllYXI9e3BheUJ5WWVhckNvc3RQZXJZZWFyfVxuICAgICAgICAgICAgICAgICAgICAgICAgcGF5bWVudFByb2Nlc3NlZEZ1bmN0aW9uPXt0aGlzLnBheW1lbnRQcm9jZXNzZWRGdW5jdGlvbn1cbiAgICAgICAgICAgICAgICAgICAgICAgIHByaWNpbmdQbGFuQ2hvc2VuPXtwcmljaW5nUGxhbkNob3Nlbn1cbiAgICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICAgICA8L0VsZW1lbnRzPlxuICAgICAgICAgICAgICAgICAgPC9TdHJpcGVQcm92aWRlcj5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgPC9XcmFwcGVyUmlnaHQ+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8L1Jvdz5cbiAgICAgICAgKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdwYXltZW50UHJvY2Vzc2VkJzpcbiAgICAgICAgbW9kYWxUaXRsZSA9ICdJbnZvaWNlJztcbiAgICAgICAgbW9kYWxIdG1sQ29udGVudHMgPSAoXG4gICAgICAgICAgPFdyYXBwZXI+XG4gICAgICAgICAgICA8SW52b2ljZUl0ZW0+XG4gICAgICAgICAgICAgIDxJbnZvaWNlVGl0bGU+UGxhbjwvSW52b2ljZVRpdGxlPlxuICAgICAgICAgICAgICA8SW52b2ljZVZhbHVlPntwcmljaW5nUGxhbkNob3Nlbn08L0ludm9pY2VWYWx1ZT5cbiAgICAgICAgICAgIDwvSW52b2ljZUl0ZW0+XG4gICAgICAgICAgICA8SW52b2ljZUl0ZW0+XG4gICAgICAgICAgICAgIDxJbnZvaWNlVGl0bGU+QW1vdW50IFBhaWQ8L0ludm9pY2VUaXRsZT5cbiAgICAgICAgICAgICAgPEludm9pY2VWYWx1ZT5cbiAgICAgICAgICAgICAgICAkXG4gICAgICAgICAgICAgICAge2Ftb3VudFBhaWRWaWFTdHJpcGUgLyAxMDB9XG4gICAgICAgICAgICAgIDwvSW52b2ljZVZhbHVlPlxuICAgICAgICAgICAgPC9JbnZvaWNlSXRlbT5cbiAgICAgICAgICAgIDxJbnZvaWNlSXRlbT5cbiAgICAgICAgICAgICAgPEludm9pY2VUaXRsZT5QZXJpb2Q8L0ludm9pY2VUaXRsZT5cbiAgICAgICAgICAgICAgPEludm9pY2VWYWx1ZT57bnVtYmVyT2ZNb250aHNTZXJ2aWNlID09PSAxID8gJ01vbnRobHknIDogJ0FubnVhbGx5J308L0ludm9pY2VWYWx1ZT5cbiAgICAgICAgICAgIDwvSW52b2ljZUl0ZW0+XG4gICAgICAgICAgICA8SW52b2ljZUl0ZW0+XG4gICAgICAgICAgICAgIDxJbnZvaWNlVGl0bGU+UGF5bWVudCBNZXRob2Q8L0ludm9pY2VUaXRsZT5cbiAgICAgICAgICAgICAgPEludm9pY2VWYWx1ZT5QYXlQYWw8L0ludm9pY2VWYWx1ZT5cbiAgICAgICAgICAgIDwvSW52b2ljZUl0ZW0+XG4gICAgICAgICAgICA8SW52b2ljZUl0ZW0+XG4gICAgICAgICAgICAgIDxJbnZvaWNlVGl0bGU+TmV4dCBJbnZvaWNlPC9JbnZvaWNlVGl0bGU+XG4gICAgICAgICAgICAgIDxJbnZvaWNlVmFsdWU+MTAvMTAvMTk8L0ludm9pY2VWYWx1ZT5cbiAgICAgICAgICAgIDwvSW52b2ljZUl0ZW0+XG4gICAgICAgICAgICA8SW52b2ljZUJ1dHRvbnNDb250YWluZXI+XG4gICAgICAgICAgICAgIDxCdXR0b25cbiAgICAgICAgICAgICAgICBjb2xvcj1cInByaW1hcnlcIlxuICAgICAgICAgICAgICAgIHZhcmlhbnQ9XCJvdXRsaW5lZFwiXG4gICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICBEb3dubG9hZCBQREZcbiAgICAgICAgICAgICAgPC9CdXR0b24+XG4gICAgICAgICAgICAgIDxCdXR0b25cbiAgICAgICAgICAgICAgICBjb2xvcj1cInByaW1hcnlcIlxuICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHsgdGhpcy5wcm9wcy50b2dnbGVGdW5jdGlvbih0aGlzLnN0YXRlLnBhdGhuYW1lKTsgfX1cbiAgICAgICAgICAgICAgICB2YXJpYW50PVwiY29udGFpbmVkXCJcbiAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIEJhY2sgVG8gU2V0dGluZ3NcbiAgICAgICAgICAgICAgPC9CdXR0b24+XG4gICAgICAgICAgICA8L0ludm9pY2VCdXR0b25zQ29udGFpbmVyPlxuICAgICAgICAgIDwvV3JhcHBlcj5cbiAgICAgICAgKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdhY3RpdmVQYWlkUGxhbkV4aXN0cyc6XG4gICAgICAgIGJhY2tUb0J1dHRvbiA9IChcbiAgICAgICAgICA8QnV0dG9uIGNsYXNzTmFtZT17Y2xhc3Nlcy5iYWNrVG9CdXR0b259IG9uQ2xpY2s9e3RoaXMuYmFja1RvQ2hvb3NlUGxhbn0+XG4gICAgICAgICAgICB7aXNJT1MoKSA/IDxBcnJvd0JhY2tJb3MgLz4gOiA8QXJyb3dCYWNrIC8+fVxuICAgICAgICAgICAgQ2hvb3NlIERpZmZlcmVudCBQbGFuXG4gICAgICAgICAgPC9CdXR0b24+XG4gICAgICAgICk7XG4gICAgICAgIG1vZGFsVGl0bGUgPSAnQ3VycmVudCBTdWJzY3JpcHRpb24nO1xuICAgICAgICBtb2RhbEh0bWxDb250ZW50cyA9IChcbiAgICAgICAgICA8c3Bhbj5cbiAgICAgICAgICAgIFlvdSBhcmUgYWxyZWFkeSBzdWJzY3JpYmVkIHRvIHRoZVxuICAgICAgICAgICAgeycgJ31cbiAgICAgICAgICAgIHthY3RpdmVQYWlkUGxhbkNob3NlbkRpc3BsYXl9XG4gICAgICAgICAgICB7JyAnfVxuICAgICAgICAgICAgUGxhbi5cbiAgICAgICAgICAgIDxCdXR0b25zQ29udGFpbmVyPlxuICAgICAgICAgICAgICA8QnV0dG9uXG4gICAgICAgICAgICAgICAgY29sb3I9XCJwcmltYXJ5XCJcbiAgICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiB7IHRoaXMucHJvcHMudG9nZ2xlRnVuY3Rpb24odGhpcy5zdGF0ZS5wYXRobmFtZSk7IH19XG4gICAgICAgICAgICAgICAgdmFyaWFudD1cImNvbnRhaW5lZFwiXG4gICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICBDb250aW51ZVxuICAgICAgICAgICAgICA8L0J1dHRvbj5cbiAgICAgICAgICAgIDwvQnV0dG9uc0NvbnRhaW5lcj5cbiAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICk7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgICByZXR1cm4gKFxuICAgICAgPERpYWxvZ1xuICAgICAgICBjbGFzc2VzPXt7IHBhcGVyOiBjbGFzc2VzLmRpYWxvZ1BhcGVyIH19XG4gICAgICAgIG9wZW49e3RoaXMucHJvcHMuc2hvd31cbiAgICAgICAgb25DbG9zZT17KCkgPT4geyB0aGlzLnByb3BzLnRvZ2dsZUZ1bmN0aW9uKHRoaXMuc3RhdGUucGF0aG5hbWUpOyB9fVxuICAgICAgPlxuICAgICAgICA8TW9kYWxUaXRsZUFyZWEgbm9Cb3hTaGFkb3dNb2RlPXsocGFpZEFjY291bnRQcm9jZXNzU3RlcCAhPT0gJ2Nob29zZVBsYW4nKX0+XG4gICAgICAgICAge2JhY2tUb0J1dHRvbn1cbiAgICAgICAgICA8VGl0bGU+XG4gICAgICAgICAgICB7bW9kYWxUaXRsZX1cbiAgICAgICAgICA8L1RpdGxlPlxuICAgICAgICAgIDxJY29uQnV0dG9uXG4gICAgICAgICAgICBhcmlhLWxhYmVsPVwiQ2xvc2VcIlxuICAgICAgICAgICAgY2xhc3NOYW1lPXtjbGFzc2VzLmNsb3NlQnV0dG9ufVxuICAgICAgICAgICAgb25DbGljaz17dGhpcy5jbG9zZVBhaWRBY2NvdW50VXBncmFkZU1vZGFsfVxuICAgICAgICAgICAgaWQ9XCJwcm9maWxlQ2xvc2VQYWlkQWNjb3VudFVwZ3JhZGVNb2RhbFwiXG4gICAgICAgICAgPlxuICAgICAgICAgICAgPENsb3NlSWNvbiAvPlxuICAgICAgICAgIDwvSWNvbkJ1dHRvbj5cbiAgICAgICAgPC9Nb2RhbFRpdGxlQXJlYT5cbiAgICAgICAge3BhaWRBY2NvdW50UHJvY2Vzc1N0ZXAgPT09ICdjaG9vc2VQbGFuJyA/IChcbiAgICAgICAgICA8RGlhbG9nQ29udGVudCBjbGFzc2VzPXt7IHJvb3Q6IGNsYXNzZXMuZGlhbG9nQ29udGVudFdoaXRlIH19PlxuICAgICAgICAgICAge21vZGFsSHRtbENvbnRlbnRzfVxuICAgICAgICAgIDwvRGlhbG9nQ29udGVudD5cbiAgICAgICAgKSA6IChcbiAgICAgICAgICA8RGlhbG9nQ29udGVudCBjbGFzc2VzPXt7IHJvb3Q6IGNsYXNzZXMuZGlhbG9nQ29udGVudCB9fT5cbiAgICAgICAgICAgIHttb2RhbEh0bWxDb250ZW50c31cbiAgICAgICAgICA8L0RpYWxvZ0NvbnRlbnQ+XG4gICAgICAgICl9XG4gICAgICA8L0RpYWxvZz5cbiAgICApO1xuICB9XG59XG5jb25zdCBzdHlsZXMgPSAoKSA9PiAoe1xuICBidXR0b246IHtcbiAgICBtYXJnaW5SaWdodDogOCxcbiAgfSxcbiAgZGlhbG9nUGFwZXI6IHtcbiAgICBtYXJnaW5Ub3A6IGhhc0lQaG9uZU5vdGNoKCkgPyA2OCA6IDQ4LFxuICAgICdAbWVkaWEgKG1pbi13aWR0aDogNzY5cHgpJzoge1xuICAgICAgbWF4V2lkdGg6ICc2MDBweCcsXG4gICAgICB3aWR0aDogJzg1JScsXG4gICAgICBtaW5IZWlnaHQ6ICc5NSUnLFxuICAgICAgbWF4SGVpZ2h0OiAnOTUlJyxcbiAgICAgIGhlaWdodDogJzk1JScsXG4gICAgICBtYXJnaW46ICcwIGF1dG8nLFxuICAgIH0sXG4gICAgJ0BtZWRpYSAobWF4LXdpZHRoOiA3NjhweCknOiB7XG4gICAgICBtaW5XaWR0aDogJzEwMCUnLFxuICAgICAgbWF4V2lkdGg6ICcxMDAlJyxcbiAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICBtaW5IZWlnaHQ6ICcxMDAlJyxcbiAgICAgIG1heEhlaWdodDogJzEwMCUnLFxuICAgICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgICBtYXJnaW46ICcwIGF1dG8nLFxuICAgIH0sXG4gIH0sXG4gIGRpYWxvZ0NvbnRlbnQ6IHtcbiAgICAnQG1lZGlhIChtYXgtd2lkdGg6IDc2OHB4KSc6IHtcbiAgICAgIGJhY2tncm91bmQ6ICcjZjdmN2Y3JyxcbiAgICAgIHBhZGRpbmc6ICcwIDhweCA4cHgnLFxuICAgIH0sXG4gICAgYmFja2dyb3VuZDogJ3doaXRlJyxcbiAgICBwYWRkaW5nOiAnMHB4IDE2cHgnLFxuICAgIGhlaWdodDogJ2ZpdC1jb250ZW50JyxcbiAgfSxcbiAgZGlhbG9nQ29udGVudFdoaXRlOiB7XG4gICAgJ0BtZWRpYSAobWF4LXdpZHRoOiA3NjhweCknOiB7XG4gICAgICBwYWRkaW5nOiAnOHB4IDhweCA4cHgnLFxuICAgIH0sXG4gICAgYmFja2dyb3VuZDogJ3doaXRlJyxcbiAgICBwYWRkaW5nOiAnMHB4IDE2cHgnLFxuICB9LFxuICBmb3JtQ29udHJvbDoge1xuICAgIHdpZHRoOiAnMTAwJScsXG4gICAgcGFkZGluZzogJzAgMCAzcHgnLFxuICAgICdAbWVkaWEgKG1heC13aWR0aDogNzY4cHgpJzoge1xuICAgICAgcGFkZGluZzogMCxcbiAgICB9LFxuICB9LFxuICBiYWNrVG9CdXR0b246IHtcbiAgICBjb2xvcjogJyM2NjYnLFxuICAgIGZvbnRXZWlnaHQ6ICdib2xkJyxcbiAgICBtYXJnaW46IDAsXG4gICAgdGV4dFRyYW5zZm9ybTogJ25vbmUnLFxuICAgICdAbWVkaWEgKG1pbi13aWR0aDogNzY5cHgpJzoge1xuICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICB0b3A6IDE2LFxuICAgICAgbGVmdDogMTIsXG4gICAgfSxcbiAgfSxcbiAgY2xvc2VCdXR0b246IHtcbiAgICBtYXJnaW46IDAsXG4gICAgZGlzcGxheTogJ2Jsb2NrJyxcbiAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICB0b3A6IDQsXG4gICAgcmlnaHQ6IDgsXG4gIH0sXG4gIGZvcm1Db250cm9sTGFiZWw6IHtcbiAgICBwYWRkaW5nOiAnMHB4IDE2cHggMHB4IDhweCcsXG4gICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgd2lkdGg6ICcxMDAlJyxcbiAgICBtYXJnaW46IDAsXG4gICAgJ0BtZWRpYSAobWluLXdpZHRoOiA3NjlweCknOiB7XG4gICAgICBtYXJnaW5Ub3A6ICctNXB4JyxcbiAgICB9LFxuICAgICdAbWVkaWEgKG1heC13aWR0aDogNTY5cHgpJzoge1xuICAgICAgcGFkZGluZzogJzRweCA4cHggNHB4IDRweCcsXG4gICAgICBtYXJnaW46IDAsXG4gICAgfSxcbiAgfSxcbiAgZm9ybUNvbnRyb2xMYWJlbFNwYW46IHtcbiAgICB3aWR0aDogJzEwMCUnLFxuICB9LFxuICByYWRpb0J1dHRvbjoge1xuICAgIHdpZHRoOiA0NS40LFxuICAgIGhlaWdodDogNDUuNCxcbiAgICBwYWRkaW5nOiAxMixcbiAgICBwb2ludGVyRXZlbnRzOiAnYXV0bycsXG4gIH0sXG4gIHRleHRGaWVsZDoge1xuICAgIGJhY2tncm91bmQ6ICd3aGl0ZScsXG4gICAgbWFyZ2luVG9wOiAwLFxuICAgIG1hcmdpbkJvdHRvbTogOCxcbiAgICBoZWlnaHQ6IDQ1LFxuICAgIGZvbnRTaXplOiAnMTRweCcsXG4gICAgJ0BtZWRpYSAobWF4LXdpZHRoOiA3NjlweCknOiB7XG4gICAgICBoZWlnaHQ6IDQ1LFxuICAgICAgZm9udFNpemU6IDE2LFxuICAgIH0sXG4gICAgJ0BtZWRpYSAobWF4LXdpZHRoOiA1NjlweCknOiB7XG4gICAgICBoZWlnaHQ6IDQwLFxuICAgICAgZm9udFNpemU6IDE0LFxuICAgIH0sXG4gIH0sXG4gIHRleHRGaWVsZENvdXBvbkFwcGxpZWQ6IHtcbiAgICBiYWNrZ3JvdW5kOiAnd2hpdGUnLFxuICAgIG1hcmdpblRvcDogMCxcbiAgICBtYXJnaW5Cb3R0b206IDgsXG4gICAgaGVpZ2h0OiA0NSxcbiAgICBmb250U2l6ZTogJzE0cHgnLFxuICAgIGNvbG9yOiAnIzM4Njk0OScsXG4gICAgJ0BtZWRpYSAobWF4LXdpZHRoOiA3NjlweCknOiB7XG4gICAgICBoZWlnaHQ6IDQ1LFxuICAgICAgZm9udFNpemU6IDE2LFxuICAgIH0sXG4gICAgJ0BtZWRpYSAobWF4LXdpZHRoOiA1NjlweCknOiB7XG4gICAgICBoZWlnaHQ6IDQwLFxuICAgICAgZm9udFNpemU6IDE0LFxuICAgIH0sXG4gIH0sXG4gIHRleHRGaWVsZElucHV0OiB7XG4gICAgZm9udFdlaWdodDogJ2JvbGQnLFxuICB9LFxuICB0ZXh0RmllbGRJbnB1dFVwcGVyY2FzZToge1xuICAgIHRleHRUcmFuc2Zvcm06ICd1cHBlcmNhc2UnLFxuICAgIGZvbnRXZWlnaHQ6ICdib2xkJyxcbiAgfSxcbiAgY291cG9uQnV0dG9uOiB7XG4gICAgJ0BtZWRpYSAobWF4LXdpZHRoOiA1NjlweCknOiB7XG4gICAgICBoZWlnaHQ6IDM1LFxuICAgICAgZm9udFNpemU6IDE0LFxuICAgIH0sXG4gICAgJ0BtZWRpYSAobWF4LXdpZHRoOiA3NjlweCknOiB7XG4gICAgICBoZWlnaHQ6IDQ1LFxuICAgICAgZm9udFNpemU6IDE2LFxuICAgIH0sXG4gIH0sXG4gIGNvdXBvbkFsZXJ0OiB7XG4gICAgYmFja2dyb3VuZDogJyNjMWY0YzknLFxuICAgIGNvbG9yOiAnIzM4Njk0OScsXG4gICAgYm94U2hhZG93OiAnbm9uZScsXG4gICAgcG9pbnRlckV2ZW50czogJ25vbmUnLFxuICAgIGZvbnRXZWlnaHQ6ICdib2xkJyxcbiAgICBtYXJnaW5Cb3R0b206IDgsXG4gICAgd2lkdGg6ICcxMDAlJyxcbiAgICBwYWRkaW5nOiAnOHB4IDE2cHgnLFxuICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICBqdXN0aWZ5Q29udGVudDogJ2NlbnRlcicsXG4gICAgYm9yZGVyUmFkaXVzOiAnNHB4JyxcbiAgICAnQG1lZGlhIChtYXgtd2lkdGg6IDU2OXB4KSc6IHtcbiAgICAgIC8vIGhlaWdodDogMzUsXG4gICAgICBmb250U2l6ZTogMTQsXG4gICAgfSxcbiAgICAnQG1lZGlhIChtYXgtd2lkdGg6IDc2OXB4KSc6IHtcbiAgICAgIC8vIGhlaWdodDogNDUsXG4gICAgICBmb250U2l6ZTogMTYsXG4gICAgfSxcbiAgfSxcbiAgY291cG9uQWxlcnRFcnJvcjoge1xuICAgIGJhY2tncm91bmQ6ICdyZ2IoMjU1LCAxNzcsIDE2MCknLFxuICAgIGNvbG9yOiAncmdiKDE2MywgNDAsIDM4KScsXG4gICAgYm94U2hhZG93OiAnbm9uZScsXG4gICAgcG9pbnRlckV2ZW50czogJ25vbmUnLFxuICAgIGZvbnRXZWlnaHQ6ICdib2xkJyxcbiAgICBtYXJnaW5Cb3R0b206IDgsXG4gICAgLy8gaGVpZ2h0OiA0MCxcbiAgICBmb250U2l6ZTogMTQsXG4gICAgd2lkdGg6ICcxMDAlJyxcbiAgICBwYWRkaW5nOiAnOHB4IDE2cHgnLFxuICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICBqdXN0aWZ5Q29udGVudDogJ2NlbnRlcicsXG4gICAgYm9yZGVyUmFkaXVzOiAnNHB4JyxcbiAgICAnQG1lZGlhIChtYXgtd2lkdGg6IDU2OXB4KSc6IHtcbiAgICAgIC8vIGhlaWdodDogMzUsXG4gICAgICBmb250U2l6ZTogMTQsXG4gICAgfSxcbiAgICAnQG1lZGlhIChtYXgtd2lkdGg6IDc2OXB4KSc6IHtcbiAgICAgIC8vIGhlaWdodDogNDUsXG4gICAgICBmb250U2l6ZTogMTYsXG4gICAgfSxcbiAgfSxcbiAgcmVzZXRCdXR0b246IHtcbiAgICBmbG9hdDogJ3JpZ2h0JyxcbiAgICB0ZXh0RGVjb3JhdGlvbjogJ3VuZGVybGluZScsXG4gIH0sXG4gIG5leHRCdXR0b246IHtcbiAgICAnQG1lZGlhIChtYXgtd2lkdGg6IDU2OXB4KSc6IHtcbiAgICAgIGhlaWdodDogMzUsXG4gICAgICBmb250U2l6ZTogMTQsXG4gICAgfSxcbiAgICAnQG1lZGlhIChtYXgtd2lkdGg6IDc2OXB4KSc6IHtcbiAgICAgIGhlaWdodDogNDUsXG4gICAgICBmb250U2l6ZTogMTYsXG4gICAgfSxcbiAgICB3aWR0aDogJzEwMCUnLFxuICB9LFxufSk7XG5cbmNvbnN0IEJ1dHRvbnNDb250YWluZXIgPSBzdHlsZWQuZGl2YFxuICBkaXNwbGF5OiBmbGV4O1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlciAhaW1wb3J0YW50O1xuICB3aWR0aDogZml0LWNvbnRlbnQ7XG4gIHdpZHRoOiAxMDAlO1xuICBtYXJnaW4tdG9wOiAxMnB4O1xuYDtcblxuY29uc3QgTW9kYWxUaXRsZUFyZWEgPSBzdHlsZWQuZGl2YFxuICB3aWR0aDogMTAwJTtcbiAgcGFkZGluZzogMTJweCAxMnB4IDRweCAxMnB4O1xuICAkeyh7IG5vQm94U2hhZG93TW9kZSB9KSA9PiAoKG5vQm94U2hhZG93TW9kZSkgPyAnJyA6ICdib3gtc2hhZG93OiAwIDIwcHggNDBweCAtMjVweCAjOTk5Jyl9O1xuICB6LWluZGV4OiA5OTk7XG4gIEBtZWRpYSAobWluLXdpZHRoOiA3NjlweCkge1xuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICAkeyh7IG5vQm94U2hhZG93TW9kZSB9KSA9PiAoKG5vQm94U2hhZG93TW9kZSkgPyAnJyA6ICdib3gtc2hhZG93OiBub25lJyl9O1xuICAgIGJvcmRlci1ib3R0b206IDJweCBzb2xpZCAjZjdmN2Y3O1xuICB9XG4gICR7KHsgbm9Cb3hTaGFkb3dNb2RlIH0pID0+ICgobm9Cb3hTaGFkb3dNb2RlKSA/ICdAbWVkaWEgKG1heC13aWR0aDogMzc2cHgpIHtcXG4gICAgcGFkZGluZzogOHB4IDZweDtcXG4gIH0nIDogJycpfVxuYDtcblxuY29uc3QgTW9iaWxlUHJpY2luZ1BsYW5OYW1lID0gc3R5bGVkLnNwYW5gXG4gIGNvbG9yOiAkeyh7IHRoZW1lIH0pID0+IHRoZW1lLmNvbG9ycy5tYWlufTtcbiAgZm9udC1zaXplOiAxOHB4O1xuICBmb250LXdlaWdodDogYm9sZDtcbiAgdi1hbGlnbjogbWlkZGxlO1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIHRvcDogMTYuOHB4O1xuICBmbG9hdDogcmlnaHQ7XG4gIEBtZWRpYSAobWF4LXdpZHRoOiA1NjlweCkge1xuICAgIGZvbnQtc2l6ZTogMTRweDtcbiAgICB0b3A6IDEzLjZweDtcbiAgfVxuYDtcblxuXG5jb25zdCBUaXRsZSA9IHN0eWxlZC5oM2BcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XG4gIGZvbnQtc2l6ZTogMjRweDtcbiAgbWFyZ2luLXRvcDogOHB4O1xuICBwYWRkaW5nOiAwIDEwcHg7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgbGVmdDogOHB4O1xuICBjb2xvcjogYmxhY2s7XG4gIEBtZWRpYSAobWluLXdpZHRoOiA3NjlweCkge1xuICAgIGZvbnQtc2l6ZTogMjhweDtcbiAgICBsZWZ0OiAwO1xuICAgIG1hcmdpbjogMCBhdXRvO1xuICAgIHdpZHRoOiBmaXQtY29udGVudDtcbiAgfVxuYDtcblxuY29uc3QgU2VjdGlvblRpdGxlID0gc3R5bGVkLmg0YFxuICBjb2xvcjogIzY2NjtcbiAgZm9udC1zaXplOiAyMHB4O1xuICBmb250LXdlaWdodDogYm9sZDtcbiAgdGV4dC10cmFuc2Zvcm06IGNhcGl0YWxpemU7XG4gIG1hcmdpbi1ib3R0b206IDE2cHg7XG4gIEBtZWRpYSAobWluLXdpZHRoOiA3NjlweCkge1xuICAgIGNvbG9yOiBibGFjaztcbiAgICBmb250LXdlaWdodDogYm9sZDtcbiAgICBmb250LXNpemU6IDE4cHg7XG4gIH1cbiAgQG1lZGlhIChtYXgtd2lkdGg6IDM3NnB4KSB7XG4gICAgZm9udC1zaXplOiAxOHB4O1xuICB9XG5gO1xuXG5jb25zdCBSb3cgPSBzdHlsZWQuZGl2YFxuICBtYXgtd2lkdGg6IDcwMHB4O1xuICBtYXJnaW46IDAgYXV0byAhaW1wb3J0YW50O1xuYDtcblxuY29uc3QgTW9iaWxlV3JhcHBlciA9IHN0eWxlZC5kaXZgXG4gIHBhZGRpbmc6IDE2cHggMThweCAxNnB4O1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICBhbGlnbi1jb250ZW50OiBjZW50ZXI7XG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcbmA7XG5cbmNvbnN0IEZsZXhTZWN0aW9uT25lID0gc3R5bGVkLmRpdmBcbiAgbWFyZ2luOiAwOyAgXG5gO1xuXG5jb25zdCBGbGV4U2VjdGlvblR3byA9IHN0eWxlZC5kaXZgXG4gIG1hcmdpbjogMDtcbmA7XG5cbmNvbnN0IFdyYXBwZXJMZWZ0ID0gc3R5bGVkLmRpdmBcbiAgcGFkZGluZzogMCAzMnB4IDMycHggMTZweDtcbiAgYm9yZGVyLXJpZ2h0OiAxcHggc29saWQgI2Y3ZjdmNztcbiAgaGVpZ2h0OiBjYWxjKDEwMCUgLSAzMnB4KTtcbiAgbWFyZ2luLXRvcDogMzJweDtcbmA7XG5cbmNvbnN0IFdyYXBwZXJSaWdodCA9IHN0eWxlZC5kaXZgXG4gIHBhZGRpbmc6IDAgMTZweCAzMnB4IDMycHg7XG4gIGJvcmRlci1sZWZ0OiAxcHggc29saWQgI2Y3ZjdmNztcbiAgaGVpZ2h0OiBjYWxjKDEwMCUgLSAzMnB4KTtcbiAgbWFyZ2luLXRvcDogMzJweDtcbmA7XG5cbmNvbnN0IEZpZWxkc2V0ID0gc3R5bGVkLmZpZWxkc2V0YFxuICBib3JkZXI6IDJweCBzb2xpZCAkeyh7IGRpc2FibGVkTW9kZSwgdGhlbWUgfSkgPT4gKChkaXNhYmxlZE1vZGUpID8gJyNkZGQnIDogdGhlbWUuY29sb3JzLm1haW4pfTtcbiAgYm9yZGVyLXJhZGl1czogM3B4O1xuICBtYXJnaW4tYm90dG9tOiAxNnB4O1xuICBwYWRkaW5nLWJvdHRvbTogMDtcbiAgYmFja2dyb3VuZDogd2hpdGU7XG4gIEBtZWRpYSAobWluLXdpZHRoOiA3NjlweCkge1xuICAgIGhlaWdodDogNzZweDtcbiAgICAkeyh7IGRpc2FibGVkTW9kZSB9KSA9PiAoKGRpc2FibGVkTW9kZSkgPyAnbWFyZ2luLWJvdHRvbTogMTJweCcgOiAnJyl9O1xuICB9XG5gO1xuXG5jb25zdCBMZWdlbmQgPSBzdHlsZWQubGVnZW5kYFxuICBjb2xvcjogJHsoeyB0aGVtZSB9KSA9PiB0aGVtZS5jb2xvcnMubWFpbn07XG4gIGZvbnQtc2l6ZTogMTJweDtcbiAgdGV4dC1hbGlnbjogbGVmdDtcbiAgbWFyZ2luOiAwO1xuICBtYXJnaW4tbGVmdDogMTZweDtcbiAgcGFkZGluZzogMHB4IDhweDtcbiAgd2lkdGg6IGZpdC1jb250ZW50O1xuYDtcblxuY29uc3QgUHJpY2VMYWJlbCA9IHN0eWxlZC5zcGFuYFxuICBmb250LXNpemU6IDQwcHg7XG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xuICBjb2xvcjogJHsoeyB0aGVtZSB9KSA9PiB0aGVtZS5jb2xvcnMubWFpbn07XG4gIG1hcmdpbi1sZWZ0OiA0cHg7XG4gIEBtZWRpYSAobWF4LXdpZHRoOiA1NjlweCkge1xuICAgIGZvbnQtc2l6ZTogMzJweDtcbiAgfVxuYDtcblxuY29uc3QgUHJpY2VMYWJlbERvbGxhclNpZ24gPSBzdHlsZWQuc3BhbmBcbiAgZm9udC1zaXplOiAxOHB4O1xuICBjb2xvcjogJHsoeyB0aGVtZSB9KSA9PiB0aGVtZS5jb2xvcnMubWFpbn07XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgdG9wOiAtMTJweDtcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XG4gIEBtZWRpYSAobWF4LXdpZHRoOiA1NjlweCkge1xuICAgIGZvbnQtc2l6ZTogMTZweDtcbiAgfVxuYDtcblxuY29uc3QgUHJpY2VMYWJlbFN1YlRleHQgPSBzdHlsZWQuc3BhbmBcbiAgZm9udC1zaXplOiAxNnB4O1xuICBmb250LXdlaWdodDogYm9sZDtcbiAgY29sb3I6ICR7KHsgdGhlbWUgfSkgPT4gdGhlbWUuY29sb3JzLm1haW59O1xuICBAbWVkaWEgKG1heC13aWR0aDogNTY5cHgpIHtcbiAgICBmb250LXNpemU6IDE0cHg7XG4gIH1cbmA7XG5cbmNvbnN0IFdyYXBwZXIgPSBzdHlsZWQuZGl2YFxuICBwYWRkaW5nOiAxMnB4IDMwcHg7XG4gIEBtZWRpYSAobWF4LXdpZHRoOiA1MDBweCkge1xuICAgIHBhZGRpbmc6IDEycHggMDtcbiAgfVxuYDtcblxuY29uc3QgSW52b2ljZUl0ZW0gPSBzdHlsZWQuZGl2YFxuICBkaXNwbGF5OiBmbGV4O1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG4gIHdpZHRoOiAxMDAlO1xuICBwYWRkaW5nOiAxMHB4O1xuICBAbWVkaWEgKG1heC13aWR0aDogNTAwcHgpIHtcbiAgICBkaXNwbGF5OiBibG9jaztcbiAgfVxuYDtcblxuY29uc3QgSW52b2ljZVRpdGxlID0gc3R5bGVkLmRpdmBcbiAgQG1lZGlhIChtYXgtd2lkdGg6IDUwMHB4KSB7XG4gICAgZm9udC1zaXplOiAxNnB4O1xuICB9XG4gIGNvbG9yOiAjYWFhO1xuICBmb250LXdlaWdodDogYm9sZDtcbiAgZm9udC1zaXplOiAxOHB4O1xuYDtcblxuY29uc3QgSW52b2ljZVZhbHVlID0gc3R5bGVkLmRpdmBcbiAgY29sb3I6ICMwMDA7XG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xuICBmb250LXNpemU6IDE4cHg7XG5gO1xuXG5jb25zdCBJbnZvaWNlQnV0dG9uc0NvbnRhaW5lciA9IHN0eWxlZC5kaXZgXG4gIGRpc3BsYXk6IGZsZXg7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcbiAgd2lkdGg6IDEwMCU7XG4gIG1hcmdpbi10b3A6IDE2cHg7XG4gIEBtZWRpYShtYXgtd2lkdGg6IDUwMHB4KSB7XG4gICAgZGlzcGxheTogYmxvY2s7XG4gICAgcGFkZGluZzogMDtcbiAgfVxuICBwYWRkaW5nOiAxMHB4O1xuICAqIHtcbiAgICB3aWR0aDogNTAlO1xuICAgIEBtZWRpYShtYXgtd2lkdGg6IDUwMHB4KSB7XG4gICAgICB3aWR0aDogMTAwJTtcbiAgICB9XG4gIH1cbiAgPjpmaXJzdC1jaGlsZCB7XG4gICAgbWFyZ2luLWJvdHRvbTogOHB4O1xuICAgIEBtZWRpYShtaW4td2lkdGg6IDUwMXB4KSB7XG4gICAgICBtYXJnaW46IDAgOHB4IDAgMDtcbiAgICB9XG4gIH1cbiAgPjpsYXN0LWNoaWxkIHtcbiAgICBAbWVkaWEobWluLXdpZHRoOiA1MDFweCkge1xuICAgICAgbWFyZ2luOiAwIDAgMCA4cHg7XG4gICAgfVxuICB9XG5gO1xuXG5leHBvcnQgZGVmYXVsdCB3aXRoVGhlbWUod2l0aFN0eWxlcyhzdHlsZXMpKFBhaWRBY2NvdW50VXBncmFkZU1vZGFsKSk7XG4iXX0=*/