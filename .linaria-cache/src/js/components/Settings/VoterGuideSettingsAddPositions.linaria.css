.e6pz1k0{padding:1em 2em;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-flow:column;-ms-flex-flow:column;flex-flow:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}
.evt83if{font-size:16px;text-align:center;margin:1em 2em;}@media (max-width:var(--evt83if-0)){.evt83if{margin:1em;}}
.plck4cg{text-align:right;margin:20px 0;}
.l1izgs9b{width:100%;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;}
.s1ksih2l{font-size:18px;text-align:right;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;}@media (max-width:var(--s1ksih2l-0)){.s1ksih2l{padding-top:5px;padding-bottom:3px;}}@media print{.s1ksih2l{display:none;}}
.ci43g8r{padding:0;}
/*# sourceMappingURL=data:application/json;base64,*/