.wn8j6nd{margin-top:32px;}
.e19k3qso{margin-top:18px;}
/*# sourceMappingURL=data:application/json;base64,{"version":3,"sources":["D:\\Jarod\\WeVote\\WebApp\\src\\js\\components\\Settings\\VoterEmailAddressEntry.jsx"],"names":[".wn8j6nd",".e19k3qso"],"mappings":"AAghBMA;AAIAC","file":"D:\\Jarod\\WeVote\\WebApp\\src\\js\\components\\Settings\\VoterEmailAddressEntry.jsx","sourcesContent":["import React, { Component } from 'react';\nimport { Alert } from 'react-bootstrap';\nimport PropTypes from 'prop-types';\nimport { styled } from 'linaria/react';\nimport { withStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Delete from '@material-ui/icons/Delete';\nimport Paper from '@material-ui/core/Paper';\nimport Mail from '@material-ui/icons/Mail';\nimport InputBase from '@material-ui/core/InputBase';\nimport LoadingWheel from '../LoadingWheel';\nimport { isCordova } from '../../utils/cordovaUtils';\nimport { renderLog } from '../../utils/logging';\nimport OpenExternalWebSite from '../Widgets/OpenExternalWebSite';\nimport SettingsVerifySecretCode from './SettingsVerifySecretCode';\nimport VoterActions from '../../actions/VoterActions';\nimport VoterStore from '../../stores/VoterStore';\n\nclass VoterEmailAddressEntry extends Component {\n  static propTypes = {\n    classes: PropTypes.object,\n    inModal: PropTypes.bool,\n    toggleOtherSignInOptions: PropTypes.func,\n  };\n\n  constructor (props) {\n    super(props);\n    this.state = {\n      disableEmailVerificationButton: false,\n      displayEmailVerificationButton: false,\n      emailAddressStatus: {\n        email_address_already_owned_by_other_voter: false,\n        email_address_already_owned_by_this_voter: false,\n        email_address_created: false,\n        email_address_deleted: false,\n        email_address_not_valid: false,\n        link_to_sign_in_email_sent: false,\n        make_primary_email: false,\n        sign_in_code_email_sent: false,\n        verification_email_sent: false,\n      },\n      hideExistingEmailAddresses: false,\n      loading: true,\n      secretCodeSystemLocked: false,\n      showVerifyModal: false,\n      voter: VoterStore.getVoter(),\n      voterEmailAddress: '',\n      voterEmailAddressIsValid: false,\n      voterEmailAddressList: [],\n      voterEmailAddressListCount: 0,\n      voterEmailAddressesVerifiedCount: 0,\n    };\n  }\n\n  componentDidMount () {\n    this.voterStoreListener = VoterStore.addListener(this.onVoterStoreChange.bind(this));\n    // Steve 11/14/19: commenting out the next line: it is expensive and causes trouble in SignInModal, and is almost certainly not needed\n    // VoterActions.voterRetrieve();\n    VoterActions.voterEmailAddressRetrieve();\n  }\n\n  shouldComponentUpdate (nextProps, nextState) {\n    if (JSON.stringify(this.state.emailAddressStatus) !== JSON.stringify(nextState.emailAddressStatus)) {\n      // console.log('this.state.emailAddressStatus', this.state.emailAddressStatus, ', nextState.emailAddressStatus', nextState.emailAddressStatus);\n      return true;\n    }\n    if (this.state.displayEmailVerificationButton !== nextState.displayEmailVerificationButton) {\n      // console.log('this.state.displayEmailVerificationButton', this.state.displayEmailVerificationButton, ', nextState.displayEmailVerificationButton', nextState.displayEmailVerificationButton);\n      return true;\n    }\n    if (this.state.loading !== nextState.loading) {\n      // console.log('this.state.loading', this.state.loading, ', nextState.loading', nextState.loading);\n      return true;\n    }\n    if (this.state.secretCodeSystemLocked !== nextState.secretCodeSystemLocked) {\n      // console.log('this.state.secretCodeSystemLocked', this.state.secretCodeSystemLocked, ', nextState.secretCodeSystemLocked', nextState.secretCodeSystemLocked);\n      return true;\n    }\n    if (this.state.showError !== nextState.showError) {\n      // console.log('this.state.showError', this.state.showError, ', nextState.showError', nextState.showError);\n      return true;\n    }\n    if (this.state.showVerifyModal !== nextState.showVerifyModal) {\n      // console.log('this.state.showVerifyModal', this.state.showVerifyModal, ', nextState.showVerifyModal', nextState.showVerifyModal);\n      return true;\n    }\n    if (this.state.voterEmailAddress !== nextState.voterEmailAddress) {\n      // console.log('this.state.voterEmailAddress', this.state.voterEmailAddress, ', nextState.voterEmailAddress', nextState.voterEmailAddress);\n      return true;\n    }\n    if (this.state.voterEmailAddressListCount !== nextState.voterEmailAddressListCount) {\n      // console.log('this.state.voterEmailAddressListCount', this.state.voterEmailAddressListCount, ', nextState.voterEmailAddressListCount', nextState.voterEmailAddressListCount);\n      return true;\n    }\n    if (this.state.voterEmailAddressesVerifiedCount !== nextState.voterEmailAddressesVerifiedCount) {\n      // console.log('this.state.voterEmailAddressesVerifiedCount', this.state.voterEmailAddressesVerifiedCount, ', nextState.voterEmailAddressesVerifiedCount', nextState.voterEmailAddressesVerifiedCount);\n      return true;\n    }\n    // console.log('shouldComponentUpdate false');\n    return false;\n  }\n\n  componentWillUnmount () {\n    this.voterStoreListener.remove();\n  }\n\n  onVoterStoreChange () {\n    const emailAddressStatus = VoterStore.getEmailAddressStatus();\n    const { secret_code_system_locked_for_this_voter_device_id: secretCodeSystemLocked } = emailAddressStatus;\n    const secretCodeVerificationStatus = VoterStore.getSecretCodeVerificationStatus();\n    const { secretCodeVerified } = secretCodeVerificationStatus;\n    // console.log('onVoterStoreChange emailAddressStatus:', emailAddressStatus);\n    if (secretCodeVerified) {\n      this.setState({\n        showVerifyModal: false,\n        voterEmailAddress: '',\n      });\n    } else if (emailAddressStatus.sign_in_code_email_sent) {\n      this.setState({\n        displayEmailVerificationButton: false,\n        emailAddressStatus: {\n          sign_in_code_email_sent: false,\n        },\n        showVerifyModal: true,\n      });\n    } else if (emailAddressStatus.email_address_already_owned_by_this_voter) {\n      this.setState({\n        displayEmailVerificationButton: false,\n        emailAddressStatus,\n        showVerifyModal: false,\n      });\n    } else {\n      this.setState({\n        emailAddressStatus,\n      });\n    }\n    const voterEmailAddressList = VoterStore.getEmailAddressList();\n    const voterEmailAddressListCount = voterEmailAddressList.length;\n    const voterEmailAddressesVerifiedCount = VoterStore.getEmailAddressesVerifiedCount();\n    this.setState({\n      loading: false,\n      secretCodeSystemLocked,\n      voter: VoterStore.getVoter(),\n      voterEmailAddressList,\n      voterEmailAddressListCount,\n      voterEmailAddressesVerifiedCount,\n    });\n  }\n\n  setAsPrimaryEmailAddress (emailWeVoteId) {\n    VoterActions.setAsPrimaryEmailAddress(emailWeVoteId);\n  }\n\n  voterEmailAddressSave = (event) => {\n    // console.log('VoterEmailAddressEntry this.voterEmailAddressSave');\n    event.preventDefault();\n    const sendLinkToSignIn = true;\n    VoterActions.voterEmailAddressSave(this.state.voterEmailAddress, sendLinkToSignIn);\n    this.setState({ loading: true });\n  };\n\n  sendSignInCodeEmail = (event) => {\n    event.preventDefault();\n    const { voterEmailAddress, voterEmailAddressIsValid } = this.state;\n    if (voterEmailAddressIsValid) {\n      VoterActions.sendSignInCodeEmail(voterEmailAddress);\n      this.setState({\n        emailAddressStatus: {\n          email_address_already_owned_by_other_voter: false,\n        },\n        loading: true,\n      });\n    } else {\n      this.setState({ showError: true });\n    }\n  };\n\n  reSendSignInCodeEmail = (voterEmailAddress) => {\n    // console.log('VoterEmailAddressEntry voterEmailAddress:', voterEmailAddress);\n    if (voterEmailAddress) {\n      VoterActions.sendSignInCodeEmail(voterEmailAddress);\n      this.setState({\n        emailAddressStatus: {\n          email_address_already_owned_by_other_voter: false,\n        },\n        loading: true,\n        voterEmailAddress,\n      });\n    }\n  };\n\n  displayEmailVerificationButton = () => {\n    this.setState({\n      displayEmailVerificationButton: true,\n    });\n  };\n\n  hideEmailVerificationButton = () => {\n    const { voterEmailAddress } = this.state;\n    if (!voterEmailAddress) {\n      // Only hide if no email entered\n      this.setState({\n        displayEmailVerificationButton: false,\n      });\n    }\n  };\n\n  localToggleOtherSignInOptions = () => {\n    if (isCordova()) {\n      const { hideExistingEmailAddresses } = this.state;\n      this.setState({ hideExistingEmailAddresses: !hideExistingEmailAddresses });\n      if (this.props.toggleOtherSignInOptions) {\n        this.props.toggleOtherSignInOptions();\n      }\n    }\n  };\n\n  onEmailInputBlur = (event) => {\n    const { voterEmailAddress } = this.state;\n    this.hideEmailVerificationButton();\n    this.localToggleOtherSignInOptions();\n    if (voterEmailAddress && isCordova()) {\n      // When there is a voterEmailAddress value and the keyboard closes, submit\n      this.sendSignInCodeEmail(event);\n    }\n  }\n\n  closeVerifyModal = () => {\n    // console.log('VoterEmailAddressEntry closeVerifyModal');\n    this.setState({\n      displayEmailVerificationButton: false,\n      emailAddressStatus: {\n        sign_in_code_email_sent: false,\n      },\n      showVerifyModal: false,\n      voterEmailAddress: '',\n    });\n  };\n\n  updateVoterEmailAddress = (e) => {\n    const voterEmailAddress = e.target.value;\n    const voterEmailAddressIsValid = true;\n    this.setState({\n      voterEmailAddress,\n      voterEmailAddressIsValid,\n    });\n  };\n\n  sendVerificationEmail (emailWeVoteId) {\n    VoterActions.sendVerificationEmail(emailWeVoteId);\n    this.setState({ loading: true });\n  }\n\n  removeVoterEmailAddress (emailWeVoteId) {\n    VoterActions.removeVoterEmailAddress(emailWeVoteId);\n  }\n\n  render () {\n    renderLog('VoterEmailAddressEntry');  // Set LOG_RENDER_EVENTS true to log all renders\n    if (this.state.loading) {\n      // console.log('VoterEmailAddressEntry loading: ', this.state.loading);\n      return LoadingWheel;\n    }\n\n    const { classes } = this.props;\n    const {\n      disableEmailVerificationButton, displayEmailVerificationButton, emailAddressStatus, hideExistingEmailAddresses,\n      secretCodeSystemLocked, showVerifyModal, voterEmailAddress, voterEmailAddressList, voterEmailAddressListCount,\n    } = this.state;\n\n    const signInLinkOrCodeSent = (emailAddressStatus.link_to_sign_in_email_sent || emailAddressStatus.sign_in_code_email_sent);\n    // console.log('showVerifyModal:', showVerifyModal, ', signInLinkOrCodeSent:', signInLinkOrCodeSent);\n    const emailAddressStatusHtml = (\n      <span>\n        { emailAddressStatus.email_address_not_valid ||\n        (emailAddressStatus.email_address_already_owned_by_this_voter && !emailAddressStatus.email_address_deleted && !emailAddressStatus.make_primary_email && !secretCodeSystemLocked) ||\n        (emailAddressStatus.email_address_already_owned_by_other_voter && !signInLinkOrCodeSent && !secretCodeSystemLocked) ||\n        secretCodeSystemLocked ? (\n          <Alert variant=\"warning\">\n            { emailAddressStatus.email_address_not_valid && (\n              <div>Please enter a valid email address.</div>\n            )}\n            { emailAddressStatus.email_address_already_owned_by_other_voter && !signInLinkOrCodeSent && !secretCodeSystemLocked && (\n              <div>\n                That email is already being used by another account.\n                <br />\n                <br />\n                Please click &quot;Send Login Code in an Email&quot; below to sign into that account.\n              </div>\n            )}\n            { emailAddressStatus.email_address_already_owned_by_this_voter && !emailAddressStatus.email_address_deleted && !emailAddressStatus.make_primary_email && !secretCodeSystemLocked ? <div>That email address was already verified by you. </div> : null }\n            { secretCodeSystemLocked && (\n              <div>\n                Your account is locked. Please\n                <OpenExternalWebSite\n                  url=\"https://help.wevote.us/hc/en-us/requests/new\"\n                  target=\"_blank\"\n                  body={<span>contact We Vote support for help.</span>}\n                />\n              </div>\n            )}\n          </Alert>\n          ) : null\n        }\n        { emailAddressStatus.email_address_created ||\n        emailAddressStatus.email_address_deleted ||\n        emailAddressStatus.email_ownership_is_verified ||\n        emailAddressStatus.verification_email_sent ||\n        emailAddressStatus.link_to_sign_in_email_sent ||\n        (emailAddressStatus.make_primary_email && (emailAddressStatus.email_address_created || emailAddressStatus.email_address_found || emailAddressStatus.sign_in_code_email_sent) && !secretCodeSystemLocked) ||\n        emailAddressStatus.sign_in_code_email_sent ? (\n          <Alert variant=\"success\">\n            { emailAddressStatus.email_address_created &&\n            !emailAddressStatus.verification_email_sent ? <span>Your email address was saved. </span> : null }\n            { emailAddressStatus.email_address_deleted ? <span>Your email address was deleted. </span> : null }\n            { emailAddressStatus.email_ownership_is_verified ? <span>Your email address was verified. </span> : null }\n            { emailAddressStatus.verification_email_sent ? <span>Please check your email. A verification email was sent. </span> : null }\n            { emailAddressStatus.link_to_sign_in_email_sent ? <span>Please check your email. A sign in link was sent. </span> : null }\n            { emailAddressStatus.make_primary_email && (emailAddressStatus.email_address_created || emailAddressStatus.email_address_found || emailAddressStatus.sign_in_code_email_sent) && !secretCodeSystemLocked ? <span>Your have chosen a new primary email. </span> : null }\n            { emailAddressStatus.sign_in_code_email_sent ? <span>Please check your email. A sign in verification code was sent. </span> : null }\n          </Alert>\n          ) : null\n        }\n      </span>\n    );\n\n    let enterEmailTitle = 'Sign in with Email';\n    // let enterEmailExplanation = isWebApp() ? \"You'll receive a magic link in your email. Click that link to be signed into your We Vote account.\" :\n    //   \"You'll receive a magic link in the email on this phone. Click that link to be signed into your We Vote account.\";\n    if (this.state.voter && this.state.voter.is_signed_in) {\n      enterEmailTitle = 'Add New Email';\n      // enterEmailExplanation = isWebApp() ? \"You'll receive a magic link in your email. Click that link to verify this new email.\" :\n      //   \"You'll receive a magic link in the email on this phone. Click that link to verify this new email.\";\n    }\n\n    const enterEmailHtml = (\n      <div>\n        <div className=\"u-stack--sm u-tl\">\n          <strong>\n            {enterEmailTitle}\n          </strong>\n          {' '}\n          {/* enterEmailExplanation */}\n        </div>\n        <form className=\"form-inline\">\n          <Paper className={classes.root} elevation={1}>\n            <Mail />\n            <InputBase\n              className={classes.input}\n              type=\"email\"\n              name=\"voter_email_address\"\n              id=\"enterVoterEmailAddress\"\n              value={voterEmailAddress}\n              onBlur={this.onEmailInputBlur}\n              onChange={this.updateVoterEmailAddress}\n              onFocus={() => { this.displayEmailVerificationButton(); this.localToggleOtherSignInOptions(); }}\n              placeholder=\"Type email here...\"\n            />\n          </Paper>\n          {displayEmailVerificationButton && (\n            <Button\n              className={classes.button}\n              color=\"primary\"\n              disabled={disableEmailVerificationButton}\n              id=\"voterEmailAddressEntrySendCode\"\n              onClick={this.sendSignInCodeEmail}\n              variant=\"contained\"\n            >\n              Email Verification Code\n            </Button>\n          )}\n        </form>\n      </div>\n    );\n\n    let allowRemoveEmail;\n    let emailOwnershipIsVerified;\n    let isPrimaryEmailAddress;\n\n    // ///////////////////////////////////\n    // LIST OF VERIFIED EMAILS\n    let verifiedEmailsFound = false;\n    const verifiedEmailListHtml = voterEmailAddressList.map((voterEmailAddressFromList) => {\n      emailOwnershipIsVerified = !!voterEmailAddressFromList.email_ownership_is_verified;\n\n      if (emailOwnershipIsVerified) {\n        verifiedEmailsFound = true;\n        allowRemoveEmail = voterEmailAddressFromList.primary_email_address !== true;\n        isPrimaryEmailAddress = voterEmailAddressFromList.primary_email_address === true;\n\n        return (\n          <div key={voterEmailAddressFromList.email_we_vote_id}>\n            <span>{voterEmailAddressFromList.normalized_email_address}</span>\n\n            {isPrimaryEmailAddress && (\n              <span>\n                <span>&nbsp;&nbsp;&nbsp;</span>\n                Primary\n              </span>\n            )}\n            {!isPrimaryEmailAddress && (\n              <span>\n                <span>&nbsp;&nbsp;&nbsp;</span>\n                <span>\n                  <a // eslint-disable-line\n                    onClick={this.setAsPrimaryEmailAddress.bind(this, voterEmailAddressFromList.email_we_vote_id)}\n                  >\n                    Make Primary\n                  </a>\n                  &nbsp;&nbsp;&nbsp;\n                </span>\n                <span>&nbsp;&nbsp;&nbsp;</span>\n                {allowRemoveEmail && (\n                  <a // eslint-disable-line\n                    onClick={this.removeVoterEmailAddress.bind(this, voterEmailAddressFromList.email_we_vote_id)}\n                  >\n                    <Delete />\n                  </a>\n                )}\n              </span>\n            )}\n          </div>\n        );\n      } else {\n        return null;\n      }\n    });\n\n    // ////////////////////////////////////\n    // LIST OF EMAILS TO VERIFY\n    let unverifiedEmailsFound = false;\n    const toVerifyEmailListHtml = voterEmailAddressList.map((voterEmailAddressFromList) => {\n      emailOwnershipIsVerified = !!voterEmailAddressFromList.email_ownership_is_verified;\n      if (!emailOwnershipIsVerified) {\n        unverifiedEmailsFound = true;\n        allowRemoveEmail = !voterEmailAddressFromList.primary_email_address;\n        isPrimaryEmailAddress = !!voterEmailAddressFromList.primary_email_address;\n        return (\n          <div key={voterEmailAddressFromList.email_we_vote_id}>\n            <div>\n              <span>{voterEmailAddressFromList.normalized_email_address}</span>\n              <span>&nbsp;&nbsp;&nbsp;</span>\n              {voterEmailAddressFromList.email_ownership_is_verified ?\n                null : (\n                  <a // eslint-disable-line\n                    onClick={() => this.reSendSignInCodeEmail(voterEmailAddressFromList.normalized_email_address)}\n                  >\n                    Send Verification Again\n                  </a>\n                )}\n\n              <span>&nbsp;&nbsp;&nbsp;</span>\n              {allowRemoveEmail && (\n                <a // eslint-disable-line\n                  onClick={this.removeVoterEmailAddress.bind(this, voterEmailAddressFromList.email_we_vote_id)}\n                >\n                  <Delete />\n                </a>\n              )}\n            </div>\n          </div>\n        );\n      } else {\n        return null;\n      }\n    });\n\n    return (\n      <Wrapper>\n        {!hideExistingEmailAddresses && (\n          <div>\n            {verifiedEmailsFound && !this.props.inModal ? (\n              <EmailSection>\n                <span className=\"h3\">\n                  Your Email\n                  {voterEmailAddressListCount > 1 ? 's' : ''}\n                </span>\n                {emailAddressStatusHtml}\n                {verifiedEmailListHtml}\n              </EmailSection>\n            ) : (\n              <span>\n                {emailAddressStatusHtml}\n              </span>\n            )}\n            {unverifiedEmailsFound && !this.props.inModal && (\n              <EmailSection>\n                <span className=\"h3\">Emails to Verify</span>\n                {toVerifyEmailListHtml}\n              </EmailSection>\n            )}\n          </div>\n        )}\n        <EmailSection>\n          {enterEmailHtml}\n        </EmailSection>\n        {showVerifyModal && (\n          <SettingsVerifySecretCode\n            show={showVerifyModal}\n            closeVerifyModal={this.closeVerifyModal}\n            voterEmailAddress={voterEmailAddress}\n          />\n        )}\n      </Wrapper>\n    );\n  }\n}\n\nconst styles = {\n  root: {\n    display: 'flex',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    width: '100%',\n    paddingLeft: 8,\n    marginBottom: 8,\n  },\n  input: {\n    marginLeft: 8,\n    flex: 1,\n    padding: 8,\n  },\n  button: {\n    width: '100%',\n    padding: '12px',\n  },\n};\n\nconst Wrapper = styled.div`\n  margin-top: 32px;\n`;\n\nconst EmailSection = styled.div`\n  margin-top: 18px;\n`;\n\nexport default withStyles(styles)(VoterEmailAddressEntry);\n"]}*/