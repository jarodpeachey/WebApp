.i110fb49{font-size:14px;font-weight:bold;}
.i1ph78ni{font-size:14px;font-weight:normal;}
.b1u7jjqk{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:end;-webkit-justify-content:flex-end;-ms-flex-pack:end;justify-content:flex-end;width:-webkit-fit-content;width:-moz-fit-content;width:fit-content;width:100%;margin-top:12px;}
.shqjx7l{width:100%;height:2px;background:#eee;margin:16px 0;}
/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkQ6XFxKYXJvZFxcV2VWb3RlXFxXZWJBcHBcXHNyY1xcanNcXGNvbXBvbmVudHNcXFNldHRpbmdzXFxTZXR0aW5nc0FuYWx5dGljcy5qc3giXSwibmFtZXMiOlsiLmkxMTBmYjQ5IiwiLmkxcGg3OG5pIiwiLmIxdTdqanFrIiwiLnNocWp4N2wiXSwibWFwcGluZ3MiOiJBQXdaTUE7QUFLQUM7QUFLQUM7QUFTQUMiLCJmaWxlIjoiRDpcXEphcm9kXFxXZVZvdGVcXFdlYkFwcFxcc3JjXFxqc1xcY29tcG9uZW50c1xcU2V0dGluZ3NcXFNldHRpbmdzQW5hbHl0aWNzLmpzeCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgSGVsbWV0IGZyb20gJ3JlYWN0LWhlbG1ldCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgc3R5bGVkIH0gZnJvbSAnbGluYXJpYS9yZWFjdCc7XG5pbXBvcnQgeyB3aXRoU3R5bGVzIH0gZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUnO1xuaW1wb3J0IEJ1dHRvbiBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZS9CdXR0b24nO1xuaW1wb3J0IEZvcm1Db250cm9sIGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlL0Zvcm1Db250cm9sJztcbmltcG9ydCBUZXh0RmllbGQgZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUvVGV4dEZpZWxkJztcbmltcG9ydCBBcHBBY3Rpb25zIGZyb20gJy4uLy4uL2FjdGlvbnMvQXBwQWN0aW9ucyc7XG5pbXBvcnQgTG9hZGluZ1doZWVsIGZyb20gJy4uL0xvYWRpbmdXaGVlbCc7XG5pbXBvcnQgT3JnYW5pemF0aW9uQWN0aW9ucyBmcm9tICcuLi8uLi9hY3Rpb25zL09yZ2FuaXphdGlvbkFjdGlvbnMnO1xuaW1wb3J0IE9yZ2FuaXphdGlvblN0b3JlIGZyb20gJy4uLy4uL3N0b3Jlcy9Pcmdhbml6YXRpb25TdG9yZSc7XG5pbXBvcnQgeyByZW5kZXJMb2cgfSBmcm9tICcuLi8uLi91dGlscy9sb2dnaW5nJztcbmltcG9ydCBTZXR0aW5nc0FjY291bnRMZXZlbENoaXAgZnJvbSAnLi9TZXR0aW5nc0FjY291bnRMZXZlbENoaXAnO1xuaW1wb3J0IHsgdm90ZXJGZWF0dXJlUGFja2FnZUV4Y2VlZHNPckVxdWFsc1JlcXVpcmVkIH0gZnJvbSAnLi4vLi4vdXRpbHMvcHJpY2luZ0Z1bmN0aW9ucyc7XG5pbXBvcnQgVm90ZXJTdG9yZSBmcm9tICcuLi8uLi9zdG9yZXMvVm90ZXJTdG9yZSc7XG5cbmNsYXNzIFNldHRpbmdzQW5hbHl0aWNzIGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgc3RhdGljIHByb3BUeXBlcyA9IHtcbiAgICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuICB9O1xuXG4gIGNvbnN0cnVjdG9yIChwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgY2hvc2VuRmVhdHVyZVBhY2thZ2U6ICdGUkVFJyxcbiAgICAgIGFuYWx5dGljc0J1dHRvbnNBY3RpdmU6ICcnLFxuICAgICAgb3JnYW5pemF0aW9uOiB7fSxcbiAgICAgIG9yZ2FuaXphdGlvbldlVm90ZUlkOiAnJyxcbiAgICAgIG9yZ2FuaXphdGlvbkNob3Nlbkdvb2dsZUFuYWx5dGljc1RyYWNrZXI6ICcnLFxuICAgICAgb3JnYW5pemF0aW9uQ2hvc2VuR29vZ2xlQW5hbHl0aWNzVHJhY2tlclNhdmVkVmFsdWU6ICcnLFxuICAgICAgb3JnYW5pemF0aW9uQ2hvc2VuR29vZ2xlQW5hbHl0aWNzVHJhY2tlckNoYW5nZWRMb2NhbGx5OiBmYWxzZSxcbiAgICAgIG9yZ2FuaXphdGlvbkNob3Nlbkh0bWxWZXJpZmljYXRpb246ICcnLFxuICAgICAgb3JnYW5pemF0aW9uQ2hvc2VuSHRtbFZlcmlmaWNhdGlvblNhdmVkVmFsdWU6ICcnLFxuICAgICAgb3JnYW5pemF0aW9uQ2hvc2VuSHRtbFZlcmlmaWNhdGlvbkNoYW5nZWRMb2NhbGx5OiBmYWxzZSxcbiAgICAgIHZvdGVyOiB7fSxcbiAgICAgIHZvdGVyRmVhdHVyZVBhY2thZ2VFeGNlZWRzT3JFcXVhbHNFbnRlcnByaXNlOiBmYWxzZSxcbiAgICAgIHZvdGVySXNTaWduZWRJbjogZmFsc2UsXG4gICAgfTtcbiAgfVxuXG4gIGNvbXBvbmVudERpZE1vdW50ICgpIHtcbiAgICAvLyBjb25zb2xlLmxvZyhcIlNldHRpbmdzQW5hbHl0aWNzIGNvbXBvbmVudERpZE1vdW50XCIpO1xuICAgIHRoaXMub25Wb3RlclN0b3JlQ2hhbmdlKCk7XG4gICAgdGhpcy5vbk9yZ2FuaXphdGlvblN0b3JlQ2hhbmdlKCk7XG4gICAgdGhpcy5vcmdhbml6YXRpb25TdG9yZUxpc3RlbmVyID0gT3JnYW5pemF0aW9uU3RvcmUuYWRkTGlzdGVuZXIodGhpcy5vbk9yZ2FuaXphdGlvblN0b3JlQ2hhbmdlLmJpbmQodGhpcykpO1xuICAgIHRoaXMudm90ZXJTdG9yZUxpc3RlbmVyID0gVm90ZXJTdG9yZS5hZGRMaXN0ZW5lcih0aGlzLm9uVm90ZXJTdG9yZUNoYW5nZS5iaW5kKHRoaXMpKTtcbiAgfVxuXG4gIHNob3VsZENvbXBvbmVudFVwZGF0ZSAobmV4dFByb3BzLCBuZXh0U3RhdGUpIHtcbiAgICBpZiAodGhpcy5zdGF0ZS5vcmdhbml6YXRpb25XZVZvdGVJZCAhPT0gbmV4dFN0YXRlLm9yZ2FuaXphdGlvbldlVm90ZUlkKSB7XG4gICAgICAvLyBjb25zb2xlLmxvZygndGhpcy5zdGF0ZS5vcmdhbml6YXRpb25XZVZvdGVJZCcsIHRoaXMuc3RhdGUub3JnYW5pemF0aW9uV2VWb3RlSWQsICcsIG5leHRTdGF0ZS5vcmdhbml6YXRpb25XZVZvdGVJZCcsIG5leHRTdGF0ZS5vcmdhbml6YXRpb25XZVZvdGVJZCk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKHRoaXMuc3RhdGUudm90ZXJJc1NpZ25lZEluICE9PSBuZXh0U3RhdGUudm90ZXJJc1NpZ25lZEluKSB7XG4gICAgICAvLyBjb25zb2xlLmxvZygndGhpcy5zdGF0ZS52b3RlcklzU2lnbmVkSW4nLCB0aGlzLnN0YXRlLnZvdGVySXNTaWduZWRJbiwgJywgbmV4dFN0YXRlLnZvdGVySXNTaWduZWRJbicsIG5leHRTdGF0ZS52b3RlcklzU2lnbmVkSW4pO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGlmICh0aGlzLnN0YXRlLmFuYWx5dGljc0J1dHRvbnNBY3RpdmUgIT09IG5leHRTdGF0ZS5hbmFseXRpY3NCdXR0b25zQWN0aXZlKSB7XG4gICAgICAvLyBjb25zb2xlLmxvZygndGhpcy5zdGF0ZS5hbmFseXRpY3NCdXR0b25zQWN0aXZlJywgdGhpcy5zdGF0ZS5hbmFseXRpY3NCdXR0b25zQWN0aXZlLCAnLCBuZXh0U3RhdGUuYW5hbHl0aWNzQnV0dG9uc0FjdGl2ZScsIG5leHRTdGF0ZS5hbmFseXRpY3NCdXR0b25zQWN0aXZlKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBpZiAodGhpcy5zdGF0ZS5vcmdhbml6YXRpb25DaG9zZW5Hb29nbGVBbmFseXRpY3NUcmFja2VyICE9PSBuZXh0U3RhdGUub3JnYW5pemF0aW9uQ2hvc2VuR29vZ2xlQW5hbHl0aWNzVHJhY2tlcikge1xuICAgICAgLy8gY29uc29sZS5sb2coJ3RoaXMuc3RhdGUub3JnYW5pemF0aW9uQ2hvc2VuR29vZ2xlQW5hbHl0aWNzVHJhY2tlcicsIHRoaXMuc3RhdGUub3JnYW5pemF0aW9uQ2hvc2VuR29vZ2xlQW5hbHl0aWNzVHJhY2tlciwgJywgbmV4dFN0YXRlLm9yZ2FuaXphdGlvbkNob3Nlbkdvb2dsZUFuYWx5dGljc1RyYWNrZXInLCBuZXh0U3RhdGUub3JnYW5pemF0aW9uQ2hvc2VuR29vZ2xlQW5hbHl0aWNzVHJhY2tlcik7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKHRoaXMuc3RhdGUub3JnYW5pemF0aW9uQ2hvc2VuR29vZ2xlQW5hbHl0aWNzVHJhY2tlckNoYW5nZWRMb2NhbGx5ICE9PSBuZXh0U3RhdGUub3JnYW5pemF0aW9uQ2hvc2VuR29vZ2xlQW5hbHl0aWNzVHJhY2tlckNoYW5nZWRMb2NhbGx5KSB7XG4gICAgICAvLyBjb25zb2xlLmxvZygndGhpcy5zdGF0ZS5vcmdhbml6YXRpb25DaG9zZW5Hb29nbGVBbmFseXRpY3NUcmFja2VyQ2hhbmdlZExvY2FsbHknLCB0aGlzLnN0YXRlLm9yZ2FuaXphdGlvbkNob3Nlbkdvb2dsZUFuYWx5dGljc1RyYWNrZXJDaGFuZ2VkTG9jYWxseSwgJywgbmV4dFN0YXRlLm9yZ2FuaXphdGlvbkNob3Nlbkdvb2dsZUFuYWx5dGljc1RyYWNrZXJDaGFuZ2VkTG9jYWxseScsIG5leHRTdGF0ZS5vcmdhbml6YXRpb25DaG9zZW5Hb29nbGVBbmFseXRpY3NUcmFja2VyQ2hhbmdlZExvY2FsbHkpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGlmICh0aGlzLnN0YXRlLm9yZ2FuaXphdGlvbkNob3Nlbkdvb2dsZUFuYWx5dGljc1RyYWNrZXJTYXZlZFZhbHVlICE9PSBuZXh0U3RhdGUub3JnYW5pemF0aW9uQ2hvc2VuR29vZ2xlQW5hbHl0aWNzVHJhY2tlclNhdmVkVmFsdWUpIHtcbiAgICAgIC8vIGNvbnNvbGUubG9nKCd0aGlzLnN0YXRlLm9yZ2FuaXphdGlvbkNob3Nlbkdvb2dsZUFuYWx5dGljc1RyYWNrZXJTYXZlZFZhbHVlJywgdGhpcy5zdGF0ZS5vcmdhbml6YXRpb25DaG9zZW5Hb29nbGVBbmFseXRpY3NUcmFja2VyU2F2ZWRWYWx1ZSwgJywgbmV4dFN0YXRlLm9yZ2FuaXphdGlvbkNob3Nlbkdvb2dsZUFuYWx5dGljc1RyYWNrZXJTYXZlZFZhbHVlJywgbmV4dFN0YXRlLm9yZ2FuaXphdGlvbkNob3Nlbkdvb2dsZUFuYWx5dGljc1RyYWNrZXJTYXZlZFZhbHVlKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBpZiAodGhpcy5zdGF0ZS5vcmdhbml6YXRpb25DaG9zZW5IdG1sVmVyaWZpY2F0aW9uICE9PSBuZXh0U3RhdGUub3JnYW5pemF0aW9uQ2hvc2VuSHRtbFZlcmlmaWNhdGlvbikge1xuICAgICAgLy8gY29uc29sZS5sb2coJ3RoaXMuc3RhdGUub3JnYW5pemF0aW9uQ2hvc2VuSHRtbFZlcmlmaWNhdGlvbicsIHRoaXMuc3RhdGUub3JnYW5pemF0aW9uQ2hvc2VuSHRtbFZlcmlmaWNhdGlvbiwgJywgbmV4dFN0YXRlLm9yZ2FuaXphdGlvbkNob3Nlbkh0bWxWZXJpZmljYXRpb24nLCBuZXh0U3RhdGUub3JnYW5pemF0aW9uQ2hvc2VuSHRtbFZlcmlmaWNhdGlvbik7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKHRoaXMuc3RhdGUub3JnYW5pemF0aW9uQ2hvc2VuSHRtbFZlcmlmaWNhdGlvbkNoYW5nZWRMb2NhbGx5ICE9PSBuZXh0U3RhdGUub3JnYW5pemF0aW9uQ2hvc2VuSHRtbFZlcmlmaWNhdGlvbkNoYW5nZWRMb2NhbGx5KSB7XG4gICAgICAvLyBjb25zb2xlLmxvZygndGhpcy5zdGF0ZS5vcmdhbml6YXRpb25DaG9zZW5IdG1sVmVyaWZpY2F0aW9uQ2hhbmdlZExvY2FsbHknLCB0aGlzLnN0YXRlLm9yZ2FuaXphdGlvbkNob3Nlbkh0bWxWZXJpZmljYXRpb25DaGFuZ2VkTG9jYWxseSwgJywgbmV4dFN0YXRlLm9yZ2FuaXphdGlvbkNob3Nlbkh0bWxWZXJpZmljYXRpb25DaGFuZ2VkTG9jYWxseScsIG5leHRTdGF0ZS5vcmdhbml6YXRpb25DaG9zZW5IdG1sVmVyaWZpY2F0aW9uQ2hhbmdlZExvY2FsbHkpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGlmICh0aGlzLnN0YXRlLm9yZ2FuaXphdGlvbkNob3Nlbkh0bWxWZXJpZmljYXRpb25TYXZlZFZhbHVlICE9PSBuZXh0U3RhdGUub3JnYW5pemF0aW9uQ2hvc2VuSHRtbFZlcmlmaWNhdGlvblNhdmVkVmFsdWUpIHtcbiAgICAgIC8vIGNvbnNvbGUubG9nKCd0aGlzLnN0YXRlLm9yZ2FuaXphdGlvbkNob3Nlbkh0bWxWZXJpZmljYXRpb25TYXZlZFZhbHVlJywgdGhpcy5zdGF0ZS5vcmdhbml6YXRpb25DaG9zZW5IdG1sVmVyaWZpY2F0aW9uU2F2ZWRWYWx1ZSwgJywgbmV4dFN0YXRlLm9yZ2FuaXphdGlvbkNob3Nlbkh0bWxWZXJpZmljYXRpb25TYXZlZFZhbHVlJywgbmV4dFN0YXRlLm9yZ2FuaXphdGlvbkNob3Nlbkh0bWxWZXJpZmljYXRpb25TYXZlZFZhbHVlKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBpZiAodGhpcy5zdGF0ZS52b3RlckZlYXR1cmVQYWNrYWdlRXhjZWVkc09yRXF1YWxzRW50ZXJwcmlzZSAhPT0gbmV4dFN0YXRlLnZvdGVyRmVhdHVyZVBhY2thZ2VFeGNlZWRzT3JFcXVhbHNFbnRlcnByaXNlKSB7XG4gICAgICAvLyBjb25zb2xlLmxvZygndGhpcy5zdGF0ZS52b3RlckZlYXR1cmVQYWNrYWdlRXhjZWVkc09yRXF1YWxzRW50ZXJwcmlzZScsIHRoaXMuc3RhdGUudm90ZXJGZWF0dXJlUGFja2FnZUV4Y2VlZHNPckVxdWFsc0VudGVycHJpc2UsICcsIG5leHRTdGF0ZS52b3RlckZlYXR1cmVQYWNrYWdlRXhjZWVkc09yRXF1YWxzRW50ZXJwcmlzZScsIG5leHRTdGF0ZS52b3RlckZlYXR1cmVQYWNrYWdlRXhjZWVkc09yRXF1YWxzRW50ZXJwcmlzZSk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgY29uc3QgcHJpb3JPcmdhbml6YXRpb24gPSB0aGlzLnN0YXRlLm9yZ2FuaXphdGlvbjtcbiAgICBjb25zdCBuZXh0T3JnYW5pemF0aW9uID0gbmV4dFN0YXRlLm9yZ2FuaXphdGlvbjtcblxuICAgIGNvbnN0IHByaW9yQ2hvc2VuR29vZ2xlQW5hbHl0aWNzVHJhY2tlciA9IHByaW9yT3JnYW5pemF0aW9uLmNob3Nlbl9nb29nbGVfYW5hbHl0aWNzX2FjY291bnRfbnVtYmVyIHx8ICcnO1xuICAgIGNvbnN0IG5leHRDaG9zZW5Hb29nbGVBbmFseXRpY3NUcmFja2VyID0gbmV4dE9yZ2FuaXphdGlvbi5jaG9zZW5fZ29vZ2xlX2FuYWx5dGljc19hY2NvdW50X251bWJlciB8fCAnJztcbiAgICBjb25zdCBwcmlvckNob3Nlbkh0bWxWZXJpZmljYXRpb24gPSBwcmlvck9yZ2FuaXphdGlvbi5jaG9zZW5faHRtbF92ZXJpZmljYXRpb25fc3RyaW5nIHx8ICcnO1xuICAgIGNvbnN0IG5leHRDaG9zZW5IdG1sVmVyaWZpY2F0aW9uID0gbmV4dE9yZ2FuaXphdGlvbi5jaG9zZW5faHRtbF92ZXJpZmljYXRpb25fc3RyaW5nIHx8ICcnO1xuXG4gICAgaWYgKHByaW9yQ2hvc2VuR29vZ2xlQW5hbHl0aWNzVHJhY2tlciAhPT0gbmV4dENob3Nlbkdvb2dsZUFuYWx5dGljc1RyYWNrZXIpIHtcbiAgICAgIC8vIGNvbnNvbGUubG9nKCdwcmlvckNob3Nlbkdvb2dsZUFuYWx5dGljc1RyYWNrZXInLCBwcmlvckNob3Nlbkdvb2dsZUFuYWx5dGljc1RyYWNrZXIsICcsIG5leHRDaG9zZW5Hb29nbGVBbmFseXRpY3NUcmFja2VyJywgbmV4dENob3Nlbkdvb2dsZUFuYWx5dGljc1RyYWNrZXIpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGlmIChwcmlvckNob3Nlbkh0bWxWZXJpZmljYXRpb24gIT09IG5leHRDaG9zZW5IdG1sVmVyaWZpY2F0aW9uKSB7XG4gICAgICAvLyBjb25zb2xlLmxvZygncHJpb3JDaG9zZW5IdG1sVmVyaWZpY2F0aW9uJywgcHJpb3JDaG9zZW5IdG1sVmVyaWZpY2F0aW9uLCAnLCBuZXh0Q2hvc2VuSHRtbFZlcmlmaWNhdGlvbicsIG5leHRDaG9zZW5IdG1sVmVyaWZpY2F0aW9uKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICAvLyBjb25zb2xlLmxvZygnc2hvdWxkQ29tcG9uZW50VXBkYXRlIGZhbHNlJyk7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgY29tcG9uZW50V2lsbFVubW91bnQgKCkge1xuICAgIHRoaXMub3JnYW5pemF0aW9uU3RvcmVMaXN0ZW5lci5yZW1vdmUoKTtcbiAgICB0aGlzLnZvdGVyU3RvcmVMaXN0ZW5lci5yZW1vdmUoKTtcbiAgfVxuXG4gIG9uT3JnYW5pemF0aW9uU3RvcmVDaGFuZ2UgPSAoKSA9PiB7XG4gICAgY29uc3QgeyBvcmdhbml6YXRpb25DaG9zZW5Hb29nbGVBbmFseXRpY3NUcmFja2VyQ2hhbmdlZExvY2FsbHksIG9yZ2FuaXphdGlvbkNob3Nlbkh0bWxWZXJpZmljYXRpb25DaGFuZ2VkTG9jYWxseSwgb3JnYW5pemF0aW9uV2VWb3RlSWQgfSA9IHRoaXMuc3RhdGU7XG4gICAgaWYgKG9yZ2FuaXphdGlvbldlVm90ZUlkKSB7XG4gICAgICBjb25zdCBvcmdhbml6YXRpb24gPSBPcmdhbml6YXRpb25TdG9yZS5nZXRPcmdhbml6YXRpb25CeVdlVm90ZUlkKG9yZ2FuaXphdGlvbldlVm90ZUlkKTtcbiAgICAgIGNvbnN0IG9yZ2FuaXphdGlvbkNob3Nlbkdvb2dsZUFuYWx5dGljc1RyYWNrZXJTYXZlZFZhbHVlID0gb3JnYW5pemF0aW9uLmNob3Nlbl9nb29nbGVfYW5hbHl0aWNzX2FjY291bnRfbnVtYmVyIHx8ICcnO1xuICAgICAgY29uc3Qgb3JnYW5pemF0aW9uQ2hvc2VuSHRtbFZlcmlmaWNhdGlvblNhdmVkVmFsdWUgPSBvcmdhbml6YXRpb24uY2hvc2VuX2h0bWxfdmVyaWZpY2F0aW9uX3N0cmluZyB8fCAnJztcbiAgICAgIGNvbnN0IGNob3NlbkZlYXR1cmVQYWNrYWdlID0gT3JnYW5pemF0aW9uU3RvcmUuZ2V0Q2hvc2VuRmVhdHVyZVBhY2thZ2UoKTtcbiAgICAgIGNvbnN0IHZvdGVyRmVhdHVyZVBhY2thZ2VFeGNlZWRzT3JFcXVhbHNFbnRlcnByaXNlID0gdm90ZXJGZWF0dXJlUGFja2FnZUV4Y2VlZHNPckVxdWFsc1JlcXVpcmVkKGNob3NlbkZlYXR1cmVQYWNrYWdlLCAnRU5URVJQUklTRScpO1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIGNob3NlbkZlYXR1cmVQYWNrYWdlLFxuICAgICAgICBvcmdhbml6YXRpb24sXG4gICAgICAgIG9yZ2FuaXphdGlvbkNob3Nlbkdvb2dsZUFuYWx5dGljc1RyYWNrZXJTYXZlZFZhbHVlLFxuICAgICAgICBvcmdhbml6YXRpb25DaG9zZW5IdG1sVmVyaWZpY2F0aW9uU2F2ZWRWYWx1ZSxcbiAgICAgICAgdm90ZXJGZWF0dXJlUGFja2FnZUV4Y2VlZHNPckVxdWFsc0VudGVycHJpc2UsXG4gICAgICB9KTtcbiAgICAgIC8vIElmIGl0IGhhc24ndCBiZWVuIGNoYW5nZWQgbG9jYWxseSwgdGhlbiB1c2UgdGhlIG9uZSBzYXZlZCBpbiB0aGUgQVBJIHNlcnZlclxuICAgICAgaWYgKCFvcmdhbml6YXRpb25DaG9zZW5Hb29nbGVBbmFseXRpY3NUcmFja2VyQ2hhbmdlZExvY2FsbHkpIHtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgb3JnYW5pemF0aW9uQ2hvc2VuR29vZ2xlQW5hbHl0aWNzVHJhY2tlcjogb3JnYW5pemF0aW9uQ2hvc2VuR29vZ2xlQW5hbHl0aWNzVHJhY2tlclNhdmVkVmFsdWUgfHwgJycsXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgLy8gSWYgaXQgaGFzbid0IGJlZW4gY2hhbmdlZCBsb2NhbGx5LCB0aGVuIHVzZSB0aGUgb25lIHNhdmVkIGluIHRoZSBBUEkgc2VydmVyXG4gICAgICBpZiAoIW9yZ2FuaXphdGlvbkNob3Nlbkh0bWxWZXJpZmljYXRpb25DaGFuZ2VkTG9jYWxseSkge1xuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICBvcmdhbml6YXRpb25DaG9zZW5IdG1sVmVyaWZpY2F0aW9uOiBvcmdhbml6YXRpb25DaG9zZW5IdG1sVmVyaWZpY2F0aW9uU2F2ZWRWYWx1ZSB8fCAnJyxcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIG9uVm90ZXJTdG9yZUNoYW5nZSA9ICgpID0+IHtcbiAgICBjb25zdCB7IG9yZ2FuaXphdGlvbkNob3Nlbkdvb2dsZUFuYWx5dGljc1RyYWNrZXJDaGFuZ2VkTG9jYWxseSwgb3JnYW5pemF0aW9uQ2hvc2VuSHRtbFZlcmlmaWNhdGlvbkNoYW5nZWRMb2NhbGx5IH0gPSB0aGlzLnN0YXRlO1xuICAgIGNvbnN0IHZvdGVyID0gVm90ZXJTdG9yZS5nZXRWb3RlcigpO1xuICAgIGNvbnN0IHZvdGVySXNTaWduZWRJbiA9IHZvdGVyLmlzX3NpZ25lZF9pbjtcbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIHZvdGVyLFxuICAgICAgdm90ZXJJc1NpZ25lZEluLFxuICAgIH0pO1xuICAgIGNvbnN0IG9yZ2FuaXphdGlvbldlVm90ZUlkID0gdm90ZXIubGlua2VkX29yZ2FuaXphdGlvbl93ZV92b3RlX2lkO1xuICAgIGlmIChvcmdhbml6YXRpb25XZVZvdGVJZCkge1xuICAgICAgY29uc3Qgb3JnYW5pemF0aW9uID0gT3JnYW5pemF0aW9uU3RvcmUuZ2V0T3JnYW5pemF0aW9uQnlXZVZvdGVJZChvcmdhbml6YXRpb25XZVZvdGVJZCk7XG4gICAgICBjb25zdCBvcmdhbml6YXRpb25DaG9zZW5Hb29nbGVBbmFseXRpY3NUcmFja2VyU2F2ZWRWYWx1ZSA9IG9yZ2FuaXphdGlvbi5jaG9zZW5fZ29vZ2xlX2FuYWx5dGljc19hY2NvdW50X251bWJlciB8fCAnJztcbiAgICAgIGNvbnN0IG9yZ2FuaXphdGlvbkNob3Nlbkh0bWxWZXJpZmljYXRpb25TYXZlZFZhbHVlID0gb3JnYW5pemF0aW9uLmNob3Nlbl9odG1sX3ZlcmlmaWNhdGlvbl9zdHJpbmcgfHwgJyc7XG4gICAgICBjb25zdCBjaG9zZW5GZWF0dXJlUGFja2FnZSA9IE9yZ2FuaXphdGlvblN0b3JlLmdldENob3NlbkZlYXR1cmVQYWNrYWdlKCk7XG4gICAgICBjb25zdCB2b3RlckZlYXR1cmVQYWNrYWdlRXhjZWVkc09yRXF1YWxzRW50ZXJwcmlzZSA9IHZvdGVyRmVhdHVyZVBhY2thZ2VFeGNlZWRzT3JFcXVhbHNSZXF1aXJlZChjaG9zZW5GZWF0dXJlUGFja2FnZSwgJ0VOVEVSUFJJU0UnKTtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICBjaG9zZW5GZWF0dXJlUGFja2FnZSxcbiAgICAgICAgb3JnYW5pemF0aW9uLFxuICAgICAgICBvcmdhbml6YXRpb25DaG9zZW5Hb29nbGVBbmFseXRpY3NUcmFja2VyU2F2ZWRWYWx1ZSxcbiAgICAgICAgb3JnYW5pemF0aW9uQ2hvc2VuSHRtbFZlcmlmaWNhdGlvblNhdmVkVmFsdWUsXG4gICAgICAgIG9yZ2FuaXphdGlvbldlVm90ZUlkLFxuICAgICAgICB2b3RlckZlYXR1cmVQYWNrYWdlRXhjZWVkc09yRXF1YWxzRW50ZXJwcmlzZSxcbiAgICAgIH0pO1xuICAgICAgLy8gSWYgaXQgaGFzbid0IGJlZW4gY2hhbmdlZCBsb2NhbGx5LCB0aGVuIHVzZSB0aGUgb25lIHNhdmVkIGluIHRoZSBBUEkgc2VydmVyXG4gICAgICBpZiAoIW9yZ2FuaXphdGlvbkNob3Nlbkdvb2dsZUFuYWx5dGljc1RyYWNrZXJDaGFuZ2VkTG9jYWxseSkge1xuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICBvcmdhbml6YXRpb25DaG9zZW5Hb29nbGVBbmFseXRpY3NUcmFja2VyOiBvcmdhbml6YXRpb25DaG9zZW5Hb29nbGVBbmFseXRpY3NUcmFja2VyU2F2ZWRWYWx1ZSB8fCAnJyxcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICAvLyBJZiBpdCBoYXNuJ3QgYmVlbiBjaGFuZ2VkIGxvY2FsbHksIHRoZW4gdXNlIHRoZSBvbmUgc2F2ZWQgaW4gdGhlIEFQSSBzZXJ2ZXJcbiAgICAgIGlmICghb3JnYW5pemF0aW9uQ2hvc2VuSHRtbFZlcmlmaWNhdGlvbkNoYW5nZWRMb2NhbGx5KSB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgIG9yZ2FuaXphdGlvbkNob3Nlbkh0bWxWZXJpZmljYXRpb246IG9yZ2FuaXphdGlvbkNob3Nlbkh0bWxWZXJpZmljYXRpb25TYXZlZFZhbHVlIHx8ICcnLFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgaGFuZGxlT3JnYW5pemF0aW9uQ2hvc2VuSHRtbFZlcmlmaWNhdGlvbkNoYW5nZSA9IChldmVudCkgPT4ge1xuICAgIGNvbnN0IHsgb3JnYW5pemF0aW9uQ2hvc2VuSHRtbFZlcmlmaWNhdGlvbiB9ID0gdGhpcy5zdGF0ZTtcbiAgICAvLyBjb25zb2xlLmxvZygnaGFuZGxlT3JnYW5pemF0aW9uQ2hvc2VuSHRtbFZlcmlmaWNhdGlvbkNoYW5nZSwgb3JnYW5pemF0aW9uQ2hvc2VuSHRtbFZlcmlmaWNhdGlvbjogJywgb3JnYW5pemF0aW9uQ2hvc2VuSHRtbFZlcmlmaWNhdGlvbik7XG4gICAgLy8gY29uc29sZS5sb2coJ2hhbmRsZU9yZ2FuaXphdGlvbkNob3Nlbkh0bWxWZXJpZmljYXRpb25DaGFuZ2UsIGV2ZW50LnRhcmdldC52YWx1ZTogJywgZXZlbnQudGFyZ2V0LnZhbHVlKTtcbiAgICBpZiAoZXZlbnQudGFyZ2V0LnZhbHVlICE9PSBvcmdhbml6YXRpb25DaG9zZW5IdG1sVmVyaWZpY2F0aW9uKSB7XG4gICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgYW5hbHl0aWNzQnV0dG9uc0FjdGl2ZTogJ29yZ2FuaXphdGlvbkNob3Nlbkh0bWxWZXJpZmljYXRpb25CdXR0b25zQWN0aXZlJyxcbiAgICAgICAgb3JnYW5pemF0aW9uQ2hvc2VuSHRtbFZlcmlmaWNhdGlvbjogZXZlbnQudGFyZ2V0LnZhbHVlIHx8ICcnLFxuICAgICAgICBvcmdhbml6YXRpb25DaG9zZW5IdG1sVmVyaWZpY2F0aW9uQ2hhbmdlZExvY2FsbHk6IHRydWUsXG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgaGFuZGxlT3JnYW5pemF0aW9uQ2hvc2VuR29vZ2xlQW5hbHl0aWNzVHJhY2tlckNoYW5nZSA9IChldmVudCkgPT4ge1xuICAgIGNvbnN0IHsgb3JnYW5pemF0aW9uQ2hvc2VuR29vZ2xlQW5hbHl0aWNzVHJhY2tlciB9ID0gdGhpcy5zdGF0ZTtcbiAgICAvLyBjb25zb2xlLmxvZygnaGFuZGxlT3JnYW5pemF0aW9uQ2hvc2VuR29vZ2xlQW5hbHl0aWNzVHJhY2tlckNoYW5nZSwgb3JnYW5pemF0aW9uQ2hvc2VuR29vZ2xlQW5hbHl0aWNzVHJhY2tlcjogJywgb3JnYW5pemF0aW9uQ2hvc2VuR29vZ2xlQW5hbHl0aWNzVHJhY2tlcik7XG4gICAgLy8gY29uc29sZS5sb2coJ2hhbmRsZU9yZ2FuaXphdGlvbkNob3Nlbkdvb2dsZUFuYWx5dGljc1RyYWNrZXJDaGFuZ2UsIGV2ZW50LnRhcmdldC52YWx1ZTogJywgZXZlbnQudGFyZ2V0LnZhbHVlKTtcbiAgICBpZiAoZXZlbnQudGFyZ2V0LnZhbHVlICE9PSBvcmdhbml6YXRpb25DaG9zZW5Hb29nbGVBbmFseXRpY3NUcmFja2VyKSB7XG4gICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgYW5hbHl0aWNzQnV0dG9uc0FjdGl2ZTogJ29yZ2FuaXphdGlvbkNob3Nlbkdvb2dsZUFuYWx5dGljc1RyYWNrZXJCdXR0b25zQWN0aXZlJyxcbiAgICAgICAgb3JnYW5pemF0aW9uQ2hvc2VuR29vZ2xlQW5hbHl0aWNzVHJhY2tlcjogZXZlbnQudGFyZ2V0LnZhbHVlIHx8ICcnLFxuICAgICAgICBvcmdhbml6YXRpb25DaG9zZW5Hb29nbGVBbmFseXRpY3NUcmFja2VyQ2hhbmdlZExvY2FsbHk6IHRydWUsXG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgc2hvd0Nob3Nlbkdvb2dsZUFuYWx5dGljc1RyYWNrZXJCdXR0b25zID0gKCkgPT4ge1xuICAgIGNvbnN0IHsgYW5hbHl0aWNzQnV0dG9uc0FjdGl2ZSB9ID0gdGhpcy5zdGF0ZTtcbiAgICBpZiAoYW5hbHl0aWNzQnV0dG9uc0FjdGl2ZSAhPT0gJ29yZ2FuaXphdGlvbkNob3Nlbkdvb2dsZUFuYWx5dGljc1RyYWNrZXJCdXR0b25zQWN0aXZlJykge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIGFuYWx5dGljc0J1dHRvbnNBY3RpdmU6ICdvcmdhbml6YXRpb25DaG9zZW5Hb29nbGVBbmFseXRpY3NUcmFja2VyQnV0dG9uc0FjdGl2ZScsXG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgb25DYW5jZWxHb29nbGVBbmFseXRpY3NUcmFja2VyQnV0dG9uID0gKCkgPT4ge1xuICAgIC8vIGNvbnNvbGUubG9nKCdvbkNhbmNlbEdvb2dsZUFuYWx5dGljc1RyYWNrZXJCdXR0b24nKTtcbiAgICBjb25zdCB7IG9yZ2FuaXphdGlvbkNob3Nlbkdvb2dsZUFuYWx5dGljc1RyYWNrZXJTYXZlZFZhbHVlIH0gPSB0aGlzLnN0YXRlO1xuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgb3JnYW5pemF0aW9uQ2hvc2VuR29vZ2xlQW5hbHl0aWNzVHJhY2tlcjogb3JnYW5pemF0aW9uQ2hvc2VuR29vZ2xlQW5hbHl0aWNzVHJhY2tlclNhdmVkVmFsdWUgfHwgJycsXG4gICAgICBvcmdhbml6YXRpb25DaG9zZW5Hb29nbGVBbmFseXRpY3NUcmFja2VyQ2hhbmdlZExvY2FsbHk6IGZhbHNlLFxuICAgIH0pO1xuICB9O1xuXG4gIHNob3dIdG1sVmVyaWZpY2F0aW9uQnV0dG9ucyA9ICgpID0+IHtcbiAgICBjb25zdCB7IGFuYWx5dGljc0J1dHRvbnNBY3RpdmUgfSA9IHRoaXMuc3RhdGU7XG4gICAgaWYgKGFuYWx5dGljc0J1dHRvbnNBY3RpdmUgIT09ICdvcmdhbml6YXRpb25DaG9zZW5IdG1sVmVyaWZpY2F0aW9uQnV0dG9uc0FjdGl2ZScpIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICBhbmFseXRpY3NCdXR0b25zQWN0aXZlOiAnb3JnYW5pemF0aW9uQ2hvc2VuSHRtbFZlcmlmaWNhdGlvbkJ1dHRvbnNBY3RpdmUnLFxuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIG9uQ2FuY2VsSHRtbFZlcmlmaWNhdGlvbkJ1dHRvbiA9ICgpID0+IHtcbiAgICAvLyBjb25zb2xlLmxvZygnb25DYW5jZWxIdG1sVmVyaWZpY2F0aW9uQnV0dG9uJyk7XG4gICAgY29uc3QgeyBvcmdhbml6YXRpb25DaG9zZW5IdG1sVmVyaWZpY2F0aW9uU2F2ZWRWYWx1ZSB9ID0gdGhpcy5zdGF0ZTtcbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIG9yZ2FuaXphdGlvbkNob3Nlbkh0bWxWZXJpZmljYXRpb246IG9yZ2FuaXphdGlvbkNob3Nlbkh0bWxWZXJpZmljYXRpb25TYXZlZFZhbHVlIHx8ICcnLFxuICAgICAgb3JnYW5pemF0aW9uQ2hvc2VuSHRtbFZlcmlmaWNhdGlvbkNoYW5nZWRMb2NhbGx5OiBmYWxzZSxcbiAgICB9KTtcbiAgfTtcblxuICBvblNhdmVHb29nbGVBbmFseXRpY3NUcmFja2VyQnV0dG9uID0gKGV2ZW50KSA9PiB7XG4gICAgLy8gY29uc29sZS5sb2coJ29uU2F2ZUdvb2dsZUFuYWx5dGljc1RyYWNrZXJCdXR0b24nKTtcbiAgICBjb25zdCB7IG9yZ2FuaXphdGlvbkNob3Nlbkdvb2dsZUFuYWx5dGljc1RyYWNrZXIsIG9yZ2FuaXphdGlvbldlVm90ZUlkIH0gPSB0aGlzLnN0YXRlO1xuICAgIE9yZ2FuaXphdGlvbkFjdGlvbnMub3JnYW5pemF0aW9uQ2hvc2VuR29vZ2xlQW5hbHl0aWNzVHJhY2tlclNhdmUob3JnYW5pemF0aW9uV2VWb3RlSWQsIG9yZ2FuaXphdGlvbkNob3Nlbkdvb2dsZUFuYWx5dGljc1RyYWNrZXIpO1xuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgb3JnYW5pemF0aW9uQ2hvc2VuR29vZ2xlQW5hbHl0aWNzVHJhY2tlckNoYW5nZWRMb2NhbGx5OiBmYWxzZSxcbiAgICB9KTtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICB9O1xuXG4gIG9uU2F2ZUh0bWxWZXJpZmljYXRpb25CdXR0b24gPSAoZXZlbnQpID0+IHtcbiAgICAvLyBjb25zb2xlLmxvZygnb25TYXZlSHRtbFZlcmlmaWNhdGlvbkJ1dHRvbicpO1xuICAgIGNvbnN0IHsgb3JnYW5pemF0aW9uQ2hvc2VuSHRtbFZlcmlmaWNhdGlvbiwgb3JnYW5pemF0aW9uV2VWb3RlSWQgfSA9IHRoaXMuc3RhdGU7XG4gICAgT3JnYW5pemF0aW9uQWN0aW9ucy5vcmdhbml6YXRpb25DaG9zZW5IdG1sVmVyaWZpY2F0aW9uU2F2ZShvcmdhbml6YXRpb25XZVZvdGVJZCwgb3JnYW5pemF0aW9uQ2hvc2VuSHRtbFZlcmlmaWNhdGlvbik7XG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBvcmdhbml6YXRpb25DaG9zZW5IdG1sVmVyaWZpY2F0aW9uQ2hhbmdlZExvY2FsbHk6IGZhbHNlLFxuICAgIH0pO1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gIH07XG5cbiAgb3BlblBhaWRBY2NvdW50VXBncmFkZU1vZGFsIChwYWlkQWNjb3VudFVwZ3JhZGVNb2RlKSB7XG4gICAgLy8gY29uc29sZS5sb2coJ1NldHRpbmdzRG9tYWluIG9wZW5QYWlkQWNjb3VudFVwZ3JhZGVNb2RhbCcpO1xuICAgIEFwcEFjdGlvbnMuc2V0U2hvd1BhaWRBY2NvdW50VXBncmFkZU1vZGFsKHBhaWRBY2NvdW50VXBncmFkZU1vZGUpO1xuICB9XG5cbiAgcmVuZGVyICgpIHtcbiAgICByZW5kZXJMb2coJ1NldHRpbmdzQW5hbHl0aWNzJyk7ICAvLyBTZXQgTE9HX1JFTkRFUl9FVkVOVFMgdG8gbG9nIGFsbCByZW5kZXJzXG4gICAgY29uc3Qge1xuICAgICAgY2hvc2VuRmVhdHVyZVBhY2thZ2UsXG4gICAgICBvcmdhbml6YXRpb24sIG9yZ2FuaXphdGlvbldlVm90ZUlkLCB2b3Rlciwgdm90ZXJJc1NpZ25lZEluLCBhbmFseXRpY3NCdXR0b25zQWN0aXZlLFxuICAgICAgb3JnYW5pemF0aW9uQ2hvc2VuR29vZ2xlQW5hbHl0aWNzVHJhY2tlciwgb3JnYW5pemF0aW9uQ2hvc2VuR29vZ2xlQW5hbHl0aWNzVHJhY2tlckNoYW5nZWRMb2NhbGx5LFxuICAgICAgb3JnYW5pemF0aW9uQ2hvc2VuSHRtbFZlcmlmaWNhdGlvbiwgb3JnYW5pemF0aW9uQ2hvc2VuSHRtbFZlcmlmaWNhdGlvbkNoYW5nZWRMb2NhbGx5LFxuICAgICAgdm90ZXJGZWF0dXJlUGFja2FnZUV4Y2VlZHNPckVxdWFsc0VudGVycHJpc2UsXG4gICAgfSA9IHRoaXMuc3RhdGU7XG4gICAgY29uc3QgeyBjbGFzc2VzIH0gPSB0aGlzLnByb3BzO1xuICAgIGlmICghdm90ZXIgfHwgIW9yZ2FuaXphdGlvbldlVm90ZUlkKSB7XG4gICAgICByZXR1cm4gTG9hZGluZ1doZWVsO1xuICAgIH1cblxuICAgIGlmICh2b3RlcklzU2lnbmVkSW4pIHtcbiAgICAgIC8vIGNvbnNvbGUubG9nKCdTZXR0aW5nc0FuYWx5dGljcywgU2lnbmVkIEluLicpO1xuICAgIH1cbiAgICBpZiAob3JnYW5pemF0aW9uICYmIG9yZ2FuaXphdGlvbi53ZV92b3RlX2N1c3RvbV9kb21haW4pIHtcbiAgICAgIC8vIGNvbnNvbGUubG9nKCdTZXR0aW5nc0FuYWx5dGljcywgQ3VzdG9tIERvbWFpbjogJywgb3JnYW5pemF0aW9uLndlX3ZvdGVfY3VzdG9tX2RvbWFpbik7XG4gICAgfVxuICAgIHJldHVybiAoXG4gICAgICA8ZGl2PlxuICAgICAgICA8SGVsbWV0IHRpdGxlPVwiRG9tYWluIFNldHRpbmdzXCIgLz5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjYXJkXCI+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjYXJkLW1haW5cIj5cbiAgICAgICAgICAgIDxoMSBjbGFzc05hbWU9XCJoMlwiPkFuYWx5dGljczwvaDE+XG4gICAgICAgICAgICA8U2VwYXJhdG9yIC8+XG4gICAgICAgICAgICA8Rm9ybUNvbnRyb2wgY2xhc3Nlcz17eyByb290OiBjbGFzc2VzLmZvcm1Db250cm9sIH19PlxuICAgICAgICAgICAgICA8SW5wdXRMYWJlbD5cbiAgICAgICAgICAgICAgICBHb29nbGUgQW5hbHl0aWNzIFRyYWNrZXJcbiAgICAgICAgICAgICAgICA8U2V0dGluZ3NBY2NvdW50TGV2ZWxDaGlwIGNob3NlbkZlYXR1cmVQYWNrYWdlPXtjaG9zZW5GZWF0dXJlUGFja2FnZX0gcmVxdWlyZWRGZWF0dXJlUGFja2FnZT1cIkVOVEVSUFJJU0VcIiAvPlxuICAgICAgICAgICAgICA8L0lucHV0TGFiZWw+XG4gICAgICAgICAgICAgIDxJbnB1dExhYmVsSGVscGVyVGV4dD5BZGQgeW91ciB0cmFja2luZyBjb2RlIChlLmcuLCBVQS1YWFhYWFhYLVgpIHNvIHlvdSBjYW4gd2F0Y2ggdm90ZXIgYWN0aXZpdHkuPC9JbnB1dExhYmVsSGVscGVyVGV4dD5cbiAgICAgICAgICAgICAgPFRleHRGaWVsZFxuICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXt0aGlzLmhhbmRsZU9yZ2FuaXphdGlvbkNob3Nlbkdvb2dsZUFuYWx5dGljc1RyYWNrZXJDaGFuZ2V9XG4gICAgICAgICAgICAgICAgb25DbGljaz17dGhpcy5zaG93Q2hvc2VuR29vZ2xlQW5hbHl0aWNzVHJhY2tlckJ1dHRvbnN9XG4gICAgICAgICAgICAgICAgbGFiZWw9XCJQYXN0ZSBHb29nbGUgQW5hbHl0aWNzIElEIEhlcmUuLi5cIlxuICAgICAgICAgICAgICAgIHZhcmlhbnQ9XCJvdXRsaW5lZFwiXG4gICAgICAgICAgICAgICAgdmFsdWU9e29yZ2FuaXphdGlvbkNob3Nlbkdvb2dsZUFuYWx5dGljc1RyYWNrZXJ9XG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8L0Zvcm1Db250cm9sPlxuICAgICAgICAgICAge2FuYWx5dGljc0J1dHRvbnNBY3RpdmUgPT09ICdvcmdhbml6YXRpb25DaG9zZW5Hb29nbGVBbmFseXRpY3NUcmFja2VyQnV0dG9uc0FjdGl2ZScgJiYgKFxuICAgICAgICAgICAgICA8QnV0dG9uc0NvbnRhaW5lcj5cbiAgICAgICAgICAgICAgICA8QnV0dG9uXG4gICAgICAgICAgICAgICAgICBjbGFzc2VzPXt7IHJvb3Q6IGNsYXNzZXMuYnV0dG9uIH19XG4gICAgICAgICAgICAgICAgICBjb2xvcj1cInByaW1hcnlcIlxuICAgICAgICAgICAgICAgICAgZGlzYWJsZWQ9eyFvcmdhbml6YXRpb25DaG9zZW5Hb29nbGVBbmFseXRpY3NUcmFja2VyQ2hhbmdlZExvY2FsbHl9XG4gICAgICAgICAgICAgICAgICBvbkNsaWNrPXt0aGlzLm9uQ2FuY2VsR29vZ2xlQW5hbHl0aWNzVHJhY2tlckJ1dHRvbn1cbiAgICAgICAgICAgICAgICAgIHZhcmlhbnQ9XCJvdXRsaW5lZFwiXG4gICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgQ2FuY2VsXG4gICAgICAgICAgICAgICAgPC9CdXR0b24+XG4gICAgICAgICAgICAgICAge3ZvdGVyRmVhdHVyZVBhY2thZ2VFeGNlZWRzT3JFcXVhbHNFbnRlcnByaXNlID8gKFxuICAgICAgICAgICAgICAgICAgPEJ1dHRvblxuICAgICAgICAgICAgICAgICAgICBjb2xvcj1cInByaW1hcnlcIlxuICAgICAgICAgICAgICAgICAgICBkaXNhYmxlZD17IW9yZ2FuaXphdGlvbkNob3Nlbkdvb2dsZUFuYWx5dGljc1RyYWNrZXJDaGFuZ2VkTG9jYWxseX1cbiAgICAgICAgICAgICAgICAgICAgb25DbGljaz17dGhpcy5vblNhdmVHb29nbGVBbmFseXRpY3NUcmFja2VyQnV0dG9ufVxuICAgICAgICAgICAgICAgICAgICB2YXJpYW50PVwiY29udGFpbmVkXCJcbiAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgU2F2ZVxuICAgICAgICAgICAgICAgICAgPC9CdXR0b24+XG4gICAgICAgICAgICAgICAgKSA6IChcbiAgICAgICAgICAgICAgICAgIDxCdXR0b25cbiAgICAgICAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4gdGhpcy5vcGVuUGFpZEFjY291bnRVcGdyYWRlTW9kYWwoJ2VudGVycHJpc2UnKX1cbiAgICAgICAgICAgICAgICAgICAgdmFyaWFudD1cImNvbnRhaW5lZFwiXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzZXM9e3sgcm9vdDogY2xhc3Nlcy5nb2xkQnV0dG9uIH19XG4gICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgIDxzcGFuPlxuICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cInUtc2hvdy1kZXNrdG9wLXRhYmxldFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgVXBncmFkZSB0byBFbnRlcnByaXNlXG4gICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cInUtc2hvdy1tb2JpbGVcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIFVwZ3JhZGVcbiAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgIDwvQnV0dG9uPlxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIDwvQnV0dG9uc0NvbnRhaW5lcj5cbiAgICAgICAgICAgICl9XG4gICAgICAgICAgICA8U2VwYXJhdG9yIC8+XG4gICAgICAgICAgICA8Rm9ybUNvbnRyb2wgY2xhc3Nlcz17eyByb290OiBjbGFzc2VzLmZvcm1Db250cm9sIH19PlxuICAgICAgICAgICAgICA8SW5wdXRMYWJlbD5WZXJpZnkgV2VibWFzdGVyIFRvb2w8L0lucHV0TGFiZWw+XG4gICAgICAgICAgICAgIDxJbnB1dExhYmVsSGVscGVyVGV4dD5cbiAgICAgICAgICAgICAgICBBZGQgeW91ciBlbnRpcmUgSFRNTCB2ZXJpZmljYXRpb24gbWV0YSB0YWcgKGUuZy4sICZsdDttZXRhIG5hbWU9JnF1b3Q7Z29vZ2xlLXNpdGUtdmVyaWZpY2F0aW9uJnF1b3Q7IGNvbnRlbnQ9JnF1b3Q7eW91ciB2ZXJpZmljYXRpb24gc3RyaW5nJnF1b3Q7Jmd0OykgdG8gcHJvdmUgdGhhdCB5b3UgY29udHJvbCB0aGlzIHdlYnNpdGUuXG4gICAgICAgICAgICAgIDwvSW5wdXRMYWJlbEhlbHBlclRleHQ+XG4gICAgICAgICAgICAgIDxUZXh0RmllbGRcbiAgICAgICAgICAgICAgICBvbkNoYW5nZT17dGhpcy5oYW5kbGVPcmdhbml6YXRpb25DaG9zZW5IdG1sVmVyaWZpY2F0aW9uQ2hhbmdlfVxuICAgICAgICAgICAgICAgIG9uQ2xpY2s9e3RoaXMuc2hvd0h0bWxWZXJpZmljYXRpb25CdXR0b25zfVxuICAgICAgICAgICAgICAgIGxhYmVsPVwiUGFzdGUgdGhlIEhUTUwgTWV0YSBUYWcgSGVyZS4uLlwiXG4gICAgICAgICAgICAgICAgdmFyaWFudD1cIm91dGxpbmVkXCJcbiAgICAgICAgICAgICAgICB2YWx1ZT17b3JnYW5pemF0aW9uQ2hvc2VuSHRtbFZlcmlmaWNhdGlvbn1cbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDwvRm9ybUNvbnRyb2w+XG4gICAgICAgICAgICB7YW5hbHl0aWNzQnV0dG9uc0FjdGl2ZSA9PT0gJ29yZ2FuaXphdGlvbkNob3Nlbkh0bWxWZXJpZmljYXRpb25CdXR0b25zQWN0aXZlJyA/IChcbiAgICAgICAgICAgICAgPEJ1dHRvbnNDb250YWluZXI+XG4gICAgICAgICAgICAgICAgPEJ1dHRvblxuICAgICAgICAgICAgICAgICAgY2xhc3Nlcz17eyByb290OiBjbGFzc2VzLmJ1dHRvbiB9fVxuICAgICAgICAgICAgICAgICAgY29sb3I9XCJwcmltYXJ5XCJcbiAgICAgICAgICAgICAgICAgIGRpc2FibGVkPXshb3JnYW5pemF0aW9uQ2hvc2VuSHRtbFZlcmlmaWNhdGlvbkNoYW5nZWRMb2NhbGx5fVxuICAgICAgICAgICAgICAgICAgb25DbGljaz17dGhpcy5vbkNhbmNlbEh0bWxWZXJpZmljYXRpb25CdXR0b259XG4gICAgICAgICAgICAgICAgICB2YXJpYW50PVwib3V0bGluZWRcIlxuICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgIENhbmNlbFxuICAgICAgICAgICAgICAgIDwvQnV0dG9uPlxuICAgICAgICAgICAgICAgIDxCdXR0b25cbiAgICAgICAgICAgICAgICAgIGNvbG9yPVwicHJpbWFyeVwiXG4gICAgICAgICAgICAgICAgICBkaXNhYmxlZD17IW9yZ2FuaXphdGlvbkNob3Nlbkh0bWxWZXJpZmljYXRpb25DaGFuZ2VkTG9jYWxseX1cbiAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9e3RoaXMub25TYXZlSHRtbFZlcmlmaWNhdGlvbkJ1dHRvbn1cbiAgICAgICAgICAgICAgICAgIHZhcmlhbnQ9XCJjb250YWluZWRcIlxuICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgIFNhdmVcbiAgICAgICAgICAgICAgICA8L0J1dHRvbj5cbiAgICAgICAgICAgICAgPC9CdXR0b25zQ29udGFpbmVyPlxuICAgICAgICAgICAgKSA6IG51bGx9XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfVxufVxuXG5jb25zdCBzdHlsZXMgPSAoKSA9PiAoe1xuICBmb3JtQ29udHJvbDoge1xuICAgIHdpZHRoOiAnMTAwJScsXG4gIH0sXG4gIHRleHRGaWVsZDoge1xuICAgIGhlaWdodDogNDUsXG4gIH0sXG4gIGJ1dHRvbjoge1xuICAgIG1hcmdpblJpZ2h0OiA4LFxuICB9LFxuICBnb2xkQnV0dG9uOiB7XG4gICAgYmFja2dyb3VuZDogJ2xpbmVhci1ncmFkaWVudCg3MGRlZywgcmdiYSgyMTksMTc5LDg2LDEpIDE0JSwgcmdiYSgxNjIsMTI0LDMzLDEpIDk0JSknLFxuICAgIGNvbG9yOiAnd2hpdGUnLFxuICB9LFxufSk7XG5cbmNvbnN0IElucHV0TGFiZWwgPSBzdHlsZWQuaDRgXG4gIGZvbnQtc2l6ZTogMTRweDtcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XG5gO1xuXG5jb25zdCBJbnB1dExhYmVsSGVscGVyVGV4dCA9IHN0eWxlZC5wYFxuICBmb250LXNpemU6IDE0cHg7XG4gIGZvbnQtd2VpZ2h0OiBub3JtYWw7XG5gO1xuXG5jb25zdCBCdXR0b25zQ29udGFpbmVyID0gc3R5bGVkLmRpdmBcbiAgZGlzcGxheTogZmxleDtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAganVzdGlmeS1jb250ZW50OiBmbGV4LWVuZDtcbiAgd2lkdGg6IGZpdC1jb250ZW50O1xuICB3aWR0aDogMTAwJTtcbiAgbWFyZ2luLXRvcDogMTJweDtcbmA7XG5cbmNvbnN0IFNlcGFyYXRvciA9IHN0eWxlZC5kaXZgXG4gIHdpZHRoOiAxMDAlO1xuICBoZWlnaHQ6IDJweDtcbiAgYmFja2dyb3VuZDogI2VlZTtcbiAgbWFyZ2luOiAxNnB4IDA7XG5gO1xuXG5leHBvcnQgZGVmYXVsdCB3aXRoU3R5bGVzKHN0eWxlcykoU2V0dGluZ3NBbmFseXRpY3MpO1xuIl19*/