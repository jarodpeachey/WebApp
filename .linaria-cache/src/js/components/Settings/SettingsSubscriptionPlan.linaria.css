



.sauperg{height:1px;background:#ddd;width:100%;margin:24px 0;}
.s1ezw7ph{width:100%;border-radius:3px;border:1px solid #ddd;box-shadow:none;margin-bottom:16px;padding:16px 24px;max-width:100%;overflow:hidden;}@media (min-width:576px){.s1ezw7ph{padding:24px;}}
.s19lx4zk{box-shadow:0 1px 3px 0 rgba(0,0,0,0.2),0 1px 1px 0 rgba(0,0,0,0.14),0 2px 1px -1px rgba(0,0,0,0.12);width:100%;border-radius:3px;padding:16px;max-width:100%;overflow:hidden;background:white;margin-bottom:16px;}
.s4c4439{font-size:14px;font-weight:bold;margin:0;margin-bottom:16px;width:-webkit-fit-content;width:-moz-fit-content;width:fit-content;color:#333;}
.s1mn2loy{font-size:14px;margin-bottom:4px;}@media (min-width:569px){.s1mn2loy{font-size:14px;}}
.s1m7jl4r{position:static !important;}
.i9qhbaq{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;width:100%;margin-bottom:4px;}
.fw5cr1f{font-weight:500;color:#444;}
.f15akxjz{font-weight:500;color:black;}
/*# sourceMappingURL=data:application/json;base64,*/