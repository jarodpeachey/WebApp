.i6fs8j6{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:start;-webkit-justify-content:flex-start;-ms-flex-pack:start;justify-content:flex-start;border-left:var(--i6fs8j6-0);padding-left:12px;color:rgba(0,0,0,0.54);height:100%;width:100%;}
.i9ip2a7{font-size:14px;font-weight:bold;color:var(--i9ip2a7-0);}
.i11cstjf{margin:0;font-size:14px;margin-bottom:var(--i11cstjf-0);margin-top:var(--i11cstjf-1);color:var(--i11cstjf-2);}
.i1hvaxcd{color:rgba(0,0,0,0.54);font-size:14px;margin-bottom:4px;margin-top:4px;}
.ss4cyfc{margin:0;height:var(--ss4cyfc-0);border-left:var(--ss4cyfc-1);background-color:#eee;color:rgba(0,0,0,0.45);width:-webkit-fit-content;width:-moz-fit-content;width:fit-content;padding:16px 8px 0;border-bottom-right-radius:3px;border-top-right-radius:3px;pointer:none;}
.b1nkdq25{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:end;-webkit-justify-content:flex-end;-ms-flex-pack:end;justify-content:flex-end;width:-webkit-fit-content;width:-moz-fit-content;width:fit-content;width:100%;margin-top:12px;}
.s3khcs{width:100%;height:2px;background:#f7f7f7;margin:16px 0;}
/*# sourceMappingURL=data:application/json;base64,*/