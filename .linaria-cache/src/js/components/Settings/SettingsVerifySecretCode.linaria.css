.mmldiqc{width:100%;padding:var(--mmldiqc-0);box-shadow:0 20px 40px -25px #999;z-index:999;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-box-pack:start;-webkit-justify-content:flex-start;-ms-flex-pack:start;justify-content:flex-start;position:absolute;top:0;}
.mrv3o26{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:var(--mrv3o26-0);-webkit-box-align:var(--mrv3o26-0);-ms-flex-align:var(--mrv3o26-0);align-items:var(--mrv3o26-0);height:100%;width:80%;max-width:400px;margin:0 auto;padding:86px 0 72px 0;padding:var(--mrv3o26-1);}

.b10lpkv8{margin-top:var(--b10lpkv8-0);}
.t1pvsxd2{font-weight:bold;font-size:var(--t1pvsxd2-0);padding:0 10px;margin-bottom:var(--t1pvsxd2-1);color:black;text-align:center;}.t1pvsxd2 media(min-width:569px){font-size:36px;}
.s1imsj0n{color:#ccc;font-weight:bold;text-align:center;}
.p10xwgq1{color:black;font-weight:bold;text-align:center;}
.i1gvv4vw{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;margin:auto;width:100%;margin-top:var(--i1gvv4vw-0);}
.eephmgc{color:red;margin:12px 0;text-align:center;font-size:14px;}
/*# sourceMappingURL=data:application/json;base64,*/