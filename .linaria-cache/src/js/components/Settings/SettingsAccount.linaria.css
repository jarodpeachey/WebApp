.mqrxxms{margin-top:var(--mqrxxms-0);padding:16px;text-align:center;padding-top:0;}
.s1onog39{font-weight:500;font-size:16px;margin-bottom:24px;}
.r15zn3i8{margin:0;color:#333;font-weight:bold;font-size:16px;}
.t4m3qjp{color:#fff !important;background-color:#55acee !important;border-color:rgba(0,0,0,0.2);position:relative;padding-left:44px;text-align:left;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;}
.f173to0h{color:#fff;background-color:#3b5998 !important;borderColor:rgba(0,0,0,0.2);font-size:1.25rem;line-height:1.5;border-radius:0.3rem;}
/*# sourceMappingURL=data:application/json;base64,*/