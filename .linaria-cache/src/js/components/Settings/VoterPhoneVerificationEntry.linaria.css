.wmz2k58{margin-top:32px;}
.pehb4wd{margin-top:18px;}
.e98lys1{color:rgb(255,73,34);font-size:14px;}
/*# sourceMappingURL=data:application/json;base64,{"version":3,"sources":["D:\\Jarod\\WeVote\\WebApp\\src\\js\\components\\Settings\\VoterPhoneVerificationEntry.jsx"],"names":[".wmz2k58",".pehb4wd",".e98lys1"],"mappings":"AA2hBMA;AAIAC;AAIAC","file":"D:\\Jarod\\WeVote\\WebApp\\src\\js\\components\\Settings\\VoterPhoneVerificationEntry.jsx","sourcesContent":["import React, { Component } from 'react';\nimport { styled } from 'linaria/react';\nimport PropTypes from 'prop-types';\nimport { isValidPhoneNumber } from 'react-phone-number-input';\nimport { withStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Delete from '@material-ui/icons/Delete';\nimport Paper from '@material-ui/core/Paper';\nimport Phone from '@material-ui/icons/Phone';\nimport InputBase from '@material-ui/core/InputBase';\nimport { Alert } from 'react-bootstrap';\nimport LoadingWheel from '../LoadingWheel';\nimport { isCordova } from '../../utils/cordovaUtils';\nimport { renderLog } from '../../utils/logging';\nimport OpenExternalWebSite from '../Widgets/OpenExternalWebSite';\nimport SettingsVerifySecretCode from './SettingsVerifySecretCode';\nimport VoterActions from '../../actions/VoterActions';\nimport VoterStore from '../../stores/VoterStore';\n\nclass VoterPhoneVerificationEntry extends Component {\n  static propTypes = {\n    classes: PropTypes.object,\n    inModal: PropTypes.bool,\n    toggleOtherSignInOptions: PropTypes.func,\n  };\n\n  constructor (props) {\n    super(props);\n    this.state = {\n      disablePhoneVerificationButton: true,\n      displayPhoneVerificationButton: false,\n      hideExistingPhoneNumbers: false,\n      secretCodeSystemLocked: false,\n      showVerifyModal: false,\n      showError: false,\n      smsPhoneNumberList: [],\n      smsPhoneNumberListCount: 0,\n      smsPhoneNumberStatus: {},\n      voterSMSPhoneNumber: '',\n      voterSMSPhoneNumbersVerifiedCount: 0,\n      voterSMSPhoneNumberIsValid: false,\n    };\n\n    this.onPhoneNumberChange = this.onPhoneNumberChange.bind(this);\n    this.sendSignInCodeSMS = this.sendSignInCodeSMS.bind(this);\n    this.closeVerifyModal = this.closeVerifyModal.bind(this);\n  }\n\n  componentDidMount () {\n    this.voterStoreListener = VoterStore.addListener(this.onVoterStoreChange.bind(this));\n    // Steve 11/14/19: commenting out the next line: it is expensive and causes trouble in SignInModal, and is almost certainly not needed\n    // VoterActions.voterRetrieve();\n    VoterActions.voterSMSPhoneNumberRetrieve();\n  }\n\n  shouldComponentUpdate (nextProps, nextState) {\n    if (JSON.stringify(this.state.smsPhoneNumberStatus) !== JSON.stringify(nextState.smsPhoneNumberStatus)) {\n      // console.log('this.state.smsPhoneNumberStatus', this.state.smsPhoneNumberStatus, ', nextState.smsPhoneNumberStatus', nextState.smsPhoneNumberStatus);\n      return true;\n    }\n    if (this.state.disablePhoneVerificationButton !== nextState.disablePhoneVerificationButton) {\n      // console.log('this.state.disablePhoneVerificationButton', this.state.disablePhoneVerificationButton, ', nextState.disablePhoneVerificationButton', nextState.disablePhoneVerificationButton);\n      return true;\n    }\n    if (this.state.displayPhoneVerificationButton !== nextState.displayPhoneVerificationButton) {\n      // console.log('this.state.displayPhoneVerificationButton', this.state.displayPhoneVerificationButton, ', nextState.displayPhoneVerificationButton', nextState.displayPhoneVerificationButton);\n      return true;\n    }\n    if (this.state.hideExistingPhoneNumbers !== nextState.hideExistingPhoneNumbers) {\n      // console.log('this.state.hideExistingPhoneNumbers', this.state.hideExistingPhoneNumbers, ', nextState.hideExistingPhoneNumbers', nextState.hideExistingPhoneNumbers);\n      return true;\n    }\n    if (this.state.loading !== nextState.loading) {\n      // console.log('this.state.loading', this.state.loading, ', nextState.loading', nextState.loading);\n      return true;\n    }\n    if (this.state.secretCodeSystemLocked !== nextState.secretCodeSystemLocked) {\n      // console.log('this.state.secretCodeSystemLocked', this.state.secretCodeSystemLocked, ', nextState.secretCodeSystemLocked', nextState.secretCodeSystemLocked);\n      return true;\n    }\n    if (this.state.showError !== nextState.showError) {\n      // console.log('this.state.showError', this.state.showError, ', nextState.showError', nextState.showError);\n      return true;\n    }\n    if (this.state.showVerifyModal !== nextState.showVerifyModal) {\n      // console.log('this.state.showVerifyModal', this.state.showVerifyModal, ', nextState.showVerifyModal', nextState.showVerifyModal);\n      return true;\n    }\n    if (this.state.smsPhoneNumberListCount !== nextState.smsPhoneNumberListCount) {\n      // console.log('this.state.smsPhoneNumberListCount', this.state.smsPhoneNumberListCount, ', nextState.smsPhoneNumberListCount', nextState.smsPhoneNumberListCount);\n      return true;\n    }\n    if (this.state.voterSMSPhoneNumber !== nextState.voterSMSPhoneNumber) {\n      // console.log('this.state.voterSMSPhoneNumber', this.state.voterSMSPhoneNumber, ', nextState.voterSMSPhoneNumber', nextState.voterSMSPhoneNumber);\n      return true;\n    }\n    if (this.state.voterSMSPhoneNumbersVerifiedCount !== nextState.voterSMSPhoneNumbersVerifiedCount) {\n      // console.log('this.state.voterSMSPhoneNumbersVerifiedCount', this.state.voterSMSPhoneNumbersVerifiedCount, ', nextState.voterSMSPhoneNumbersVerifiedCount', nextState.voterSMSPhoneNumbersVerifiedCount);\n      return true;\n    }\n    // console.log('shouldComponentUpdate false');\n    return false;\n  }\n\n  componentWillUnmount () {\n    this.voterStoreListener.remove();\n  }\n\n  onVoterStoreChange () {\n    const smsPhoneNumberStatus = VoterStore.getSMSPhoneNumberStatus();\n    const { secret_code_system_locked_for_this_voter_device_id: secretCodeSystemLocked } = smsPhoneNumberStatus;\n    const secretCodeVerificationStatus = VoterStore.getSecretCodeVerificationStatus();\n    const { secretCodeVerified } = secretCodeVerificationStatus;\n    // console.log('onVoterStoreChange smsPhoneNumberStatus:', smsPhoneNumberStatus);\n    if (secretCodeVerified) {\n      this.setState({\n        showVerifyModal: false,\n        voterSMSPhoneNumber: '',\n      });\n    } else if (smsPhoneNumberStatus.sign_in_code_sms_sent) {\n      this.setState({\n        displayPhoneVerificationButton: true,  // if we need to go back to the SignInModal, we want to see all of it (and have all of it on screen)\n        smsPhoneNumberStatus: {\n          sign_in_code_sms_sent: false,\n        },\n        showVerifyModal: true,\n      });\n    } else if (smsPhoneNumberStatus.sms_phone_number_already_owned_by_this_voter) {\n      this.setState({\n        smsPhoneNumberStatus,\n        showVerifyModal: false,\n      });\n    } else {\n      this.setState({\n        smsPhoneNumberStatus,\n      });\n    }\n    const smsPhoneNumberList = VoterStore.getSMSPhoneNumberList();\n    const smsPhoneNumberListCount = smsPhoneNumberList.length;\n    const voterSMSPhoneNumbersVerifiedCount = VoterStore.getSMSPhoneNumbersVerifiedCount();\n    this.setState({\n      loading: false,\n      voter: VoterStore.getVoter(),\n      voterSMSPhoneNumbersVerifiedCount,\n      secretCodeSystemLocked,\n      smsPhoneNumberList,\n      smsPhoneNumberListCount,\n    });\n  }\n\n  onPhoneNumberChange (e) {\n    const incomingVoterPhoneNumber = e.target.value;\n    const voterSMSPhoneNumberWithPlus = `+${incomingVoterPhoneNumber}`;\n    const voterSMSPhoneNumberWithPlusAndOne = `+1${incomingVoterPhoneNumber}`;\n\n    const voterSMSPhoneNumberIsValidRaw = isValidPhoneNumber(incomingVoterPhoneNumber);\n    const voterSMSPhoneNumberIsValidWithPlus = isValidPhoneNumber(voterSMSPhoneNumberWithPlus);\n    const voterSMSPhoneNumberIsValidWithPlusAndOne = isValidPhoneNumber(voterSMSPhoneNumberWithPlusAndOne);\n    const voterSMSPhoneNumberIsValid = voterSMSPhoneNumberIsValidRaw || voterSMSPhoneNumberIsValidWithPlus || voterSMSPhoneNumberIsValidWithPlusAndOne;\n    // console.log('onPhoneNumberChange, incomingVoterPhoneNumber: ', incomingVoterPhoneNumber, ', voterSMSPhoneNumberIsValid:', voterSMSPhoneNumberIsValid);\n    // console.log('voterSMSPhoneNumberWithPlus:', voterSMSPhoneNumberWithPlus);\n    // console.log('voterSMSPhoneNumberWithPlusAndOne:', voterSMSPhoneNumberWithPlusAndOne);\n    this.setState({\n      disablePhoneVerificationButton: !voterSMSPhoneNumberIsValid,\n      voterSMSPhoneNumber: incomingVoterPhoneNumber,\n      voterSMSPhoneNumberIsValid,\n    });\n  }\n\n  setAsPrimarySMSPhoneNumber (smsWeVoteId) {\n    VoterActions.setAsPrimarySMSPhoneNumber(smsWeVoteId);\n  }\n\n  voterSMSPhoneNumberSave = (event) => {\n    // console.log('VoterPhoneVerificationEntry this.voterSMSPhoneNumberSave');\n    event.preventDefault();\n    VoterActions.voterSMSPhoneNumberSave(this.state.voterSMSPhoneNumber);\n    this.setState({ loading: true });\n  };\n\n  updateVoterSMSPhoneNumber = (e) => {\n    const voterSMSPhoneNumber = e.target.value;\n    const voterSMSPhoneNumberIsValid = true;\n    this.setState({\n      voterSMSPhoneNumber,\n      voterSMSPhoneNumberIsValid,\n    });\n  };\n\n  closeVerifyModal = () => {\n    // console.log('VoterPhoneVerificationEntry closeVerifyModal');\n    this.setState({\n      smsPhoneNumberStatus: {\n        sign_in_code_sms_sent: false,\n      },\n      showVerifyModal: false,\n      voterSMSPhoneNumber: '',\n    });\n  };\n\n  hidePhoneVerificationButton = () => {\n    const { voterSMSPhoneNumber } = this.state;\n    if (!voterSMSPhoneNumber) {\n      // Only hide if no number entered\n      this.setState({\n        displayPhoneVerificationButton: false,\n      });\n    }\n  };\n\n  displayPhoneVerificationButton = () => {\n    this.setState({\n      displayPhoneVerificationButton: true,\n    });\n  };\n\n  localToggleOtherSignInOptions = () => {\n    if (isCordova()) {\n      const { hideExistingPhoneNumbers } = this.state;\n      this.setState({ hideExistingPhoneNumbers: !hideExistingPhoneNumbers });\n      if (this.props.toggleOtherSignInOptions) {\n        this.props.toggleOtherSignInOptions();\n      }\n    }\n  };\n\n  onPhoneInputBlur = (event) => {\n    const { voterSMSPhoneNumber } = this.state;\n    // console.log('VoterPhoneVerificationEntry onPhoneInputBlur, voterSMSPhoneNumber:', voterSMSPhoneNumber);\n    this.hidePhoneVerificationButton();\n    this.localToggleOtherSignInOptions();\n    if (voterSMSPhoneNumber && isCordova()) {\n      // When there is a voterSMSPhoneNumber value and the keyboard closes, submit\n      this.sendSignInCodeSMS(event);\n    }\n  };\n\n  reSendSignInCodeSMS = (voterSMSPhoneNumber) => {\n    if (voterSMSPhoneNumber) {\n      VoterActions.sendSignInCodeSMS(voterSMSPhoneNumber);\n      // We need to put voterSMSPhoneNumber back in place so the verify modal can open\n      this.setState({\n        loading: true,\n        displayPhoneVerificationButton: true,\n        smsPhoneNumberStatus: {\n          sms_phone_number_already_owned_by_other_voter: false,\n        },\n        voterSMSPhoneNumber,\n      });\n    }\n  };\n\n  sendSignInCodeSMS (event) {\n    // console.log('sendSignInCodeSMS');\n    event.preventDefault();\n    const { voterSMSPhoneNumber, voterSMSPhoneNumberIsValid } = this.state;\n    if (voterSMSPhoneNumberIsValid) {\n      VoterActions.sendSignInCodeSMS(voterSMSPhoneNumber);\n      this.setState({\n        displayPhoneVerificationButton: true,\n        smsPhoneNumberStatus: {\n          sms_phone_number_already_owned_by_other_voter: false,\n        },\n        loading: true,\n      });\n    } else {\n      this.setState({ showError: true });\n    }\n  }\n\n  removeVoterSMSPhoneNumber (smsWeVoteId) {\n    VoterActions.removeVoterSMSPhoneNumber(smsWeVoteId);\n  }\n\n  render () {\n    renderLog('VoterPhoneVerificationEntry');  // Set LOG_RENDER_EVENTS to log all renders\n    if (this.state.loading) {\n      return LoadingWheel;\n    }\n\n    const { classes } = this.props;\n    const { disablePhoneVerificationButton, displayPhoneVerificationButton, hideExistingPhoneNumbers, secretCodeSystemLocked, showError, showVerifyModal, smsPhoneNumberStatus, smsPhoneNumberList, smsPhoneNumberListCount, voterSMSPhoneNumber } = this.state;\n\n    const signInLinkOrCodeSent = (smsPhoneNumberStatus.link_to_sign_in_sms_sent || smsPhoneNumberStatus.sign_in_code_sms_sent);\n    const smsPhoneNumberStatusHtml = (\n      <span>\n        { (smsPhoneNumberStatus.sms_phone_number_already_owned_by_this_voter && !smsPhoneNumberStatus.sms_phone_number_deleted && !smsPhoneNumberStatus.make_primary_sms && !secretCodeSystemLocked) ||\n        (smsPhoneNumberStatus.sms_phone_number_already_owned_by_other_voter && !signInLinkOrCodeSent && !secretCodeSystemLocked) ||\n        secretCodeSystemLocked ? (\n          <Alert variant=\"warning\">\n            { smsPhoneNumberStatus.sms_phone_number_already_owned_by_other_voter && !signInLinkOrCodeSent && !secretCodeSystemLocked && (\n              <div>\n                That phone is already being used by another account.\n                <br />\n                <br />\n                Please click &quot;Send Login Code in an Email&quot; below to sign into that account.\n              </div>\n            )}\n            { smsPhoneNumberStatus.sms_phone_number_already_owned_by_this_voter && !smsPhoneNumberStatus.sms_phone_number_deleted && !smsPhoneNumberStatus.make_primary_sms && !secretCodeSystemLocked && (\n              <div>\n                That phone number was already verified by you.\n              </div>\n            )}\n            { secretCodeSystemLocked && (\n              <span>\n                Your account is locked. Please\n                <OpenExternalWebSite\n                  url=\"https://help.wevote.us/hc/en-us/requests/new\"\n                  target=\"_blank\"\n                  body={<span>contact We Vote support for help.</span>}\n                />\n              </span>\n            )}\n          </Alert>\n          ) :\n          null\n        }\n        { (smsPhoneNumberStatus.sms_phone_number_created && !smsPhoneNumberStatus.verification_sms_sent && !secretCodeSystemLocked) ||\n        smsPhoneNumberStatus.sms_phone_number_deleted ||\n        smsPhoneNumberStatus.sms_ownership_is_verified ||\n        smsPhoneNumberStatus.make_primary_sms ||\n        smsPhoneNumberStatus.sign_in_code_sms_sent ? (\n          <Alert variant=\"success\">\n            { smsPhoneNumberStatus.sms_phone_number_created && !smsPhoneNumberStatus.verification_sms_sent && !secretCodeSystemLocked ? <span>Your phone number was saved. </span> : null }\n            { smsPhoneNumberStatus.sms_phone_number_deleted ? <span>Your phone number was deleted. </span> : null }\n            { smsPhoneNumberStatus.sms_ownership_is_verified ? <span>Your phone number was verified. </span> : null }\n            { smsPhoneNumberStatus.make_primary_sms ? <span>Your have chosen a new primary phone number. </span> : null }\n            { smsPhoneNumberStatus.sign_in_code_sms_sent ? <span>Please check your phone. A sign in verification code was sent. </span> : null }\n          </Alert>\n          ) : null\n        }\n      </span>\n    );\n\n    let enterSMSPhoneNumberTitle = 'Sign in with SMS Phone Number';\n    // let enterEmailExplanation = isWebApp() ? \"You'll receive a magic link in your email. Click that link to be signed into your We Vote account.\" :\n    //   \"You'll receive a magic link in the email on this phone. Click that link to be signed into your We Vote account.\";\n    if (this.state.voter && this.state.voter.is_signed_in) {\n      enterSMSPhoneNumberTitle = 'Add New Phone Number';\n      // enterEmailExplanation = isWebApp() ? \"You'll receive a magic link in your email. Click that link to verify this new email.\" :\n      //   \"You'll receive a magic link in the email on this phone. Click that link to verify this new email.\";\n    }\n\n    const enterSMSPhoneNumberHtml = (\n      <div>\n        <div className=\"u-stack--sm u-tl\">\n          <strong>\n            {enterSMSPhoneNumberTitle}\n          </strong>\n          {showError ? (\n            <Error>\n              Please enter a valid phone number.\n            </Error>\n          ) : null}\n          {' '}\n        </div>\n        <form className=\"form-inline\">\n          <Paper className={classes.root} elevation={1}>\n            <Phone />\n            <InputBase\n              className={classes.input}\n              type=\"tel\"\n              name=\"voter_phone_number\"\n              id=\"enterVoterPhone\"\n              onBlur={this.onPhoneInputBlur}\n              onChange={this.onPhoneNumberChange}\n              onFocus={() => { this.displayPhoneVerificationButton(); this.localToggleOtherSignInOptions(); }}\n              placeholder=\"Type phone number here...\"\n            />\n          </Paper>\n          {displayPhoneVerificationButton && (\n            <Button\n              className={classes.button}\n              color=\"primary\"\n              disabled={disablePhoneVerificationButton}\n              id=\"voterPhoneSendSMS\"\n              onClick={this.sendSignInCodeSMS}\n              variant=\"contained\"\n            >\n              Send Verification Code\n            </Button>\n          )}\n        </form>\n      </div>\n    );\n\n    let allowRemoveSMSPhoneNumber;\n    let emailOwnershipIsVerified;\n    let isPrimarySMSPhoneNumber;\n\n    // ///////////////////////////////////\n    // LIST OF VERIFIED SMS PHONE NUMBERS\n    let verifiedSMSFound = false;\n    const verifiedSMSListHtml = smsPhoneNumberList.map((voterSMSPhoneNumberFromList) => {\n      emailOwnershipIsVerified = !!voterSMSPhoneNumberFromList.sms_ownership_is_verified;\n\n      if (emailOwnershipIsVerified) {\n        verifiedSMSFound = true;\n        allowRemoveSMSPhoneNumber = voterSMSPhoneNumberFromList.primary_sms_phone_number !== true;\n        isPrimarySMSPhoneNumber = voterSMSPhoneNumberFromList.primary_sms_phone_number === true;\n\n        return (\n          <div key={voterSMSPhoneNumberFromList.sms_we_vote_id}>\n            <span>{voterSMSPhoneNumberFromList.normalized_sms_phone_number}</span>\n\n            {isPrimarySMSPhoneNumber && (\n              <span>\n                <span>&nbsp;&nbsp;&nbsp;</span>\n                Primary\n              </span>\n            )}\n            {!isPrimarySMSPhoneNumber && (\n              <span>\n                <span>&nbsp;&nbsp;&nbsp;</span>\n                <span>\n                  <a // eslint-disable-line\n                    onClick={this.setAsPrimarySMSPhoneNumber.bind(this, voterSMSPhoneNumberFromList.sms_we_vote_id)}\n                  >\n                    Make Primary\n                  </a>\n                  &nbsp;&nbsp;&nbsp;\n                </span>\n                <span>&nbsp;&nbsp;&nbsp;</span>\n                {allowRemoveSMSPhoneNumber && (\n                  <a // eslint-disable-line\n                    onClick={this.removeVoterSMSPhoneNumber.bind(this, voterSMSPhoneNumberFromList.sms_we_vote_id)}\n                  >\n                    <Delete />\n                  </a>\n                )}\n              </span>\n            )}\n          </div>\n        );\n      } else {\n        return null;\n      }\n    });\n\n    // ////////////////////////////////////\n    // LIST OF SMS PHONE NUMBERS TO VERIFY\n    let unverifiedSMSFound = false;\n    const toVerifySMSListHtml = smsPhoneNumberList.map((voterSMSPhoneNumberFromList) => {\n      emailOwnershipIsVerified = !!voterSMSPhoneNumberFromList.sms_ownership_is_verified;\n      if (!emailOwnershipIsVerified) {\n        unverifiedSMSFound = true;\n        allowRemoveSMSPhoneNumber = !voterSMSPhoneNumberFromList.primary_sms_phone_number;\n        isPrimarySMSPhoneNumber = !!voterSMSPhoneNumberFromList.primary_sms_phone_number;\n        return (\n          <div key={voterSMSPhoneNumberFromList.sms_we_vote_id}>\n            <div>\n              <span>{voterSMSPhoneNumberFromList.normalized_sms_phone_number}</span>\n              <span>&nbsp;&nbsp;&nbsp;</span>\n              {voterSMSPhoneNumberFromList.sms_ownership_is_verified ?\n                null : (\n                  <a // eslint-disable-line\n                    onClick={() => this.reSendSignInCodeSMS(voterSMSPhoneNumberFromList.normalized_sms_phone_number)}\n                  >\n                    Send Verification Again\n                  </a>\n                )}\n\n              <span>&nbsp;&nbsp;&nbsp;</span>\n              {allowRemoveSMSPhoneNumber && (\n                <a // eslint-disable-line\n                  onClick={this.removeVoterSMSPhoneNumber.bind(this, voterSMSPhoneNumberFromList.sms_we_vote_id)}\n                >\n                  <Delete />\n                </a>\n              )}\n            </div>\n          </div>\n        );\n      } else {\n        return null;\n      }\n    });\n\n    return (\n      <Wrapper>\n        {!hideExistingPhoneNumbers && (\n          <div>\n            {verifiedSMSFound && !this.props.inModal ? (\n              <PhoneNumberSection>\n                <span className=\"h3\">\n                  Your Phone Number\n                  {smsPhoneNumberListCount > 1 ? 's' : ''}\n                </span>\n                {smsPhoneNumberStatusHtml}\n                {verifiedSMSListHtml}\n              </PhoneNumberSection>\n            ) : (\n              <span>\n                {smsPhoneNumberStatusHtml}\n              </span>\n            )}\n            {unverifiedSMSFound && !this.props.inModal && (\n              <PhoneNumberSection>\n                <span className=\"h3\">Phone Numbers to Verify</span>\n                {toVerifySMSListHtml}\n              </PhoneNumberSection>\n            )}\n          </div>\n        )}\n        <PhoneNumberSection>\n          {enterSMSPhoneNumberHtml}\n        </PhoneNumberSection>\n        {showVerifyModal && (\n          <SettingsVerifySecretCode\n            show={showVerifyModal}\n            closeVerifyModal={this.closeVerifyModal}\n            voterPhoneNumber={voterSMSPhoneNumber}\n          />\n        )}\n      </Wrapper>\n    );\n  }\n}\n\nconst styles = {\n  root: {\n    display: 'flex',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    width: '100%',\n    paddingLeft: 8,\n    marginBottom: 8,\n  },\n  input: {\n    marginLeft: 8,\n    flex: 1,\n    padding: 8,\n  },\n  button: {\n    width: '100%',\n    padding: '12px',\n  },\n};\n\nconst Wrapper = styled.div`\n  margin-top: 32px;\n`;\n\nconst PhoneNumberSection = styled.div`\n  margin-top: 18px;\n`;\n\nconst Error = styled.div`\n  color: rgb(255, 73, 34);\n  font-size: 14px;\n`;\n\nexport default withStyles(styles)(VoterPhoneVerificationEntry);\n"]}*/