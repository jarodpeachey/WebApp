.can22fo{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-flow:var(--can22fo-0);-ms-flex-flow:var(--can22fo-0);flex-flow:var(--can22fo-0);-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;}@media (max-width:var(--can22fo-1)){.can22fo{-webkit-flex-flow:row wrap;-ms-flex-flow:row wrap;flex-flow:row wrap;}}
.t301f4w{font-size:18px;font-weight:bold;margin-bottom:12px;cursor:pointer;}@media (max-width:var(--t301f4w-0)){.t301f4w{font-size:16px;margin-bottom:8px;}}
.c1n71l1c{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-flow:column;-ms-flex-flow:column;flex-flow:column;padding:16px 16px 0 16px;margin-bottom:8px;overflow-x:hidden;-webkit-transition:all 200ms ease-in;transition:all 200ms ease-in;border:1px solid var(--c1n71l1c-0);width:var(--c1n71l1c-1);margin-right:8px;border-radius:4px;cursor:pointer;}.c1n71l1c:hover{border:1px solid var(--c1n71l1c-2);box-shadow:0 1px 3px 0 rgba(0,0,0,.2),0 1px 1px 0 rgba(0,0,0,.14),0 2px 1px -1px rgba(0,0,0,.12);}@media (max-width:var(--c1n71l1c-3)){.c1n71l1c{-webkit-flex-flow:column;-ms-flex-flow:column;flex-flow:column;width:100%;}}@media (max-width:var(--c1n71l1c-4)){.c1n71l1c{-webkit-flex-flow:column;-ms-flex-flow:column;flex-flow:column;border:none;border-bottom:1px solid var(--c1n71l1c-0);padding:16px 0 0 0;margin-bottom:8px;width:100%;}.c1n71l1c:hover{border:none;border-bottom:1px solid var(--c1n71l1c-0);box-shadow:none;}}
/*# sourceMappingURL=data:application/json;base64,*/