.wn37hlk{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-flow:column;-ms-flex-flow:column;flex-flow:column;}


.ii764go{font-weight:bold;font-size:14px;margin-top:.5em;}
.d1vo6xcu{display:inherit;}
.m1n5mmqm{display:inherit;}
/*# sourceMappingURL=data:application/json;base64,{"version":3,"sources":["D:\\Jarod\\WeVote\\WebApp\\src\\js\\components\\Settings\\SettingsSharing.jsx"],"names":[".wn37hlk",".ck70831",".cnu8fu7",".ii764go",".d1vo6xcu",".m1n5mmqm"],"mappings":"AA6jBMA;AAKAC;AAGAC;AAGAC;AAMAC;AAIAC","file":"D:\\Jarod\\WeVote\\WebApp\\src\\js\\components\\Settings\\SettingsSharing.jsx","sourcesContent":["import React, { Component } from 'react';\nimport Helmet from 'react-helmet';\nimport PropTypes from 'prop-types';\nimport { styled } from 'linaria/react';\nimport { withStyles } from '@material-ui/core/styles';\nimport Switch from '@material-ui/core/Switch';\nimport Button from '@material-ui/core/Button';\nimport AppActions from '../../actions/AppActions';\nimport { cordovaDot } from '../../utils/cordovaUtils';\nimport LoadingWheel from '../LoadingWheel';\nimport OrganizationActions from '../../actions/OrganizationActions';\nimport OrganizationStore from '../../stores/OrganizationStore';\nimport PremiumableButton from '../Widgets/PremiumableButton';\nimport { renderLog } from '../../utils/logging';\nimport SettingsAccountLevelChip from './SettingsAccountLevelChip';\nimport { ImageDescription, PreviewImage, DescriptionText, SharingRow, SharingColumn, GiantTextInput, HiddenInput, Actions } from './SettingsStyled';\nimport VoterStore from '../../stores/VoterStore';\nimport { voterFeaturePackageExceedsOrEqualsRequired } from '../../utils/pricingFunctions';\n\nclass SettingsSharing extends Component {\n  static propTypes = {\n    classes: PropTypes.object,\n  };\n\n  constructor (props) {\n    super(props);\n    this.state = {\n      chosenFeaturePackage: 'FREE',\n      chosenFaviconFromFileReader: null,\n      chosenFaviconUrlHttps: null,\n      chosenLogoFromFileReader: null,\n      chosenLogoUrlHttps: null,\n      chosenSocialShareMasterImageFromFileReader: null,\n      chosenSocialShareMasterImageUrlHttps: null,\n      hideLogo: false,\n      organization: {},\n      organizationWeVoteId: '',\n      chosenSocialShareDescription: '',\n      chosenSocialShareDescriptionChangedLocally: false,\n      chosenSocialShareDescriptionSavedValue: '',\n      uploadImageType: 'headerLogo',\n      voter: {},\n      voterFeaturePackageExceedsOrEqualsEnterprise: false,\n    };\n  }\n\n  componentDidMount () {\n    // console.log('SettingsSharing componentDidMount');\n    this.onVoterStoreChange();\n    this.onOrganizationStoreChange();\n    this.organizationStoreListener = OrganizationStore.addListener(this.onOrganizationStoreChange.bind(this));\n    this.voterStoreListener = VoterStore.addListener(this.onVoterStoreChange.bind(this));\n  }\n\n  shouldComponentUpdate (nextProps, nextState) {\n    if (this.state.chosenFeaturePackage !== nextState.chosenFeaturePackage) {\n      // console.log('this.state.chosenFeaturePackage', this.state.chosenFeaturePackage, ', nextState.chosenFeaturePackage', nextState.chosenFeaturePackage);\n      return true;\n    }\n    if (this.state.organizationWeVoteId !== nextState.organizationWeVoteId) {\n      // console.log('this.state.organizationWeVoteId', this.state.organizationWeVoteId, ', nextState.organizationWeVoteId', nextState.organizationWeVoteId);\n      return true;\n    }\n    if (this.state.voterIsSignedIn !== nextState.voterIsSignedIn) {\n      // console.log('this.state.voterIsSignedIn', this.state.voterIsSignedIn, ', nextState.voterIsSignedIn', nextState.voterIsSignedIn);\n      return true;\n    }\n    if (this.state.hideLogo !== nextState.hideLogo) {\n      return true;\n    }\n    if (this.state.chosenSocialShareDescription !== nextState.chosenSocialShareDescription) {\n      return true;\n    }\n    if (this.state.chosenFaviconFromFileReader !== nextState.chosenFaviconFromFileReader) {\n      return true;\n    }\n    if (this.state.chosenFaviconUrlHttps !== nextState.chosenFaviconUrlHttps) {\n      // console.log('this.state.chosenFaviconUrlHttps', this.state.chosenFaviconUrlHttps, ', nextState.chosenFaviconUrlHttps', nextState.chosenFaviconUrlHttps);\n      return true;\n    }\n    if (this.state.chosenLogoFromFileReader !== nextState.chosenLogoFromFileReader) {\n      // console.log('this.state.chosenLogoFromFileReader', this.state.chosenLogoFromFileReader, ', nextState.chosenLogoFromFileReader', nextState.chosenLogoFromFileReader);\n      return true;\n    }\n    if (this.state.chosenLogoUrlHttps !== nextState.chosenLogoUrlHttps) {\n      // console.log('this.state.chosenLogoUrlHttps', this.state.chosenLogoUrlHttps, ', nextState.chosenLogoUrlHttps', nextState.chosenLogoUrlHttps);\n      return true;\n    }\n    if (this.state.chosenSocialShareMasterImageFromFileReader !== nextState.chosenSocialShareMasterImageFromFileReader) {\n      return true;\n    }\n    if (this.state.chosenSocialShareMasterImageUrlHttps !== nextState.chosenSocialShareMasterImageUrlHttps) {\n      // console.log('this.state.chosenSocialShareMasterImageUrlHttps', this.state.chosenSocialShareMasterImageUrlHttps, ', nextState.chosenSocialShareMasterImageUrlHttps', nextState.chosenSocialShareMasterImageUrlHttps);\n      return true;\n    }\n    if (this.state.voterFeaturePackageExceedsOrEqualsEnterprise !== nextState.voterFeaturePackageExceedsOrEqualsEnterprise) {\n      return true;\n    }\n    const priorOrganization = this.state.organization;\n    const nextOrganization = nextState.organization;\n\n    const priorWeVoteCustomDomain = priorOrganization.we_vote_custom_domain || '';\n    const nextWeVoteCustomDomain = nextOrganization.we_vote_custom_domain || '';\n\n    if (priorWeVoteCustomDomain !== nextWeVoteCustomDomain) {\n      // console.log('priorWeVoteCustomDomain', priorWeVoteCustomDomain, ', nextWeVoteCustomDomain', nextWeVoteCustomDomain);\n      return true;\n    }\n    // console.log('shouldComponentUpdate false');\n    return false;\n  }\n\n  componentWillUnmount () {\n    this.organizationStoreListener.remove();\n    this.voterStoreListener.remove();\n  }\n\n  onOrganizationStoreChange = () => {\n    const { chosenSocialShareDescriptionChangedLocally } = this.state;\n    let { organizationWeVoteId } = this.state;\n    if (!organizationWeVoteId) {\n      const voter = VoterStore.getVoter();\n      organizationWeVoteId = voter.linked_organization_we_vote_id;\n      if (organizationWeVoteId) {\n        this.setState({\n          organizationWeVoteId,\n        });\n      }\n    }\n    if (organizationWeVoteId) {\n      const organization = OrganizationStore.getOrganizationByWeVoteId(organizationWeVoteId);\n      const chosenFeaturePackage = OrganizationStore.getChosenFeaturePackage();\n      const chosenSocialShareDescriptionSavedValue = organization.chosen_social_share_description || '';\n      const voterFeaturePackageExceedsOrEqualsEnterprise = voterFeaturePackageExceedsOrEqualsRequired(chosenFeaturePackage, 'ENTERPRISE');\n      this.setState({\n        chosenFeaturePackage,\n        chosenFaviconUrlHttps: organization.chosen_favicon_url_https,\n        chosenLogoUrlHttps: organization.chosen_logo_url_https,\n        chosenSocialShareDescriptionSavedValue,\n        chosenSocialShareMasterImageUrlHttps: organization.chosen_social_share_master_image_url_https,\n        hideLogo: organization.chosen_hide_we_vote_logo || false,\n        organization,\n        voterFeaturePackageExceedsOrEqualsEnterprise,\n      });\n      // If it hasn't been changed locally, then use the one saved in the API server\n      if (!chosenSocialShareDescriptionChangedLocally) {\n        this.setState({\n          chosenSocialShareDescription: chosenSocialShareDescriptionSavedValue || '',\n        });\n      }\n    }\n  };\n\n  onVoterStoreChange = () => {\n    const { chosenSocialShareDescriptionChangedLocally } = this.state;\n    const voter = VoterStore.getVoter();\n    const voterIsSignedIn = voter.is_signed_in;\n    this.setState({\n      voter,\n      voterIsSignedIn,\n    });\n    const organizationWeVoteId = voter.linked_organization_we_vote_id;\n    if (organizationWeVoteId) {\n      const organization = OrganizationStore.getOrganizationByWeVoteId(organizationWeVoteId);\n      const chosenFeaturePackage = OrganizationStore.getChosenFeaturePackage();\n      const chosenSocialShareDescriptionSavedValue = organization.chosen_social_share_description || '';\n      const voterFeaturePackageExceedsOrEqualsEnterprise = voterFeaturePackageExceedsOrEqualsRequired(chosenFeaturePackage, 'ENTERPRISE');\n      this.setState({\n        chosenFeaturePackage,\n        chosenFaviconUrlHttps: organization.chosen_favicon_url_https,\n        chosenLogoUrlHttps: organization.chosen_logo_url_https,\n        chosenSocialShareDescriptionSavedValue,\n        chosenSocialShareMasterImageUrlHttps: organization.chosen_social_share_master_image_url_https,\n        organization,\n        organizationWeVoteId,\n        voterFeaturePackageExceedsOrEqualsEnterprise,\n      });\n      // If it hasn't been changed locally, then use the one saved in the API server\n      if (!chosenSocialShareDescriptionChangedLocally) {\n        this.setState({\n          chosenSocialShareDescription: chosenSocialShareDescriptionSavedValue || '',\n        });\n      }\n    }\n  };\n\n  handleToggleHideLogo = (event) => {\n    const { hideLogo, organizationWeVoteId } = this.state;\n    // console.log('hidelogo', !hideLogo);\n    OrganizationActions.organizationChosenHideWeVoteLogoSave(organizationWeVoteId, !hideLogo);\n    this.setState({\n      hideLogo: !hideLogo,\n    });\n    event.preventDefault();\n  };\n\n  handleChosenSocialShareDescriptionChange = (event) => {\n    const { chosenSocialShareDescription } = this.state;\n    if (event.target.value !== chosenSocialShareDescription) {\n      this.setState({\n        chosenSocialShareDescription: event.target.value || '',\n        chosenSocialShareDescriptionChangedLocally: true,\n      });\n    }\n  };\n\n  onSaveChosenSocialShareDescriptionButton = (event) => {\n    const { chosenSocialShareDescription, organizationWeVoteId } = this.state;\n    OrganizationActions.organizationChosenSocialShareDescriptionSave(organizationWeVoteId, chosenSocialShareDescription);\n    this.setState({\n      chosenSocialShareDescriptionChangedLocally: false,\n    });\n    event.preventDefault();\n  };\n\n  onCancelChosenSocialShareDescriptionButton = () => {\n    const { chosenSocialShareDescriptionSavedValue } = this.state;\n    this.setState({\n      chosenSocialShareDescription: chosenSocialShareDescriptionSavedValue || '',\n      chosenSocialShareDescriptionChangedLocally: false,\n    });\n  };\n\n  handleAddImage = () => {\n    const { organizationWeVoteId, uploadImageType } = this.state;\n    const file = this.fileSelector.files[0];\n    if (!file) return;\n    const fileReader = new FileReader();\n    fileReader.addEventListener('load', () => {\n      if (uploadImageType === 'headerLogo') {\n        const chosenLogoFromFileReader = fileReader.result;\n        this.setState({ chosenLogoFromFileReader });\n        // console.log('chosenLogoFromFileReader:', chosenLogoFromFileReader);\n        OrganizationActions.organizationChosenLogoSave(organizationWeVoteId, chosenLogoFromFileReader);\n      }\n      if (uploadImageType === 'favicon') {\n        const chosenFaviconFromFileReader = fileReader.result;\n        this.setState({ chosenFaviconFromFileReader });\n        // console.log('chosenFaviconFromFileReader:', chosenFaviconFromFileReader);\n        OrganizationActions.organizationChosenFaviconSave(organizationWeVoteId, chosenFaviconFromFileReader);\n      }\n      if (uploadImageType === 'shareImage') {\n        const chosenSocialShareMasterImageFromFileReader = fileReader.result;\n        this.setState({ chosenSocialShareMasterImageFromFileReader });\n        // console.log('chosenSocialShareMasterImageFromFileReader:', chosenSocialShareMasterImageFromFileReader);\n        OrganizationActions.organizationChosenSocialShareMasterImageSave(organizationWeVoteId, chosenSocialShareMasterImageFromFileReader);\n      }\n    });\n    fileReader.readAsDataURL(file);\n  };\n\n  handleUploadHeaderLogo = () => {\n    this.fileSelector.value = null;\n    this.fileSelector.click();\n    this.setState({ uploadImageType: 'headerLogo' });\n  };\n\n  handleUploadFavicon = () => {\n    this.fileSelector.value = null;\n    this.fileSelector.click();\n    this.setState({ uploadImageType: 'favicon' });\n  };\n\n  handleUploadShareImage = () => {\n    this.fileSelector.value = null;\n    this.fileSelector.click();\n    this.setState({ uploadImageType: 'shareImage' });\n  };\n\n  organizationChosenFaviconDelete = () => {\n    const { organizationWeVoteId } = this.state;\n    OrganizationActions.organizationChosenFaviconDelete(organizationWeVoteId);\n    this.setState({\n      chosenFaviconFromFileReader: null,\n    });\n  };\n\n  organizationChosenLogoDelete = () => {\n    const { organizationWeVoteId } = this.state;\n    OrganizationActions.organizationChosenLogoDelete(organizationWeVoteId);\n    this.setState({\n      chosenLogoFromFileReader: null,\n    });\n  };\n\n  organizationChosenSocialShareMasterImageDelete = () => {\n    const { organizationWeVoteId } = this.state;\n    OrganizationActions.organizationChosenSocialShareMasterImageDelete(organizationWeVoteId);\n    this.setState({\n      chosenSocialShareMasterImageFromFileReader: null,\n    });\n  };\n\n  openPaidAccountUpgradeModal (paidAccountUpgradeMode) {\n    // console.log('SettingsDomain openPaidAccountUpgradeModal');\n    AppActions.setShowPaidAccountUpgradeModal(paidAccountUpgradeMode);\n  }\n\n  render () {\n    renderLog('SettingsSharing');  // Set LOG_RENDER_EVENTS to log all renders\n    const { classes } = this.props;\n    const {\n      chosenFaviconFromFileReader,\n      chosenFeaturePackage,\n      chosenLogoFromFileReader,\n      chosenSocialShareDescription,\n      chosenSocialShareDescriptionChangedLocally,\n      chosenSocialShareMasterImageFromFileReader,\n      hideLogo,\n      organization,\n      organizationWeVoteId,\n      voter,\n      voterFeaturePackageExceedsOrEqualsEnterprise,\n      voterIsSignedIn,\n    } = this.state;\n    const {\n      chosen_favicon_url_https: chosenFaviconUrlHttps,\n      chosen_logo_url_https: chosenLogoUrlHttps,\n      chosen_social_share_master_image_url_https: chosenSocialShareMasterImageUrlHttps,\n    } = organization;\n    if (!voter || !organizationWeVoteId) {\n      return LoadingWheel;\n    }\n    // console.log('organization: ', organization);\n    // console.log('chosenLogoUrlHttps: ', chosenLogoUrlHttps);\n\n    if (voterIsSignedIn) {\n      // console.log('SettingsSharing, Signed In.');\n    }\n    if (organization && organization.we_vote_custom_domain) {\n      // console.log('SettingsSharing, Custom Domain: ', organization.we_vote_custom_domain);\n    }\n    return (\n      <Wrapper>\n        <Helmet title=\"Domain Settings\" />\n        <Card className=\"card\">\n          <CardMain className=\"card-main\">\n            <h1 className=\"h2\">Sharing Information</h1>\n            <SharingRow>\n              <SharingColumn>\n                <InputBoxLabel>Hide We Vote Logo</InputBoxLabel>\n                <DescriptionText>\n                  Remove the We Vote logo from the header bar.\n                  {' '}\n                  This setting will also hide the We Vote logo from the favicon and social share images for Enterprise Plans, even if you haven\n                  &apos;\n                  t uploaded your own.\n                </DescriptionText>\n              </SharingColumn>\n              <SharingColumn alignRight>\n                <Switch\n                  color=\"primary\"\n                  checked={hideLogo}\n                  onChange={this.handleToggleHideLogo}\n                  value=\"hideLogo\"\n                  inputProps={{ 'aria-label': 'Hide logo switch' }}\n                />\n              </SharingColumn>\n            </SharingRow>\n            <SharingRow>\n              <SharingColumn>\n                <InputBoxLabel>Upload Your Own Logo</InputBoxLabel>\n                <ImageDescription>\n                  <div\n                    style={{\n                      overflow: 'hidden',\n                      width: '132px',\n                      minWidth: '132px',\n                      minHeight: '42px',\n                      height: '42px',\n                      maxWidth: '132px !important',\n                      maxHeight: '42px !important',\n                      marginRight: 'auto',\n                      textAlign: 'left',\n                    }}\n                  >\n                    <PreviewImage\n                      alt=\"Uploaded logo\"\n                      style={{\n                        width: 'auto',\n                        height: '100%',\n                      }}\n                      src={chosenLogoFromFileReader || chosenLogoUrlHttps || cordovaDot('/img/global/svg-icons/we-vote-logo-horizontal-color-dark-141x46.svg')}\n                    />\n                  </div>\n                  <DescriptionText>Place your logo in the header bar. Image will be resized to be no more than 132px wide, and 42px tall.</DescriptionText>\n                </ImageDescription>\n              </SharingColumn>\n              <SharingColumn alignRight>\n                <Button\n                  color=\"primary\"\n                  classes={{ root: classes.uploadButton }}\n                  variant=\"contained\"\n                  onClick={this.handleUploadHeaderLogo}\n                >\n                  Upload\n                </Button>\n                {\n                  (chosenLogoFromFileReader !== null || chosenLogoUrlHttps !== null) && (\n                    <Button\n                      classes={{ root: classes.uploadButton }}\n                      color=\"primary\"\n                      variant=\"outlined\"\n                      onClick={() => this.organizationChosenLogoDelete()}\n                    >\n                      Remove\n                    </Button>\n                  )\n                }\n              </SharingColumn>\n            </SharingRow>\n            <SharingRow>\n              <SharingColumn>\n                <InputBoxLabel>\n                  Upload Favicon\n                  <SettingsAccountLevelChip chosenFeaturePackage={chosenFeaturePackage} requiredFeaturePackage=\"ENTERPRISE\" />\n                </InputBoxLabel>\n                <ImageDescription>\n                  <PreviewImage\n                    alt=\"Favicon\"\n                    width=\"32px\"\n                    src={chosenFaviconFromFileReader || chosenFaviconUrlHttps || cordovaDot('/img/global/svg-icons/we-vote-icon-square-color-dark.svg')}\n                  />\n                  <DescriptionText>The icon for your site in the browser&apos;s tab. Optimal size is 32x32.</DescriptionText>\n                </ImageDescription>\n              </SharingColumn>\n              <SharingColumn alignRight>\n                <PremiumableButton\n                  classes={{ root: voterFeaturePackageExceedsOrEqualsEnterprise ? classes.uploadButton : '' }}\n                  premium={voterFeaturePackageExceedsOrEqualsEnterprise ? 1 : 0}\n                  onClick={voterFeaturePackageExceedsOrEqualsEnterprise ? this.handleUploadFavicon : () => this.openPaidAccountUpgradeModal('enterprise')}\n                >\n                  {voterFeaturePackageExceedsOrEqualsEnterprise ? (\n                    'Upload'\n                  ) : (\n                    <React.Fragment>\n                      <DesktopView className=\"u-show-desktop\">\n                        Upgrade to Enterprise\n                      </DesktopView>\n                      <MobileTabletView className=\"u-show-mobile-tablet\">\n                        Upgrade\n                      </MobileTabletView>\n                    </React.Fragment>\n                  )}\n                </PremiumableButton>\n                {\n                  (chosenFaviconFromFileReader !== null || chosenFaviconUrlHttps !== null) && (\n                    <Button\n                      classes={{ root: classes.uploadButton }}\n                      color=\"primary\"\n                      variant=\"outlined\"\n                      onClick={() => this.organizationChosenFaviconDelete()}\n                    >\n                      Remove\n                    </Button>\n                  )\n                }\n              </SharingColumn>\n            </SharingRow>\n            <SharingRow>\n              <SharingColumn>\n                <InputBoxLabel>\n                  Social Share Image\n                  <SettingsAccountLevelChip chosenFeaturePackage={chosenFeaturePackage} requiredFeaturePackage=\"ENTERPRISE\" />\n                </InputBoxLabel>\n                <ImageDescription>\n                  <PreviewImage\n                    alt=\"Social share image\"\n                    width=\"96px\"\n                    src={chosenSocialShareMasterImageFromFileReader || chosenSocialShareMasterImageUrlHttps || cordovaDot('/img/global/svg-icons/we-vote-icon-square-color-dark.svg')}\n                  />\n                  <DescriptionText>The icon used when your page is shared on social media. Ideal size is 1600x900. Size must be at least 200x200.</DescriptionText>\n                </ImageDescription>\n              </SharingColumn>\n              <SharingColumn alignRight>\n                <PremiumableButton\n                  classes={{ root: voterFeaturePackageExceedsOrEqualsEnterprise ? classes.uploadButton : '' }}\n                  premium={voterFeaturePackageExceedsOrEqualsEnterprise ? 1 : 0}\n                  onClick={voterFeaturePackageExceedsOrEqualsEnterprise ? this.handleUploadShareImage : () => this.openPaidAccountUpgradeModal('enterprise')}\n                >\n                  {voterFeaturePackageExceedsOrEqualsEnterprise ? (\n                    'Upload'\n                  ) : (\n                    <React.Fragment>\n                      <DesktopView className=\"u-show-desktop\">\n                        Upgrade to Enterprise\n                      </DesktopView>\n                      <MobileTabletView className=\"u-show-mobile-tablet\">\n                        Upgrade\n                      </MobileTabletView>\n                    </React.Fragment>\n                  )}\n                </PremiumableButton>\n                {\n                  (chosenSocialShareMasterImageFromFileReader || chosenSocialShareMasterImageUrlHttps) && (\n                    <Button\n                      classes={{ root: classes.uploadButton }}\n                      color=\"primary\"\n                      variant=\"outlined\"\n                      onClick={() => this.organizationChosenSocialShareMasterImageDelete()}\n                    >\n                      Remove\n                    </Button>\n                  )\n                }\n              </SharingColumn>\n            </SharingRow>\n            <SharingRow>\n              <SharingColumn>\n                <InputBoxLabel>\n                  Social Share Site Description\n                  <SettingsAccountLevelChip chosenFeaturePackage={chosenFeaturePackage} requiredFeaturePackage=\"ENTERPRISE\" />\n                </InputBoxLabel>\n                <DescriptionText>A few sentences describing your site. The text used on search engines, or when your page is shared on social media.</DescriptionText>\n                <GiantTextInput\n                  onChange={this.handleChosenSocialShareDescriptionChange}\n                  value={chosenSocialShareDescription}\n                  placeholder=\"Type Description...\"\n                />\n                <Actions>\n                  <Button\n                    color=\"primary\"\n                    classes={{ root: classes.button }}\n                    disabled={!chosenSocialShareDescriptionChangedLocally}\n                    onClick={this.onCancelChosenSocialShareDescriptionButton}\n                  >\n                    Cancel\n                  </Button>\n                  <PremiumableButton\n                    classes={{ root: voterFeaturePackageExceedsOrEqualsEnterprise ? classes.uploadButton : '' }}\n                    disabled={voterFeaturePackageExceedsOrEqualsEnterprise ? !chosenSocialShareDescriptionChangedLocally : false}\n                    premium={voterFeaturePackageExceedsOrEqualsEnterprise ? 1 : 0}\n                    onClick={voterFeaturePackageExceedsOrEqualsEnterprise ? this.onSaveChosenSocialShareDescriptionButton : () => this.openPaidAccountUpgradeModal('enterprise')}\n                  >\n                    {voterFeaturePackageExceedsOrEqualsEnterprise ? (\n                      'Save'\n                    ) : (\n                      <React.Fragment>\n                        <DesktopView className=\"u-show-desktop\">\n                          Upgrade to Enterprise\n                        </DesktopView>\n                        <MobileTabletView className=\"u-show-mobile-tablet\">\n                          Upgrade\n                        </MobileTabletView>\n                      </React.Fragment>\n                    )}\n                  </PremiumableButton>\n                </Actions>\n              </SharingColumn>\n            </SharingRow>\n          </CardMain>\n        </Card>\n        <HiddenInput type=\"file\" accept=\"image/x-png,image/jpeg\" onChange={this.handleAddImage} ref={(input) => { this.fileSelector = input; }} />\n      </Wrapper>\n    );\n  }\n}\n\nconst styles = theme => ({\n  button: {\n    marginRight: 8,\n  },\n  upgradeButton: {\n    [theme.breakpoints.down('md')]: {\n      width: 97,\n    },\n  },\n  uploadButton: {\n    width: 97,\n    margin: '4px 0',\n  },\n});\n\nconst Wrapper = styled.div`\n  display: flex;\n  flex-flow: column;\n`;\n\nconst Card = styled.div`\n`;\n\nconst CardMain = styled.div`\n`;\n\nconst InputBoxLabel = styled.h4`\n  font-weight: bold;\n  font-size: 14px;\n  margin-top: .5em;\n`;\n\nconst DesktopView = styled.div`\n  display: inherit;\n`;\n\nconst MobileTabletView = styled.div`\n  display: inherit;\n`;\n\nexport default withStyles(styles)(SettingsSharing);\n\n"]}*/