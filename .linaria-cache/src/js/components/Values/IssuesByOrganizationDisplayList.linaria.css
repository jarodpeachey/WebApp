.w1ngx6x{overflow:show;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-flow:row;-ms-flex-flow:row;flex-flow:row;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;}
.f1yrhbo7{margin:10px 0;}
.imd2prb{width:var(--imd2prb-0);padding:8px 0;}@media (max-width:var(--imd2prb-1)){.imd2prb{width:var(--imd2prb-2);}}
.ibcc59m{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;padding-inline-start:0;-webkit-box-pack:start;-webkit-justify-content:flex-start;-ms-flex-pack:start;justify-content:flex-start;width:100%;}
.v12vxqbt{-webkit-align-items:start;-webkit-box-align:start;-ms-flex-align:start;align-items:start;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex:none;-ms-flex:none;flex:none;-webkit-var(--v12vxqbt-0) padding:2px 4px 2px 0;-moz-var(--v12vxqbt-0) padding:2px 4px 2px 0;-ms-var(--v12vxqbt-0) padding:2px 4px 2px 0;var(--v12vxqbt-0) padding:2px 4px 2px 0;position:relative;width:-webkit-fit-content;width:-moz-fit-content;width:fit-content;}
.p1ahr2kt{width:calc(100%);height:100%;border-radius:3px;}
.pec85r5{background:var(--pec85r5-0);padding:4px 8px;color:white;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-box-pack:start;-webkit-justify-content:flex-start;-ms-flex-pack:start;justify-content:flex-start;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;border-radius:4px;border-bottom-right-radius:0;border-bottom-left-radius:0;}
.plx2i5a{font-weight:bold;font-size:16px;}
.p13jkji3{font-size:14px;font-weight:bold;margin-left:8px;}
.p1qy4kiz{padding:8px;}
/*# sourceMappingURL=data:application/json;base64,*/