.w1929daj{background:white;border:var(--w1929daj-0);box-shadow:var(--w1929daj-1);padding:var(--w1929daj-2);height:var(--w1929daj-3);margin:var(--w1929daj-4);}
.irze1d1{font-size:18px;font-weight:bold;margin-bottom:0;}
.f2gkytd{margin-left:auto;}
.f1yg3hi2{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:start;-webkit-justify-content:flex-start;-ms-flex-pack:start;justify-content:flex-start;width:var(--f1yg3hi2-0);}
.drsva73{margin-top:8px;font-size:14px;color:#333;}
/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkQ6XFxKYXJvZFxcV2VWb3RlXFxXZWJBcHBcXHNyY1xcanNcXGNvbXBvbmVudHNcXFZhbHVlc1xcSXNzdWVDYXJkLmpzeCJdLCJuYW1lcyI6WyIudzE5MjlkYWoiLCIuaXJ6ZTFkMSIsIi5mMmdreXRkIiwiLmYxeWczaGkyIiwiLmRyc3ZhNzMiXSwibWFwcGluZ3MiOiJBQTJOTUE7QUFTQUM7QUFNQUM7QUFJQUM7QUFPQUMiLCJmaWxlIjoiRDpcXEphcm9kXFxXZVZvdGVcXFdlYkFwcFxcc3JjXFxqc1xcY29tcG9uZW50c1xcVmFsdWVzXFxJc3N1ZUNhcmQuanN4Iiwic291cmNlc0NvbnRlbnQiOlsiLyogZXNsaW50LWRpc2FibGUgcXVvdGVzICovXG5pbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgTGluayB9IGZyb20gJ3JlYWN0LXJvdXRlcic7XG5pbXBvcnQgeyBzdHlsZWQgfSBmcm9tICdsaW5hcmlhL3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgSXNzdWVGb2xsb3dUb2dnbGVCdXR0b24gZnJvbSAnLi9Jc3N1ZUZvbGxvd1RvZ2dsZUJ1dHRvbic7XG5pbXBvcnQgSXNzdWVJbWFnZURpc3BsYXkgZnJvbSAnLi9Jc3N1ZUltYWdlRGlzcGxheSc7XG5pbXBvcnQgTG9hZGluZ1doZWVsIGZyb20gJy4uL0xvYWRpbmdXaGVlbCc7XG5pbXBvcnQgeyByZW5kZXJMb2cgfSBmcm9tICcuLi8uLi91dGlscy9sb2dnaW5nJztcbmltcG9ydCBSZWFkTW9yZSBmcm9tICcuLi9XaWRnZXRzL1JlYWRNb3JlJztcbmltcG9ydCB7IGNvbnZlcnROYW1lVG9TbHVnIH0gZnJvbSAnLi4vLi4vdXRpbHMvdGV4dEZvcm1hdCc7XG5pbXBvcnQgVm90ZXJHdWlkZVN0b3JlIGZyb20gJy4uLy4uL3N0b3Jlcy9Wb3Rlckd1aWRlU3RvcmUnO1xuXG5jbGFzcyBJc3N1ZUNhcmQgZXh0ZW5kcyBDb21wb25lbnQge1xuICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgIGJhbGxvdEl0ZW1XZVZvdGVJZDogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBjdXJyZW50QmFsbG90SWRJblVybDogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBmb2xsb3dUb2dnbGVPbjogUHJvcFR5cGVzLmJvb2wsXG4gICAgaW5jbHVkZUxpbmtUb0lzc3VlOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBpc3N1ZTogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuICAgIGlzc3VlSW1hZ2VTaXplOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIHR1cm5PZmZEZXNjcmlwdGlvbjogUHJvcFR5cGVzLmJvb2wsXG4gICAgdHVybk9mZklzc3VlSW1hZ2U6IFByb3BUeXBlcy5ib29sLFxuICAgIHVybFdpdGhvdXRIYXNoOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGNvbmRlbnNlZDogUHJvcFR5cGVzLmJvb2wsXG4gIH07XG5cbiAgY29uc3RydWN0b3IgKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICBiYWxsb3RJdGVtV2VWb3RlSWQ6ICcnLFxuICAgICAgY291bnRPZk9yZ2FuaXphdGlvbnNVbmRlclRoaXNJc3N1ZTogMCxcbiAgICAgIGlzc3VlOiB7fSxcbiAgICAgIGlzc3VlSW1hZ2VTaXplOiAnU01BTEwnLCAvLyBXZSBzdXBwb3J0IFNNQUxMLCBNRURJVU0sIExBUkdFXG4gICAgICBpc3N1ZVdlVm90ZUlkOiAnJyxcbiAgICB9O1xuICAgIHRoaXMuZ2V0SXNzdWVMaW5rID0gdGhpcy5nZXRJc3N1ZUxpbmsuYmluZCh0aGlzKTtcbiAgfVxuXG4gIGNvbXBvbmVudERpZE1vdW50ICgpIHtcbiAgICAvLyBjb25zb2xlLmxvZyhcIklzc3VlQ2FyZCwgY29tcG9uZW50RGlkTW91bnQsIHRoaXMucHJvcHM6XCIsIHRoaXMucHJvcHMpO1xuICAgIGlmICh0aGlzLnByb3BzLmlzc3VlICYmIHRoaXMucHJvcHMuaXNzdWUuaXNzdWVfd2Vfdm90ZV9pZCkge1xuICAgICAgY29uc3QgeyBpc3N1ZV93ZV92b3RlX2lkOiBpc3N1ZVdlVm90ZUlkIH0gPSB0aGlzLnByb3BzLmlzc3VlO1xuICAgICAgY29uc3QgaW1hZ2VTaXplcyA9IG5ldyBTZXQoWydTTUFMTCcsICdNRURJVU0nLCAnTEFSR0UnXSk7XG4gICAgICBsZXQgaXNzdWVJbWFnZVNpemUgPSAnU01BTEwnOyAvLyBTZXQgdGhlIGRlZmF1bHRcbiAgICAgIGlmIChpbWFnZVNpemVzLmhhcyh0aGlzLnByb3BzLmlzc3VlSW1hZ2VTaXplKSkge1xuICAgICAgICAoeyBpc3N1ZUltYWdlU2l6ZSB9ID0gdGhpcy5wcm9wcyk7XG4gICAgICB9XG4gICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgYmFsbG90SXRlbVdlVm90ZUlkOiB0aGlzLnByb3BzLmJhbGxvdEl0ZW1XZVZvdGVJZCxcbiAgICAgICAgY291bnRPZk9yZ2FuaXphdGlvbnNVbmRlclRoaXNJc3N1ZTogVm90ZXJHdWlkZVN0b3JlLmdldFZvdGVyR3VpZGVzRm9yVmFsdWUoaXNzdWVXZVZvdGVJZCkubGVuZ3RoLFxuICAgICAgICBpc3N1ZTogdGhpcy5wcm9wcy5pc3N1ZSxcbiAgICAgICAgaXNzdWVJbWFnZVNpemUsXG4gICAgICAgIGlzc3VlV2VWb3RlSWQsXG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIChuZXh0UHJvcHMpIHtcbiAgICAvLyBjb25zb2xlLmxvZyhcIklzc3VlQ2FyZCwgY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcywgbmV4dFByb3BzOlwiLCBuZXh0UHJvcHMpO1xuICAgIGlmIChuZXh0UHJvcHMuaXNzdWUgJiYgbmV4dFByb3BzLmlzc3VlLmlzc3VlX3dlX3ZvdGVfaWQpIHtcbiAgICAgIGNvbnN0IHsgaXNzdWVfd2Vfdm90ZV9pZDogaXNzdWVXZVZvdGVJZCB9ID0gbmV4dFByb3BzLmlzc3VlO1xuICAgICAgY29uc3QgaW1hZ2VTaXplcyA9IG5ldyBTZXQoWydTTUFMTCcsICdNRURJVU0nLCAnTEFSR0UnXSk7XG4gICAgICBsZXQgaXNzdWVJbWFnZVNpemUgPSAnU01BTEwnOyAvLyBTZXQgdGhlIGRlZmF1bHRcbiAgICAgIGlmIChpbWFnZVNpemVzLmhhcyhuZXh0UHJvcHMuaXNzdWVJbWFnZVNpemUpKSB7XG4gICAgICAgICh7IGlzc3VlSW1hZ2VTaXplIH0gPSBuZXh0UHJvcHMpO1xuICAgICAgfVxuICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIGJhbGxvdEl0ZW1XZVZvdGVJZDogbmV4dFByb3BzLmJhbGxvdEl0ZW1XZVZvdGVJZCxcbiAgICAgICAgY291bnRPZk9yZ2FuaXphdGlvbnNVbmRlclRoaXNJc3N1ZTogVm90ZXJHdWlkZVN0b3JlLmdldFZvdGVyR3VpZGVzRm9yVmFsdWUoaXNzdWVXZVZvdGVJZCkubGVuZ3RoLFxuICAgICAgICBpc3N1ZTogbmV4dFByb3BzLmlzc3VlLFxuICAgICAgICBpc3N1ZUltYWdlU2l6ZSxcbiAgICAgICAgaXNzdWVXZVZvdGVJZCxcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIHNob3VsZENvbXBvbmVudFVwZGF0ZSAobmV4dFByb3BzLCBuZXh0U3RhdGUpIHtcbiAgICBpZiAodGhpcy5zdGF0ZS5pc3N1ZVdlVm90ZUlkICE9PSBuZXh0U3RhdGUuaXNzdWVXZVZvdGVJZCkge1xuICAgICAgLy8gY29uc29sZS5sb2coJ3RoaXMuc3RhdGUuaXNzdWVXZVZvdGVJZCcsIHRoaXMuc3RhdGUuaXNzdWVXZVZvdGVJZCwgJywgbmV4dFN0YXRlLmlzc3VlV2VWb3RlSWQnLCBuZXh0U3RhdGUuaXNzdWVXZVZvdGVJZCk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKHRoaXMuc3RhdGUuY291bnRPZk9yZ2FuaXphdGlvbnNVbmRlclRoaXNJc3N1ZSAhPT0gbmV4dFN0YXRlLmNvdW50T2ZPcmdhbml6YXRpb25zVW5kZXJUaGlzSXNzdWUpIHtcbiAgICAgIC8vIGNvbnNvbGUubG9nKCd0aGlzLnN0YXRlLmNvdW50T2ZPcmdhbml6YXRpb25zVW5kZXJUaGlzSXNzdWUnLCB0aGlzLnN0YXRlLmNvdW50T2ZPcmdhbml6YXRpb25zVW5kZXJUaGlzSXNzdWUsICcsIG5leHRTdGF0ZS5jb3VudE9mT3JnYW5pemF0aW9uc1VuZGVyVGhpc0lzc3VlJywgbmV4dFN0YXRlLmNvdW50T2ZPcmdhbml6YXRpb25zVW5kZXJUaGlzSXNzdWUpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgZ2V0SXNzdWVMaW5rICgpIHtcbiAgICBjb25zdCB7IGlzc3VlIH0gPSB0aGlzLnN0YXRlO1xuICAgIGlmIChpc3N1ZSAmJiBpc3N1ZS5pc3N1ZV9uYW1lKSB7XG4gICAgICBjb25zdCBpc3N1ZVNsdWcgPSBjb252ZXJ0TmFtZVRvU2x1Zyhpc3N1ZS5pc3N1ZV9uYW1lKTtcbiAgICAgIHJldHVybiBgL3ZhbHVlLyR7aXNzdWVTbHVnfWA7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAnJztcbiAgICB9XG4gIH1cblxuICByZW5kZXIgKCkge1xuICAgIHJlbmRlckxvZygnSXNzdWVDYXJkJyk7ICAvLyBTZXQgTE9HX1JFTkRFUl9FVkVOVFMgdG8gbG9nIGFsbCByZW5kZXJzXG4gICAgY29uc3QgeyBjb3VudE9mT3JnYW5pemF0aW9uc1VuZGVyVGhpc0lzc3VlIH0gPSB0aGlzLnN0YXRlO1xuICAgIGlmICghdGhpcy5zdGF0ZS5pc3N1ZVdlVm90ZUlkLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIDxkaXYgY2xhc3NOYW1lPVwiY2FyZC1wb3BvdmVyX193aWR0aC0tbWluaW11bVwiPntMb2FkaW5nV2hlZWx9PC9kaXY+O1xuICAgIH1cblxuICAgIGxldCB7IGlzc3VlX2Rlc2NyaXB0aW9uOiBpc3N1ZURlc2NyaXB0aW9uLCBpc3N1ZV9uYW1lOiBpc3N1ZURpc3BsYXlOYW1lIH0gPSB0aGlzLnN0YXRlLmlzc3VlO1xuXG4gICAgaXNzdWVEaXNwbGF5TmFtZSA9IGlzc3VlRGlzcGxheU5hbWUgfHwgJyc7XG4gICAgaXNzdWVEZXNjcmlwdGlvbiA9IGlzc3VlRGVzY3JpcHRpb24gfHwgJyc7XG5cbiAgICBsZXQgaXNzdWVJbWFnZTtcbiAgICBjb25zdCBudW1iZXJPZkxpbmVzID0gMztcbiAgICBpZiAodGhpcy5zdGF0ZS5pc3N1ZUltYWdlU2l6ZSA9PT0gJ1NNQUxMJykge1xuICAgICAgaXNzdWVJbWFnZSA9IChcbiAgICAgICAgPElzc3VlSW1hZ2VEaXNwbGF5XG4gICAgICAgICAgaXNzdWVXZVZvdGVJZD17dGhpcy5zdGF0ZS5pc3N1ZS5pc3N1ZV93ZV92b3RlX2lkfVxuICAgICAgICAgIGlzc3VlSW1hZ2VTaXplPVwiU01BTExcIlxuICAgICAgICAgIHNob3dQbGFjZWhvbGRlckltYWdlXG4gICAgICAgICAgdHVybk9mZklzc3VlRmFkZVxuICAgICAgICAvPlxuICAgICAgKTtcbiAgICB9IGVsc2UgaWYgKHRoaXMuc3RhdGUuaXNzdWVJbWFnZVNpemUgPT09ICdNRURJVU0nKSB7XG4gICAgICBpc3N1ZUltYWdlID0gKFxuICAgICAgICA8SXNzdWVJbWFnZURpc3BsYXlcbiAgICAgICAgICBpc3N1ZVdlVm90ZUlkPXt0aGlzLnN0YXRlLmlzc3VlLmlzc3VlX3dlX3ZvdGVfaWR9XG4gICAgICAgICAgaXNzdWVJbWFnZVNpemU9XCJNRURJVU1cIlxuICAgICAgICAgIHNob3dQbGFjZWhvbGRlckltYWdlXG4gICAgICAgICAgdHVybk9mZklzc3VlRmFkZVxuICAgICAgICAvPlxuICAgICAgKTtcbiAgICB9IGVsc2UgaWYgKHRoaXMuc3RhdGUuaXNzdWVJbWFnZVNpemUgPT09ICdMQVJHRScpIHtcbiAgICAgIGlzc3VlSW1hZ2UgPSAoXG4gICAgICAgIDxJc3N1ZUltYWdlRGlzcGxheVxuICAgICAgICAgIGlzc3VlV2VWb3RlSWQ9e3RoaXMuc3RhdGUuaXNzdWUuaXNzdWVfd2Vfdm90ZV9pZH1cbiAgICAgICAgICBpc3N1ZUltYWdlU2l6ZT1cIkxBUkdFXCJcbiAgICAgICAgICBzaG93UGxhY2Vob2xkZXJJbWFnZVxuICAgICAgICAgIHR1cm5PZmZJc3N1ZUZhZGVcbiAgICAgICAgLz5cbiAgICAgICk7XG4gICAgfVxuXG4gICAgY29uc3QgeyBpc3N1ZVdlVm90ZUlkLCBiYWxsb3RJdGVtV2VWb3RlSWQgfSA9IHRoaXMuc3RhdGU7XG4gICAgY29uc3QgeyB0dXJuT2ZmSXNzdWVJbWFnZSwgaW5jbHVkZUxpbmtUb0lzc3VlLCBmb2xsb3dUb2dnbGVPbiwgdHVybk9mZkRlc2NyaXB0aW9uLCBjdXJyZW50QmFsbG90SWRJblVybCwgdXJsV2l0aG91dEhhc2ggfSA9IHRoaXMucHJvcHM7XG4gICAgcmV0dXJuIChcbiAgICAgIDxXcmFwcGVyXG4gICAgICAgIGtleT17YGlzc3VlLWNhcmQtJHtpc3N1ZVdlVm90ZUlkfWB9XG4gICAgICAgIGNsYXNzTmFtZT17dGhpcy5wcm9wcy5jb25kZW5zZWQgPyBcImNhcmQgdS1mdWxsLWhlaWdodFwiIDogXCJjYXJkIHUtaW5zZXRfX2gtLW1kIHUtcGFkZGluZy10b3AtLW1kIHUtcGFkZGluZy1ib3R0b20tLXhzIHUtZnVsbC1oZWlnaHRcIn1cbiAgICAgICAgY29uZGVuc2VkPXshIXRoaXMucHJvcHMuY29uZGVuc2VkfVxuICAgICAgPlxuICAgICAgICA8RmxleCBjb25kZW5zZWQ9eyEhdGhpcy5wcm9wcy5jb25kZW5zZWR9PlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY2FyZC1tYWluX19tZWRpYS1vYmplY3QtYW5jaG9yXCI+XG4gICAgICAgICAgICB7IXR1cm5PZmZJc3N1ZUltYWdlICYmIChcbiAgICAgICAgICAgICAgPHNwYW4+XG4gICAgICAgICAgICAgICAge2luY2x1ZGVMaW5rVG9Jc3N1ZSA/IChcbiAgICAgICAgICAgICAgICAgIDxMaW5rIHRvPXt0aGlzLmdldElzc3VlTGlua31cbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cInUtbm8tdW5kZXJsaW5lXCJcbiAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAge2lzc3VlSW1hZ2V9XG4gICAgICAgICAgICAgICAgICA8L0xpbms+XG4gICAgICAgICAgICAgICAgKSA6IChcbiAgICAgICAgICAgICAgICAgIDxzcGFuPlxuICAgICAgICAgICAgICAgICAgICB7aXNzdWVJbWFnZX1cbiAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgICApXG4gICAgICAgICAgICB9XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPD5cbiAgICAgICAgICAgIHtpbmNsdWRlTGlua1RvSXNzdWUgPyAoXG4gICAgICAgICAgICAgIDxMaW5rIHRvPXt0aGlzLmdldElzc3VlTGlua31cbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwidS1uby11bmRlcmxpbmVcIlxuICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgPElzc3VlTmFtZT57YCR7aXNzdWVEaXNwbGF5TmFtZX0gKCR7Y291bnRPZk9yZ2FuaXphdGlvbnNVbmRlclRoaXNJc3N1ZX0pYH08L0lzc3VlTmFtZT5cbiAgICAgICAgICAgICAgPC9MaW5rPlxuICAgICAgICAgICAgKSA6XG4gICAgICAgICAgICAgIDxJc3N1ZU5hbWU+e2Ake2lzc3VlRGlzcGxheU5hbWV9ICgke2NvdW50T2ZPcmdhbml6YXRpb25zVW5kZXJUaGlzSXNzdWV9KWB9PC9Jc3N1ZU5hbWU+XG4gICAgICAgICAgICB9XG4gICAgICAgICAgPC8+XG4gICAgICAgICAge2ZvbGxvd1RvZ2dsZU9uICYmIGlzc3VlV2VWb3RlSWQgPyAoXG4gICAgICAgICAgICA8Rm9sbG93SXNzdWVUb2dnbGVDb250YWluZXI+XG4gICAgICAgICAgICAgIDxJc3N1ZUZvbGxvd1RvZ2dsZUJ1dHRvblxuICAgICAgICAgICAgICAgIGJhbGxvdEl0ZW1XZVZvdGVJZD17YmFsbG90SXRlbVdlVm90ZUlkfVxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZU92ZXJyaWRlPVwicHVsbC1sZWZ0XCJcbiAgICAgICAgICAgICAgICBjdXJyZW50QmFsbG90SWRJblVybD17Y3VycmVudEJhbGxvdElkSW5Vcmx9XG4gICAgICAgICAgICAgICAgaXNzdWVOYW1lPXt0aGlzLnN0YXRlLmlzc3VlLmlzc3VlX25hbWV9XG4gICAgICAgICAgICAgICAgaXNzdWVXZVZvdGVJZD17aXNzdWVXZVZvdGVJZH1cbiAgICAgICAgICAgICAgICB1cmxXaXRob3V0SGFzaD17dXJsV2l0aG91dEhhc2h9XG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8L0ZvbGxvd0lzc3VlVG9nZ2xlQ29udGFpbmVyPlxuICAgICAgICAgICkgOiBudWxsXG4gICAgICAgICAgfVxuICAgICAgICA8L0ZsZXg+XG4gICAgICAgIHsgIXR1cm5PZmZEZXNjcmlwdGlvbiAmJiAhdGhpcy5wcm9wcy5jb25kZW5zZWQgJiYgKFxuICAgICAgICA8RGVzY3JpcHRpb24+XG4gICAgICAgICAgICB7IGluY2x1ZGVMaW5rVG9Jc3N1ZSA/IChcbiAgICAgICAgICAgICAgPExpbmsgdG89e3RoaXMuZ2V0SXNzdWVMaW5rfVxuICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cInUtbm8tdW5kZXJsaW5lXCJcbiAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIDxSZWFkTW9yZSB0ZXh0X3RvX2Rpc3BsYXk9e2lzc3VlRGVzY3JpcHRpb259XG4gICAgICAgICAgICAgICAgICAgICAgICAgIG51bV9vZl9saW5lcz17bnVtYmVyT2ZMaW5lc31cbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICA8L0xpbms+XG4gICAgICAgICAgICApIDogKFxuICAgICAgICAgICAgICA8UmVhZE1vcmUgdGV4dF90b19kaXNwbGF5PXtpc3N1ZURlc2NyaXB0aW9ufVxuICAgICAgICAgICAgICAgICAgICAgICAgICBudW1fb2ZfbGluZXM9e251bWJlck9mTGluZXN9XG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICApXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgPC9EZXNjcmlwdGlvbj5cbiAgICAgICAgKVxuICAgICAgICB9XG4gICAgICA8L1dyYXBwZXI+XG4gICAgKTtcbiAgfVxufVxuXG5jb25zdCBXcmFwcGVyID0gc3R5bGVkLmRpdmBcbiAgYmFja2dyb3VuZDogd2hpdGU7XG4gIGJvcmRlcjogJHtwcm9wcyA9PiAocHJvcHMuY29uZGVuc2VkID8gJzFweCBzb2xpZCAjODg4JyA6ICdub25lJyl9O1xuICBib3gtc2hhZG93OiAke3Byb3BzID0+IChwcm9wcy5jb25kZW5zZWQgPyAnbm9uZSAhaW1wb3J0YW50JyA6IG51bGwpfTtcbiAgcGFkZGluZzogJHtwcm9wcyA9PiAocHJvcHMuY29uZGVuc2VkID8gJzE2cHggMTJweCcgOiBudWxsKX07XG4gIGhlaWdodDogJHtwcm9wcyA9PiAocHJvcHMuY29uZGVuc2VkID8gJ2ZpdC1jb250ZW50JyA6IG51bGwpfTtcbiAgbWFyZ2luOiAke3Byb3BzID0+IChwcm9wcy5jb25kZW5zZWQgPyAnNHB4IDAnIDogbnVsbCl9O1xuYDtcblxuY29uc3QgSXNzdWVOYW1lID0gc3R5bGVkLmgzYFxuICBmb250LXNpemU6IDE4cHg7XG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xuICBtYXJnaW4tYm90dG9tOiAwO1xuYDtcblxuY29uc3QgRm9sbG93SXNzdWVUb2dnbGVDb250YWluZXIgPSBzdHlsZWQuZGl2YFxuICBtYXJnaW4tbGVmdDogYXV0bztcbmA7XG5cbmNvbnN0IEZsZXggPSBzdHlsZWQuZGl2YFxuICBkaXNwbGF5OiBmbGV4O1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtc3RhcnQ7XG4gIHdpZHRoOiAke3Byb3BzID0+IChwcm9wcy5jb25kZW5zZWQgPyAnMTAwJScgOiBudWxsKX07XG5gO1xuXG5jb25zdCBEZXNjcmlwdGlvbiA9IHN0eWxlZC5kaXZgXG4gIG1hcmdpbi10b3A6IDhweDtcbiAgZm9udC1zaXplOiAxNHB4O1xuICBjb2xvcjogIzMzMztcbmA7XG5cbmV4cG9ydCBkZWZhdWx0IElzc3VlQ2FyZDtcbiJdfQ==*/