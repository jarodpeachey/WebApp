.c1pq7h1g{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-flow:column;-ms-flex-flow:column;flex-flow:column;padding:16px 16px 0 16px;margin-bottom:8px;overflow-x:hidden;-webkit-transition:all 200ms ease-in;transition:all 200ms ease-in;border:1px solid var(--c1pq7h1g-0);width:var(--c1pq7h1g-1);margin-right:8px;border-radius:4px;}.c1pq7h1g:hover{border:1px solid var(--c1pq7h1g-2);box-shadow:0 1px 3px 0 rgba(0,0,0,.2),0 1px 1px 0 rgba(0,0,0,.14),0 2px 1px -1px rgba(0,0,0,.12);}@media (max-width:var(--c1pq7h1g-3)){.c1pq7h1g{-webkit-flex-flow:column;-ms-flex-flow:column;flex-flow:column;width:100%;}}@media (max-width:var(--c1pq7h1g-4)){.c1pq7h1g{-webkit-flex-flow:column;-ms-flex-flow:column;flex-flow:column;border:none;border-bottom:1px solid var(--c1pq7h1g-0);padding:16px 0 0 0;margin-bottom:8px;width:100%;}.c1pq7h1g:hover{border:none;border-bottom:1px solid var(--c1pq7h1g-0);box-shadow:none;}}
.c1j97a07{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-box-flex:8;-webkit-flex-grow:8;-ms-flex-positive:8;flex-grow:8;}
.cj1rqtk{cursor:pointer;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-flow:row wrap;-ms-flex-flow:row wrap;flex-flow:row wrap;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;}
.ct3dyyx{padding-bottom:10px;}
.crpga5c{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-flow:var(--crpga5c-0);-ms-flex-flow:var(--crpga5c-0);flex-flow:var(--crpga5c-0);-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;}@media (max-width:var(--crpga5c-1)){.crpga5c{-webkit-flex-flow:row wrap;-ms-flex-flow:row wrap;flex-flow:row wrap;}}
.m1e1o69d{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-box-pack:end;-webkit-justify-content:flex-end;-ms-flex-pack:end;justify-content:flex-end;width:100%;}
.th3gja5{font-size:18px;font-weight:bold;margin-bottom:12px;cursor:pointer;}@media (max-width:var(--th3gja5-0)){.th3gja5{font-size:16px;margin-bottom:8px;}}
/*# sourceMappingURL=data:application/json;base64,*/