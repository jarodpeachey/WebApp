.i1yvaau0{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-flow:row wrap;-ms-flex-flow:row wrap;flex-flow:row wrap;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;}
.c1ocakiu{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-flow:row wrap;-ms-flex-flow:row wrap;flex-flow:row wrap;}
.c1fhu2ce{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-flow:column;-ms-flex-flow:column;flex-flow:column;padding-right:8px;cursor:pointer;-webkit-transition:all 200ms ease-in;transition:all 200ms ease-in;}@media (min-width:768px){.c1fhu2ce{max-width:47%;border:none;border:1px solid #eee;border-radius:4px;padding:0 16px;margin-right:10px;margin-bottom:16px;}.c1fhu2ce:hover{border:1px solid var(--c1fhu2ce-0);box-shadow:0 1px 3px 0 rgba(0,0,0,.2),0 1px 1px 0 rgba(0,0,0,.14),0 2px 1px -1px rgba(0,0,0,.12);}}
.ccolfld{font-weight:bold;color:#4371cc;}
.c41ni4n{font-size:12px;color:#777;}@media (max-width:var(--c41ni4n-0)){.c41ni4n{max-width:140%;}}
.m1k6knjo{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-flow:column;-ms-flex-flow:column;flex-flow:column;max-width:75%;cursor:pointer;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;padding-right:8px;}@media (max-width:var(--m1k6knjo-0)){.m1k6knjo{max-width:70%;}}
.t13bwbl{font-size:18px;font-weight:bold;margin:.1rem 0;}@media (max-width:var(--t13bwbl-0)){.t13bwbl{font-size:16px;}}
.s3a4n73{font-size:16px;font-weight:300;color:#555;margin-top:.6rem;width:135%;}@media (max-width:var(--s3a4n73-0)){.s3a4n73{font-size:13px;}}
.i46i0fm{font-size:13px;font-weight:300;color:#777;width:135%;}
/*# sourceMappingURL=data:application/json;base64,*/