.b56dmvn{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-flow:column;-ms-flex-flow:column;flex-flow:column;}

.e1sqphvr{font-size:12px;font-weight:100;}@media (min-width:var(--e1sqphvr-0)){.e1sqphvr{font-size:12px;}}
/*# sourceMappingURL=data:application/json;base64,{"version":3,"sources":["D:\\Jarod\\WeVote\\WebApp\\src\\js\\components\\Ballot\\BallotElectionList.jsx"],"names":[".b56dmvn",".e1yisp25",".e1sqphvr"],"mappings":"AAmeMA;AAKAC;AAGAC","file":"D:\\Jarod\\WeVote\\WebApp\\src\\js\\components\\Ballot\\BallotElectionList.jsx","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport moment from 'moment';\nimport { styled } from 'linaria/react';\nimport Button from '@material-ui/core/Button';\nimport BallotActions from '../../actions/BallotActions';\nimport BallotStore from '../../stores/BallotStore';\nimport { historyPush } from '../../utils/cordovaUtils';\nimport { renderLog } from '../../utils/logging';\nimport LoadingWheel from '../LoadingWheel';\nimport OrganizationActions from '../../actions/OrganizationActions';\nimport VoterActions from '../../actions/VoterActions';\nimport VoterStore from '../../stores/VoterStore';\nimport { cleanArray } from '../../utils/textFormat';\nimport { convertStateCodeToStateText } from '../../utils/address-functions';\n\nconst MAXIMUM_NUMBER_OF_CHARACTERS_TO_SHOW = 36;\nconst MAXIMUM_NUMBER_OF_CHARACTERS_TO_SHOW_DESKTOP = 36;\n\n// DEPRECATED - MIGRATE AWAY FROM THIS - DEPRECATED - DEPRECATED - DEPRECATED\n// New file is BallotElectionListWithFilters\nexport default class BallotElectionList extends Component {\n  static propTypes = {\n    ballotElectionList: PropTypes.array.isRequired,\n    ballotBaseUrl: PropTypes.string,\n    organization_we_vote_id: PropTypes.string, // If looking at voter guide, we pass in the parent organization_we_vote_id\n    showRelevantElections: PropTypes.bool,\n    toggleFunction: PropTypes.func,\n  };\n\n  constructor (props) {\n    super(props);\n    let priorElectionId = '';\n    if (BallotStore.ballotProperties) {\n      priorElectionId = BallotStore.ballotProperties.google_civic_election_id;\n    } else if (VoterStore.electionId()) {\n      priorElectionId = VoterStore.electionId();\n    }\n    const stateCode = VoterStore.getStateCodeFromIPAddress();\n\n    this.state = {\n      loadingNewBallotItems: false,\n      priorElectionId,\n      showMoreUpcomingElections: false,\n      showMorePriorElections: false,\n      showPriorElectionsList: false,\n      stateName: convertStateCodeToStateText(stateCode),\n      updatedElectionId: '',\n    };\n\n    this.ballotStoreListener = BallotStore.addListener(this.onBallotStoreChange.bind(this));\n    this.voterStoreListener = VoterStore.addListener(this.onVoterStoreChange.bind(this));\n  }\n\n  componentWillUnmount () {\n    this.ballotStoreListener.remove();\n    this.voterStoreListener.remove();\n  }\n\n  onBallotStoreChange () {\n    // console.log(\"BallotElectionList.jsx onBallotStoreChange, priorElectionId: \", this.state.priorElectionId, \", updatedElectionId: \", this.state.updatedElectionId);\n    // console.log(\"BallotStore.ballotProperties: \", BallotStore.ballotProperties);\n    if (BallotStore.ballotProperties && BallotStore.ballotProperties.ballot_found && BallotStore.ballot && BallotStore.ballot.length === 0) {\n      // Ballot is found but ballot is empty. We want to stay put.\n      // console.log(\"onBallotStoreChange: ballot_with_all_items is empty\");\n    }\n    if (this.state.priorElectionId !== this.state.updatedElectionId && this.state.loadingNewBallotItems && this.props.toggleFunction) {\n      // console.log(\"onBallotStoreChange--------- loadingNewBallotItems:\", this.state.loadingNewBallotItems);\n      this.setState({\n        loadingNewBallotItems: false,\n        updatedElectionId: BallotStore.ballotProperties.google_civic_election_id,\n      });\n      // console.log(\"onBallotStoreChange--------- this.props.toggleFunction()\");\n      this.props.toggleFunction(this.state.destinationUrlForHistoryPush);\n    }\n  }\n\n  onVoterStoreChange () {\n    // console.log(\"BallotElectionList.jsx onVoterStoreChange, VoterStore.electionId(): \", VoterStore.electionId(), \", priorElectionId: \", this.state.priorElectionId, \", updatedElectionId: \", this.state.updatedElectionId);\n    // if (BallotStore.ballotProperties && BallotStore.ballotProperties.ballot_found && BallotStore.ballot && BallotStore.ballot.length !== 0) {\n    if (VoterStore.electionId() && VoterStore.electionId() !== this.state.priorElectionId) {\n      if (this.state.loadingNewBallotItems && this.props.toggleFunction) {\n        // console.log(\"onVoterStoreChange--------- loadingNewBallotItems:\", this.state.loadingNewBallotItems);\n        const stateCode = VoterStore.getStateCodeFromIPAddress();\n        this.setState({\n          loadingNewBallotItems: false,\n          stateName: convertStateCodeToStateText(stateCode),\n          updatedElectionId: VoterStore.electionId(),\n        });\n        // console.log(\"onVoterStoreChange--------- this.props.toggleFunction()\");\n        this.props.toggleFunction(this.state.destinationUrlForHistoryPush);\n      }\n    }\n  }\n\n  goToDifferentElection = (ballotLocationShortcut, ballotReturnedWeVoteId, googleCivicElectionId, originalTextForMapSearch = '') => {\n    const ballotBaseurl = this.props.ballotBaseUrl || '/ballot';\n    const { organization_we_vote_id: organizationWeVoteId } = this.props;\n    let destinationUrlForHistoryPush = '';\n    if (ballotLocationShortcut && ballotLocationShortcut !== '' && ballotLocationShortcut !== 'none') {\n      // console.log(\"goToDifferentElection, ballotLocationShortcut: \", ballotLocationShortcut);\n      BallotActions.voterBallotItemsRetrieve(0, '', ballotLocationShortcut);\n      destinationUrlForHistoryPush = `${ballotBaseurl}/${ballotLocationShortcut}`; // Used with historyPush once modal is closed\n    } else if (ballotReturnedWeVoteId && ballotReturnedWeVoteId !== '' && ballotReturnedWeVoteId !== 'none') {\n      // console.log(\"goToDifferentElection, ballotReturnedWeVoteId: \", ballotReturnedWeVoteId);\n      BallotActions.voterBallotItemsRetrieve(0, ballotReturnedWeVoteId, '');\n      destinationUrlForHistoryPush = `${ballotBaseurl}/id/${ballotReturnedWeVoteId}`; // Used with historyPush once modal is closed\n    } else if (originalTextForMapSearch && originalTextForMapSearch !== '') {\n      // Do we still want to be updating addresses? Maybe instead just update google_civic_election_id?\n      // console.log(\"goToDifferentElection, originalTextForMapSearch: \", originalTextForMapSearch);\n      const simpleSave = false;\n      VoterActions.voterAddressSave(originalTextForMapSearch, simpleSave, googleCivicElectionId);\n      destinationUrlForHistoryPush = ballotBaseurl; // Used with historyPush once modal is closed\n    } else if (googleCivicElectionId && googleCivicElectionId !== 0) {\n      BallotActions.voterBallotItemsRetrieve(googleCivicElectionId, '', '');\n      // console.log(\"goToDifferentElection, googleCivicElectionId: \", googleCivicElectionId);\n      destinationUrlForHistoryPush = `${ballotBaseurl}/election/${googleCivicElectionId}`; // Used with historyPush once modal is closed\n    }\n\n    // Request positions for the different election\n    if (organizationWeVoteId && organizationWeVoteId !== '') {\n      // console.log(\"BallotElectionList calling positionListForOpinionMaker, organizationWeVoteId: \", organizationWeVoteId, \", googleCivicElectionId:\", googleCivicElectionId);\n      // if (!OrganizationStore.positionListForOpinionMakerHasBeenRetrievedOnce(googleCivicElectionId, organizationWeVoteId)) {\n      OrganizationActions.positionListForOpinionMaker(organizationWeVoteId, true, false, googleCivicElectionId);\n      // }\n    }\n\n    if (this.props.toggleFunction) {\n      // console.log(\"goToDifferentElection, loadingNewBallotItems: \", this.state.loadingNewBallotItems);\n      // console.log(\"goToDifferentElection, priorElectionId: \", this.state.priorElectionId, \", updatedElectionId: \", this.state.updatedElectionId);\n      this.setState({\n        destinationUrlForHistoryPush,\n        loadingNewBallotItems: true,\n        priorElectionId: BallotStore.ballotProperties.google_civic_election_id || VoterStore.electionId() || 0,\n        updatedElectionId: 0,\n      });\n    } else {\n      historyPush(destinationUrlForHistoryPush);\n    }\n  }\n\n  filterElectionsInState (electionList) {\n    return electionList.filter(election => this.isElectionInState(election));\n  }\n\n  // filterElectionsOutsideState (electionList) {\n  //   return electionList.filter(election => !this.isElectionInState(election));\n  // }\n\n  isElectionInState (election) {\n    const electionName = election.election_description_text;\n    if (this.state.stateName.length && electionName.includes(this.state.stateName)) {\n      return true;\n    }\n    // show all national elections regardless of state\n    // return election.is_national;\n    return electionName.includes('U.S.') ||\n           electionName.includes('US') ||\n           electionName.includes('United States');\n  }\n\n\n  toggleShowMoreUpcomingElections () {\n    this.setState(prevState => ({ showMoreUpcomingElections: !prevState.showMoreUpcomingElections }));\n  }\n\n  toggleShowMorePriorElections () {\n    this.setState(prevState => ({ showMorePriorElections: !prevState.showMorePriorElections }));\n  }\n\n  toggleShowPriorElectionsList () {\n    this.setState(prevState => ({ showPriorElectionsList: !prevState.showPriorElectionsList }));\n  }\n\n  renderUpcomingElectionList (list, currentDate) {\n    const renderedList = list.map((item) => {\n      const electionDateTomorrowMoment = moment(item.election_day_text, 'YYYY-MM-DD').add(1, 'days');\n      const electionDateTomorrow = electionDateTomorrowMoment.format('YYYY-MM-DD');\n      return electionDateTomorrow > currentDate ? (\n        <div key={`upcoming-election-${item.google_civic_election_id}`}>\n          <dl>\n            <Button\n              color=\"primary\"\n              fullWidth\n              id={`ballotElectionListButton-${item.google_civic_election_id}`}\n              onClick={() => this.goToDifferentElection(item.ballot_location_shortcut, item.ballot_returned_we_vote_id, item.google_civic_election_id, item.original_text_for_map_search)}\n              variant=\"contained\"\n            >\n              <ButtonContentsWrapper>\n                <ElectionName>\n                  {/* Mobile */}\n                  <span className=\"d-block d-sm-none\">\n                    { item.election_description_text.length < MAXIMUM_NUMBER_OF_CHARACTERS_TO_SHOW ? (\n                      <span>\n                        {item.election_description_text}\n                        &nbsp;\n                      </span>\n                    ) : (\n                      <span>\n                        {item.election_description_text.substring(0, MAXIMUM_NUMBER_OF_CHARACTERS_TO_SHOW - 3)}\n                        ...&nbsp;\n                      </span>\n                    )}\n                  </span>\n                  {/* Desktop */}\n                  <span className=\"d-none d-sm-block\">\n                    { item.election_description_text.length < MAXIMUM_NUMBER_OF_CHARACTERS_TO_SHOW_DESKTOP ? (\n                      <span>\n                        {item.election_description_text}\n                        &nbsp;\n                      </span>\n                    ) : (\n                      <span>\n                        {item.election_description_text.substring(0, MAXIMUM_NUMBER_OF_CHARACTERS_TO_SHOW_DESKTOP - 3)}\n                        ...&nbsp;\n                      </span>\n                    )}\n                  </span>\n                </ElectionName>\n                <ElectionDate>\n                  {moment(item.election_day_text).format('MMM Do, YYYY')}\n                </ElectionDate>\n              </ButtonContentsWrapper>\n            </Button>\n          </dl>\n        </div>\n      ) :\n        null;\n    });\n    return cleanArray(renderedList);\n  }\n\n  renderPriorElectionList (list, currentDate) {\n    const renderedList = list.map((item) => {\n      const electionDateTomorrowMoment = moment(item.election_day_text, 'YYYY-MM-DD').add(1, 'days');\n      const electionDateTomorrow = electionDateTomorrowMoment.format('YYYY-MM-DD');\n      return electionDateTomorrow > currentDate ?\n        null : (\n          <div key={`prior-election-${item.google_civic_election_id}`}>\n            <dl>\n              <Button\n                color=\"primary\"\n                fullWidth\n                id={`ballotElectionListButton-${item.google_civic_election_id}`}\n                onClick={() => this.goToDifferentElection(item.ballot_location_shortcut, item.ballot_returned_we_vote_id, item.google_civic_election_id, item.original_text_for_map_search)}\n                variant=\"contained\"\n              >\n                <ButtonContentsWrapper>\n                  <ElectionName>\n                    {/* Mobile */}\n                    <span className=\"d-block d-sm-none\">\n                      { item.election_description_text.length < MAXIMUM_NUMBER_OF_CHARACTERS_TO_SHOW ? (\n                        <span>\n                          {item.election_description_text}\n                          &nbsp;\n                        </span>\n                      ) : (\n                        <span>\n                          {item.election_description_text.substring(0, MAXIMUM_NUMBER_OF_CHARACTERS_TO_SHOW - 3)}\n                          ...&nbsp;\n                        </span>\n                      )}\n                    </span>\n                    {/* Desktop */}\n                    <span className=\"d-none d-sm-block\">\n                      { item.election_description_text.length < MAXIMUM_NUMBER_OF_CHARACTERS_TO_SHOW_DESKTOP ? (\n                        <span>\n                          {item.election_description_text}\n                          &nbsp;\n                        </span>\n                      ) : (\n                        <span>\n                          {item.election_description_text.substring(0, MAXIMUM_NUMBER_OF_CHARACTERS_TO_SHOW_DESKTOP - 3)}\n                          ...&nbsp;\n                        </span>\n                      )}\n                    </span>\n                  </ElectionName>\n                  <ElectionDate>\n                    {moment(item.election_day_text).format('MMM Do, YYYY')}\n                  </ElectionDate>\n                </ButtonContentsWrapper>\n              </Button>\n            </dl>\n          </div>\n        );\n    });\n    return cleanArray(renderedList);\n  }\n\n  render () {\n    renderLog('BallotElectionList');  // Set LOG_RENDER_EVENTS to log all renders\n    if (this.state.loadingNewBallotItems) {\n      return (\n        <div>\n          <h1 className=\"h1\">Switching ballot data now...</h1>\n          <br />\n          {LoadingWheel}\n        </div>\n      );\n    }\n\n    const currentDate = moment().format('YYYY-MM-DD');\n\n    const ballotElectionListUpcomingSorted = this.props.ballotElectionList.concat();\n    // We want to sort ascending so the next upcoming election is first\n    ballotElectionListUpcomingSorted.sort((a, b) => {\n      const electionDayTextA = a.election_day_text.toLowerCase();\n      const electionDayTextB = b.election_day_text.toLowerCase();\n      if (electionDayTextA < electionDayTextB) { // sort string ascending\n        return -1;\n      }\n      if (electionDayTextA > electionDayTextB) return 1;\n      return 0; // default return value (no sorting)\n    });\n\n    const ballotElectionListPastSorted = this.props.ballotElectionList.concat();\n    // We want to sort descending so the most recent election is first\n    ballotElectionListPastSorted.sort((a, b) => {\n      const electionDayTextA = a.election_day_text.toLowerCase();\n      const electionDayTextB = b.election_day_text.toLowerCase();\n      if (electionDayTextA < electionDayTextB) { // sort string descending\n        return 1;\n      }\n      if (electionDayTextA > electionDayTextB) return -1;\n      return 0; // default return value (no sorting)\n    });\n\n    const upcomingElectionList = this.renderUpcomingElectionList(ballotElectionListUpcomingSorted, currentDate);\n    const priorElectionList = this.renderPriorElectionList(ballotElectionListPastSorted, currentDate);\n\n    if (this.props.showRelevantElections) {\n      const upcomingBallotElectionListInState = this.filterElectionsInState(ballotElectionListUpcomingSorted);\n      const priorBallotElectionListInState = this.filterElectionsInState(ballotElectionListPastSorted);\n\n      const upcomingElectionListInState = this.renderUpcomingElectionList(upcomingBallotElectionListInState, currentDate);\n      const priorElectionListInState = this.renderPriorElectionList(priorBallotElectionListInState, currentDate);\n\n      const upcomingElectionListOutsideCount = upcomingElectionList.length - upcomingElectionListInState.length;\n      const priorElectionListOutsideCount = priorElectionList.length - priorElectionListInState.length;\n\n      // If there are no upcoming elections and no prior elections (anywhere in the country), return empty div\n      if (!upcomingElectionList.length && !priorElectionList.length) {\n        return (\n          <div />\n        );\n      }\n\n      // December 2018, these nested ternary expression should get fixed at some point\n\n      return (\n        <div className=\"ballot-election-list__list\">\n          <div className=\"ballot-election-list__upcoming\">\n            <h4 className=\"h4\">\n            Upcoming Election\n              { (upcomingElectionListInState && upcomingElectionListInState.length !== 1 && !this.state.showMoreUpcomingElections) ||\n                (upcomingElectionList && upcomingElectionList.length !== 1 && this.state.showMoreUpcomingElections) ? 's' : null\n              }\n              { this.state.stateName && this.state.stateName.length && !this.state.showMoreUpcomingElections ?\n                ` in ${this.state.stateName}` :\n                null\n              }\n            </h4>\n            { this.state.showMoreUpcomingElections ?    // eslint-disable-line no-nested-ternary\n              upcomingElectionList && upcomingElectionList.length ?\n                upcomingElectionList :\n                'There are no upcoming elections at this time.' :\n              upcomingElectionListInState && upcomingElectionListInState.length ?\n                upcomingElectionListInState :\n                'There are no upcoming elections in the state you are in at this time.'\n            }\n            { upcomingElectionListOutsideCount ?          // eslint-disable-line no-nested-ternary\n              this.state.showMoreUpcomingElections ? (\n                <div className=\"ballot-election-list__show-all\">\n                  <div className=\"ballot-election-list__toggle-link\" onClick={this.toggleShowMoreUpcomingElections.bind(this)}>\n                    { this.state.stateName && this.state.stateName.length ?\n                      `Only show elections in ${this.state.stateName}` :\n                      'Hide state elections'\n                    }\n                  </div>\n                </div>\n              ) : (\n                <div className=\"ballot-election-list__show-all\">\n                  <div className=\"ballot-election-list__toggle-link\" onClick={this.toggleShowMoreUpcomingElections.bind(this)}>\n                    Show all states -\n                    {' '}\n                    { upcomingElectionListOutsideCount }\n                    {' '}\n                    more election\n                    { upcomingElectionListOutsideCount !== 1 ? 's' : null }\n                  </div>\n                </div>\n              ) :\n              null\n            }\n          </div>\n\n          { this.state.showPriorElectionsList ? (\n            <div className=\"ballot-election-list__prior\">\n              { priorElectionListInState && priorElectionListInState.length ? (\n                <h4 className=\"h4\">\n                Prior Election\n                  { (priorElectionListInState.length > 1 ||\n                    (priorElectionList && priorElectionList.length > 1)) ?\n                    's' :\n                    null\n                  }\n                  { this.state.stateName && this.state.stateName.length && !this.state.showMorePriorElections ?\n                    ` in ${this.state.stateName}` :\n                    null\n                  }\n                </h4>\n              ) : null\n              }\n              { this.state.showMorePriorElections ?    // eslint-disable-line no-nested-ternary\n                priorElectionList && priorElectionList.length ?\n                  priorElectionList :\n                  null :\n                priorElectionListInState && priorElectionListInState.length ?\n                  priorElectionListInState :\n                  null\n              }\n              { priorElectionListOutsideCount ?          // eslint-disable-line no-nested-ternary\n                this.state.showMorePriorElections ? (\n                  <div className=\"ballot-election-list__toggle-link\" onClick={this.toggleShowMorePriorElections.bind(this)}>\n                    { this.state.stateName && this.state.stateName.length ?\n                      `Only show elections in ${this.state.stateName}` :\n                      'Hide state elections'\n                    }\n                  </div>\n                ) : (\n                  <div className=\"ballot-election-list__toggle-link\" onClick={this.toggleShowMorePriorElections.bind(this)}>\n                    Show all states -\n                    {' '}\n                    { priorElectionListOutsideCount }\n                    {' '}\n                    more election\n                    { priorElectionListOutsideCount !== 1 ? 's' : null }\n                  </div>\n                ) : null\n              }\n            </div>\n          ) : (\n            <div className=\"ballot-election-list__prior\">\n              <div className=\"ballot-election-list__toggle-link\" onClick={this.toggleShowPriorElectionsList.bind(this)}>\n                Show prior elections\n              </div>\n            </div>\n          )}\n        </div>\n      );\n    } else {\n      return (\n        <div className=\"ballot-election-list__list\">\n          <div className=\"ballot-election-list__upcoming\">\n            { upcomingElectionList && upcomingElectionList.length ? (\n              <h4 className=\"h4\">\n                Upcoming Election\n                { upcomingElectionList.length > 1 ? 's' : null }\n              </h4>\n            ) :\n              null\n            }\n            { upcomingElectionList && upcomingElectionList.length ? upcomingElectionList : null }\n          </div>\n\n          <div className=\"ballot-election-list__prior\">\n            { priorElectionList && priorElectionList.length ? (\n              <h4 className=\"h4\">\n                Prior Election\n                { priorElectionList.length > 1 ? 's' : null }\n              </h4>\n            ) :\n              null\n            }\n            { priorElectionList && priorElectionList.length ? priorElectionList : null }\n          </div>\n        </div>\n      );\n    }\n  }\n}\n\nconst ButtonContentsWrapper = styled.div`\n  display: flex;\n  flex-flow: column;\n`;\n\nconst ElectionName = styled.div`\n`;\n\nconst ElectionDate = styled.div`\n  font-size: 12px;\n  font-weight: 100;\n  @media (min-width: ${({ theme }) => theme.breakpoints.md}) {\n    font-size: 12px;\n  }\n`;\n"]}*/