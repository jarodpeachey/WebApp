.c1x5a1x7{position:absolute;top:8px;right:8px;width:15px;height:15px;color:white;}.c1x5a1x7 *{width:100%;}
/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkQ6XFxKYXJvZFxcV2VWb3RlXFxXZWJBcHBcXHNyY1xcanNcXGNvbXBvbmVudHNcXEJhbGxvdFxcU3RpY2t5UG9wb3Zlci5qc3giXSwibmFtZXMiOlsiLmMxeDVhMXg3Il0sIm1hcHBpbmdzIjoiQUE4R01BIiwiZmlsZSI6IkQ6XFxKYXJvZFxcV2VWb3RlXFxXZWJBcHBcXHNyY1xcanNcXGNvbXBvbmVudHNcXEJhbGxvdFxcU3RpY2t5UG9wb3Zlci5qc3giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgT3ZlcmxheSwgUG9wb3ZlciB9IGZyb20gJ3JlYWN0LWJvb3RzdHJhcCc7XG5pbXBvcnQgeyBzdHlsZWQgfSBmcm9tICdsaW5hcmlhL3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyByZW5kZXJMb2cgfSBmcm9tICcuLi8uLi91dGlscy9sb2dnaW5nJztcblxuY2xhc3MgU3RpY2t5UG9wb3ZlciBleHRlbmRzIENvbXBvbmVudCB7XG4gIHN0YXRpYyBwcm9wVHlwZXMgPSB7XG4gICAgZGVsYXk6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgICBzaG93OiBQcm9wVHlwZXMubnVtYmVyLFxuICAgICAgaGlkZTogUHJvcFR5cGVzLm51bWJlcixcbiAgICB9KSxcbiAgICBjaGlsZHJlbjogUHJvcFR5cGVzLmVsZW1lbnQuaXNSZXF1aXJlZCxcbiAgICBwb3BvdmVyQ29tcG9uZW50OiBQcm9wVHlwZXMubm9kZS5pc1JlcXVpcmVkLFxuICAgIHBsYWNlbWVudDogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBwb3BvdmVySWQ6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgc2hvd0Nsb3NlSWNvbjogUHJvcFR5cGVzLmJvb2wsXG4gICAgb3Blbk9uQ2xpY2s6IFByb3BUeXBlcy5ib29sLFxuICB9O1xuXG4gIGNvbnN0cnVjdG9yIChwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICB0aGlzLnN0YXRlID0geyBzaG93UG9wb3ZlcjogZmFsc2UgfTtcbiAgICB0aGlzLmF0dGFjaFJlZiA9IHRhcmdldCA9PiB0aGlzLnNldFN0YXRlKHsgdGFyZ2V0IH0pO1xuICAgIHRoaXMub25DbGlja1RhcmdldCA9IHRoaXMub25DbGlja1RhcmdldC5iaW5kKHRoaXMpO1xuICAgIHRoaXMub25Nb3VzZUVudGVyVGFyZ2V0ID0gdGhpcy5vbk1vdXNlRW50ZXJUYXJnZXQuYmluZCh0aGlzKTtcbiAgICB0aGlzLm9uTW91c2VFbnRlclBvcG92ZXIgPSB0aGlzLm9uTW91c2VFbnRlclBvcG92ZXIuYmluZCh0aGlzKTtcbiAgICB0aGlzLm9uTW91c2VMZWF2ZSA9IHRoaXMub25Nb3VzZUxlYXZlLmJpbmQodGhpcyk7XG4gICAgdGhpcy5jbG9zZVBvcG92ZXIgPSB0aGlzLmNsb3NlUG9wb3Zlci5iaW5kKHRoaXMpO1xuICB9XG5cbiAgY29tcG9uZW50V2lsbFVubW91bnQgKCkge1xuICAgIGNsZWFyVGltZW91dCh0aGlzLmVudGVyVGltZW91dElkKTtcbiAgICBjbGVhclRpbWVvdXQodGhpcy5sZWF2ZVRpbWVvdXRJZCk7XG4gIH1cblxuICBvbk1vdXNlRW50ZXJUYXJnZXQgKCkge1xuICAgIGNvbnN0IHsgZGVsYXkgfSA9IHRoaXMucHJvcHM7XG4gICAgdGhpcy5lbnRlclRpbWVvdXRJZCA9IHNldFRpbWVvdXQoKCkgPT4gdGhpcy5zZXRTdGF0ZSh7IHNob3dQb3BvdmVyOiB0cnVlIH0pLCBkZWxheS5zaG93KTtcbiAgfVxuXG4gIG9uQ2xpY2tUYXJnZXQgKCkge1xuICAgIGNvbnN0IGN1cnJlbnRTdGF0ZSA9IHRoaXMuc3RhdGUuc2hvd1BvcG92ZXI7XG4gICAgdGhpcy5zZXRTdGF0ZSh7IHNob3dQb3BvdmVyOiAhY3VycmVudFN0YXRlIH0pO1xuICB9XG5cbiAgb25Nb3VzZUVudGVyUG9wb3ZlciAoKSB7XG4gICAgaWYgKHRoaXMubGVhdmVUaW1lb3V0SWQpIHtcbiAgICAgIGNsZWFyVGltZW91dCh0aGlzLmxlYXZlVGltZW91dElkKTtcbiAgICB9XG4gICAgdGhpcy5zZXRTdGF0ZSh7IHNob3dQb3BvdmVyOiB0cnVlIH0pO1xuICB9XG5cbiAgb25Nb3VzZUxlYXZlICgpIHtcbiAgICBjb25zdCB7IGRlbGF5IH0gPSB0aGlzLnByb3BzO1xuICAgIGlmICh0aGlzLmVudGVyVGltZW91dElkKSB7XG4gICAgICBjbGVhclRpbWVvdXQodGhpcy5lbnRlclRpbWVvdXRJZCk7XG4gICAgfVxuICAgIHRoaXMubGVhdmVUaW1lb3V0SWQgPSBzZXRUaW1lb3V0KCgpID0+IHRoaXMuc2V0U3RhdGUoeyBzaG93UG9wb3ZlcjogZmFsc2UgfSksIGRlbGF5LmhpZGUpO1xuICB9XG5cbiAgY2xvc2VQb3BvdmVyICgpIHtcbiAgICB0aGlzLnNldFN0YXRlKHsgc2hvd1BvcG92ZXI6IGZhbHNlIH0pO1xuICB9XG5cbiAgcmVuZGVyICgpIHtcbiAgICByZW5kZXJMb2coJ1N0aWNreVBvcG92ZXInKTsgIC8vIFNldCBMT0dfUkVOREVSX0VWRU5UUyB0byBsb2cgYWxsIHJlbmRlcnNcbiAgICBjb25zdCB7IHBvcG92ZXJDb21wb25lbnQsIGNoaWxkcmVuLCBwbGFjZW1lbnQsIHBvcG92ZXJJZCB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCB7IHNob3dQb3BvdmVyLCB0YXJnZXQgfSA9IHRoaXMuc3RhdGU7XG4gICAgcmV0dXJuIChcbiAgICAgIDxSZWFjdC5GcmFnbWVudD5cbiAgICAgICAge3RoaXMucHJvcHMub3Blbk9uQ2xpY2sgPyAoXG4gICAgICAgICAgUmVhY3QuQ2hpbGRyZW4ubWFwKGNoaWxkcmVuLCBjaGlsZCA9PiBSZWFjdC5jbG9uZUVsZW1lbnQoY2hpbGQsIHtcbiAgICAgICAgICAgIHJlZjogdGhpcy5hdHRhY2hSZWYsXG4gICAgICAgICAgICBvbk1vdXNlRW50ZXI6IHRoaXMub25Nb3VzZUVudGVyVGFyZ2V0LFxuICAgICAgICAgICAgb25Nb3VzZUxlYXZlOiB0aGlzLm9uTW91c2VMZWF2ZSxcbiAgICAgICAgICAgIG9uQ2xpY2s6IHRoaXMub25DbGlja1RhcmdldCxcbiAgICAgICAgICB9KSlcbiAgICAgICAgKSA6IChcbiAgICAgICAgICBSZWFjdC5DaGlsZHJlbi5tYXAoY2hpbGRyZW4sIGNoaWxkID0+IFJlYWN0LmNsb25lRWxlbWVudChjaGlsZCwge1xuICAgICAgICAgICAgcmVmOiB0aGlzLmF0dGFjaFJlZixcbiAgICAgICAgICAgIG9uTW91c2VFbnRlcjogdGhpcy5vbk1vdXNlRW50ZXJUYXJnZXQsXG4gICAgICAgICAgICBvbk1vdXNlTGVhdmU6IHRoaXMub25Nb3VzZUxlYXZlLFxuICAgICAgICAgIH0pKVxuICAgICAgICApfVxuICAgICAgICA8T3ZlcmxheVxuICAgICAgICAgIHNob3c9e3Nob3dQb3BvdmVyfVxuICAgICAgICAgIHRhcmdldD17dGFyZ2V0fVxuICAgICAgICAgIHBsYWNlbWVudD17cGxhY2VtZW50fVxuICAgICAgICAgIGNsYXNzTmFtZT1cInUtcG9zaXRpb24tcmVsYXRpdmVcIlxuICAgICAgICA+XG4gICAgICAgICAgPFBvcG92ZXJcbiAgICAgICAgICAgIG9uTW91c2VFbnRlcj17dGhpcy5vbk1vdXNlRW50ZXJQb3BvdmVyfVxuICAgICAgICAgICAgb25Nb3VzZUxlYXZlPXt0aGlzLm9uTW91c2VMZWF2ZX1cbiAgICAgICAgICAgIGlkPXtwb3BvdmVySWR9XG4gICAgICAgICAgPlxuICAgICAgICAgICAge3BvcG92ZXJDb21wb25lbnR9XG4gICAgICAgICAgICB7dGhpcy5wcm9wcy5zaG93Q2xvc2VJY29uICYmIChcbiAgICAgICAgICAgICAgPENsb3NlSWNvbj5cbiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJmYXMgZmEtdGltZXMgdS1jdXJzb3ItLXBvaW50ZXJcIiBhcmlhLWhpZGRlbj1cInRydWVcIiBvbkNsaWNrPXt0aGlzLmNsb3NlUG9wb3Zlcn0gLz5cbiAgICAgICAgICAgICAgPC9DbG9zZUljb24+XG4gICAgICAgICAgICApfVxuICAgICAgICAgIDwvUG9wb3Zlcj5cbiAgICAgICAgPC9PdmVybGF5PlxuXG4gICAgICA8L1JlYWN0LkZyYWdtZW50PlxuICAgICk7XG4gIH1cbn1cblxuY29uc3QgQ2xvc2VJY29uID0gc3R5bGVkLmRpdmBcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICB0b3A6IDhweDtcbiAgcmlnaHQ6IDhweDtcbiAgd2lkdGg6IDE1cHg7XG4gIGhlaWdodDogMTVweDtcbiAgKiB7XG4gICAgd2lkdGg6IDEwMCU7XG4gIH1cbiAgY29sb3I6IHdoaXRlO1xuYDtcblxuZXhwb3J0IGRlZmF1bHQgU3RpY2t5UG9wb3ZlcjtcbiJdfQ==*/