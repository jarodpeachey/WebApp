.b1baolmg{cursor:pointer;}
.c1eyr82e{-webkit-var(--c1eyr82e-0) display:flex;-moz-var(--c1eyr82e-0) display:flex;-ms-var(--c1eyr82e-0) display:flex;var(--c1eyr82e-0) display:flex;-webkit-flex-flow:row wrap;-ms-flex-flow:row wrap;flex-flow:row wrap;}


.c1204ajh{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-flow:row wrap;-ms-flex-flow:row wrap;flex-flow:row wrap;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;width:100%;}@media (max-width:var(--c1204ajh-0)){.c1204ajh{width:100%;}}


/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkQ6XFxKYXJvZFxcV2VWb3RlXFxXZWJBcHBcXHNyY1xcanNcXGNvbXBvbmVudHNcXEJhbGxvdFxcQ2FuZGlkYXRlSXRlbS5qc3giXSwibmFtZXMiOlsiLmIxYmFvbG1nIiwiLmMxZXlyODJlIiwiLmNxMmgxNTEiLCIuYzFmeWttb2giLCIuYzEyMDRhamgiLCIuZDF1eXcwc3oiLCIubTE1MjQ5MDYiXSwibWFwcGluZ3MiOiJBQWdoQk1BO0FBSUFDO0FBTUFDO0FBR0FDO0FBR0FDO0FBVUFDO0FBR0FDIiwiZmlsZSI6IkQ6XFxKYXJvZFxcV2VWb3RlXFxXZWJBcHBcXHNyY1xcanNcXGNvbXBvbmVudHNcXEJhbGxvdFxcQ2FuZGlkYXRlSXRlbS5qc3giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IExpbmsgfSBmcm9tICdyZWFjdC1yb3V0ZXInO1xuaW1wb3J0IFRleHRUcnVuY2F0ZSBmcm9tICdyZWFjdC10ZXh0LXRydW5jYXRlJztcbmltcG9ydCB7IHN0eWxlZCB9IGZyb20gJ2xpbmFyaWEvcmVhY3QnO1xuaW1wb3J0IEJhbGxvdEl0ZW1TdXBwb3J0T3Bwb3NlQ29tbWVudCBmcm9tICcuLi9XaWRnZXRzL0JhbGxvdEl0ZW1TdXBwb3J0T3Bwb3NlQ29tbWVudCc7XG5pbXBvcnQgQmFsbG90SXRlbVN1cHBvcnRPcHBvc2VDb3VudERpc3BsYXkgZnJvbSAnLi4vV2lkZ2V0cy9CYWxsb3RJdGVtU3VwcG9ydE9wcG9zZUNvdW50RGlzcGxheSc7XG5pbXBvcnQgQ2FuZGlkYXRlU3RvcmUgZnJvbSAnLi4vLi4vc3RvcmVzL0NhbmRpZGF0ZVN0b3JlJztcbmltcG9ydCB7IGhpc3RvcnlQdXNoIH0gZnJvbSAnLi4vLi4vdXRpbHMvY29yZG92YVV0aWxzJztcbmltcG9ydCBJbWFnZUhhbmRsZXIgZnJvbSAnLi4vSW1hZ2VIYW5kbGVyJztcbmltcG9ydCBJc3N1ZXNCeUJhbGxvdEl0ZW1EaXNwbGF5TGlzdCBmcm9tICcuLi9WYWx1ZXMvSXNzdWVzQnlCYWxsb3RJdGVtRGlzcGxheUxpc3QnO1xuaW1wb3J0IElzc3VlU3RvcmUgZnJvbSAnLi4vLi4vc3RvcmVzL0lzc3VlU3RvcmUnO1xuaW1wb3J0IEl0ZW1BY3Rpb25CYXIgZnJvbSAnLi4vV2lkZ2V0cy9JdGVtQWN0aW9uQmFyJztcbmltcG9ydCB7IHJlbmRlckxvZyB9IGZyb20gJy4uLy4uL3V0aWxzL2xvZ2dpbmcnO1xuaW1wb3J0IE9mZmljZU5hbWVUZXh0IGZyb20gJy4uL1dpZGdldHMvT2ZmaWNlTmFtZVRleHQnO1xuaW1wb3J0IFJlYWRNb3JlIGZyb20gJy4uL1dpZGdldHMvUmVhZE1vcmUnO1xuaW1wb3J0IFNob3dNb3JlRm9vdGVyIGZyb20gJy4uL05hdmlnYXRpb24vU2hvd01vcmVGb290ZXInO1xuaW1wb3J0IFN1cHBvcnRTdG9yZSBmcm9tICcuLi8uLi9zdG9yZXMvU3VwcG9ydFN0b3JlJztcbmltcG9ydCBUb3BDb21tZW50QnlCYWxsb3RJdGVtIGZyb20gJy4uL1dpZGdldHMvVG9wQ29tbWVudEJ5QmFsbG90SXRlbSc7XG5pbXBvcnQgVm90ZXJHdWlkZVN0b3JlIGZyb20gJy4uLy4uL3N0b3Jlcy9Wb3Rlckd1aWRlU3RvcmUnO1xuaW1wb3J0IHsgYWJicmV2aWF0ZU51bWJlciwgbnVtYmVyV2l0aENvbW1hcyB9IGZyb20gJy4uLy4uL3V0aWxzL3RleHRGb3JtYXQnO1xuXG4vLyBUaGlzIGlzIHJlbGF0ZWQgdG8gL2pzL2NvbXBvbmVudHMvVm90ZXJHdWlkZS9Pcmdhbml6YXRpb25Wb3Rlckd1aWRlQ2FuZGlkYXRlSXRlbS5qc3hcbmNsYXNzIENhbmRpZGF0ZUl0ZW0gZXh0ZW5kcyBDb21wb25lbnQge1xuICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgIGNhbmRpZGF0ZVdlVm90ZUlkOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gICAgaGlkZUJhbGxvdEl0ZW1TdXBwb3J0T3Bwb3NlQ29tbWVudDogUHJvcFR5cGVzLmJvb2wsXG4gICAgaGlkZVNob3dNb3JlRm9vdGVyOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBsaW5rVG9CYWxsb3RJdGVtUGFnZTogUHJvcFR5cGVzLmJvb2wsXG4gICAgbGlua1RvT2ZmaWNlUGFnZTogUHJvcFR5cGVzLmJvb2wsXG4gICAgb3JnYW5pemF0aW9uV2VWb3RlSWQ6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgc2hvd0hvdmVyOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBzaG93T2ZmaWNlTmFtZTogUHJvcFR5cGVzLmJvb2wsXG4gICAgc2hvd0xhcmdlSW1hZ2U6IFByb3BUeXBlcy5ib29sLFxuICAgIHNob3dQb3NpdGlvblN0YXRlbWVudEFjdGlvbkJhcjogUHJvcFR5cGVzLmJvb2wsXG4gICAgc2hvd1RvcENvbW1lbnRCeUJhbGxvdEl0ZW06IFByb3BUeXBlcy5ib29sLFxuICB9O1xuXG4gIGNvbnN0cnVjdG9yIChwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgYWxsQ2FjaGVkUG9zaXRpb25zRm9yVGhpc0NhbmRpZGF0ZUxlbmd0aDogMCxcbiAgICAgIGJhbGxvdEl0ZW1EaXNwbGF5TmFtZTogJycsXG4gICAgICAvLyBiYWxsb3RwZWRpYUNhbmRpZGF0ZVVybDogJycsXG4gICAgICBjYW5kaWRhdGVQaG90b1VybDogJycsXG4gICAgICBjb250ZXN0T2ZmaWNlTmFtZTogJycsXG4gICAgICBpc3N1ZXNVbmRlclRoaXNCYWxsb3RJdGVtVm90ZXJJc0ZvbGxvd2luZ0xlbmd0aDogMCxcbiAgICAgIGlzc3Vlc1VuZGVyVGhpc0JhbGxvdEl0ZW1Wb3RlcklzTm90Rm9sbG93aW5nTGVuZ3RoOiAwLFxuICAgICAgbGFyZ2VBcmVhSG92ZXJDb2xvck9uTm93OiBudWxsLFxuICAgICAgbGFyZ2VBcmVhSG92ZXJMaW5rT25Ob3c6IGZhbHNlLFxuICAgICAgb2ZmaWNlV2VWb3RlSWQ6ICcnLFxuICAgICAgcG9saXRpY2FsUGFydHk6ICcnLFxuICAgICAgdHdpdHRlckZvbGxvd2Vyc0NvdW50OiAnJyxcbiAgICB9O1xuICAgIHRoaXMuZ2V0Q2FuZGlkYXRlTGluayA9IHRoaXMuZ2V0Q2FuZGlkYXRlTGluay5iaW5kKHRoaXMpO1xuICAgIHRoaXMuZ2V0T2ZmaWNlTGluayA9IHRoaXMuZ2V0T2ZmaWNlTGluay5iaW5kKHRoaXMpO1xuICAgIHRoaXMuZ29Ub0NhbmRpZGF0ZUxpbmsgPSB0aGlzLmdvVG9DYW5kaWRhdGVMaW5rLmJpbmQodGhpcyk7XG4gICAgdGhpcy5nb1RvT2ZmaWNlTGluayA9IHRoaXMuZ29Ub09mZmljZUxpbmsuYmluZCh0aGlzKTtcbiAgfVxuXG4gIGNvbXBvbmVudERpZE1vdW50ICgpIHtcbiAgICAvLyBjb25zb2xlLmxvZygnQ2FuZGlkYXRlSXRlbSBjb21wb25lbnREaWRNb3VudCcpO1xuICAgIHRoaXMuY2FuZGlkYXRlU3RvcmVMaXN0ZW5lciA9IENhbmRpZGF0ZVN0b3JlLmFkZExpc3RlbmVyKHRoaXMub25DYW5kaWRhdGVTdG9yZUNoYW5nZS5iaW5kKHRoaXMpKTtcbiAgICB0aGlzLm9uVm90ZXJHdWlkZVN0b3JlQ2hhbmdlKCk7XG4gICAgdGhpcy5pc3N1ZVN0b3JlTGlzdGVuZXIgPSBJc3N1ZVN0b3JlLmFkZExpc3RlbmVyKHRoaXMub25Jc3N1ZVN0b3JlQ2hhbmdlLmJpbmQodGhpcykpO1xuICAgIHRoaXMudm90ZXJHdWlkZVN0b3JlTGlzdGVuZXIgPSBWb3Rlckd1aWRlU3RvcmUuYWRkTGlzdGVuZXIodGhpcy5vblZvdGVyR3VpZGVTdG9yZUNoYW5nZS5iaW5kKHRoaXMpKTtcbiAgICB0aGlzLnN1cHBvcnRTdG9yZUxpc3RlbmVyID0gU3VwcG9ydFN0b3JlLmFkZExpc3RlbmVyKHRoaXMub25TdXBwb3J0U3RvcmVDaGFuZ2UuYmluZCh0aGlzKSk7XG4gICAgLy8gY29uc29sZS5sb2coJ0NhbmRpZGF0ZUl0ZW0sIHRoaXMucHJvcHM6JywgdGhpcy5wcm9wcyk7XG4gICAgY29uc3QgeyBjYW5kaWRhdGVXZVZvdGVJZCwgc2hvd0xhcmdlSW1hZ2UgfSA9IHRoaXMucHJvcHM7XG4gICAgaWYgKGNhbmRpZGF0ZVdlVm90ZUlkKSB7XG4gICAgICAvLyBJZiBoZXJlIHdlIHdhbnQgdG8gZ2V0IHRoZSBjYW5kaWRhdGUgc28gd2UgY2FuIGdldCB0aGUgb2ZmaWNlV2VWb3RlSWRcbiAgICAgIGNvbnN0IGNhbmRpZGF0ZSA9IENhbmRpZGF0ZVN0b3JlLmdldENhbmRpZGF0ZShjYW5kaWRhdGVXZVZvdGVJZCk7XG4gICAgICAvLyBjb25zb2xlLmxvZygnQ2FuZGlkYXRlSXRlbSwgY29tcG9uZW50RGlkTW91bnQsIGNhbmRpZGF0ZTonLCBjYW5kaWRhdGUpO1xuXG4gICAgICBsZXQgY2FuZGlkYXRlUGhvdG9Vcmw7XG4gICAgICBpZiAoc2hvd0xhcmdlSW1hZ2UgJiYgY2FuZGlkYXRlLmNhbmRpZGF0ZV9waG90b191cmxfbGFyZ2UpIHtcbiAgICAgICAgY2FuZGlkYXRlUGhvdG9VcmwgPSBjYW5kaWRhdGUuY2FuZGlkYXRlX3Bob3RvX3VybF9sYXJnZTtcbiAgICAgIH0gZWxzZSBpZiAoY2FuZGlkYXRlLmNhbmRpZGF0ZV9waG90b191cmxfbWVkaXVtKSB7XG4gICAgICAgIGNhbmRpZGF0ZVBob3RvVXJsID0gY2FuZGlkYXRlLmNhbmRpZGF0ZV9waG90b191cmxfbWVkaXVtO1xuICAgICAgfSBlbHNlIGlmIChjYW5kaWRhdGUuY2FuZGlkYXRlX3Bob3RvX3VybF90aW55KSB7XG4gICAgICAgIGNhbmRpZGF0ZVBob3RvVXJsID0gY2FuZGlkYXRlLmNhbmRpZGF0ZV9waG90b191cmxfdGlueTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHR3aXR0ZXJEZXNjcmlwdGlvbiA9IGNhbmRpZGF0ZS50d2l0dGVyX2Rlc2NyaXB0aW9uO1xuICAgICAgY29uc3QgdHdpdHRlckRlc2NyaXB0aW9uVGV4dCA9IHR3aXR0ZXJEZXNjcmlwdGlvbiAmJiB0d2l0dGVyRGVzY3JpcHRpb24ubGVuZ3RoID8gYCR7dHdpdHRlckRlc2NyaXB0aW9ufSBgIDogJyc7XG4gICAgICBjb25zdCBiYWxsb3RwZWRpYUNhbmRpZGF0ZVN1bW1hcnkgPSBjYW5kaWRhdGUuYmFsbG90cGVkaWFfY2FuZGlkYXRlX3N1bW1hcnk7XG4gICAgICBsZXQgYmFsbG90cGVkaWFDYW5kaWRhdGVTdW1tYXJ5VGV4dCA9IGJhbGxvdHBlZGlhQ2FuZGlkYXRlU3VtbWFyeSAmJiBiYWxsb3RwZWRpYUNhbmRpZGF0ZVN1bW1hcnkubGVuZ3RoID8gYmFsbG90cGVkaWFDYW5kaWRhdGVTdW1tYXJ5IDogJyc7XG4gICAgICBiYWxsb3RwZWRpYUNhbmRpZGF0ZVN1bW1hcnlUZXh0ID0gYmFsbG90cGVkaWFDYW5kaWRhdGVTdW1tYXJ5VGV4dC5zcGxpdCgvPFtePD5dKj4vKS5qb2luKCcnKTsgLy8gU3RyaXAgYXdheSBhbnkgSFRNTCB0YWdzXG4gICAgICBjb25zdCBjYW5kaWRhdGVUZXh0ID0gdHdpdHRlckRlc2NyaXB0aW9uVGV4dCArIGJhbGxvdHBlZGlhQ2FuZGlkYXRlU3VtbWFyeVRleHQ7XG4gICAgICBjb25zdCB2b3Rlck9wcG9zZXNCYWxsb3RJdGVtID0gU3VwcG9ydFN0b3JlLmdldFZvdGVyT3Bwb3Nlc0J5QmFsbG90SXRlbVdlVm90ZUlkKGNhbmRpZGF0ZVdlVm90ZUlkKTtcbiAgICAgIGNvbnN0IHZvdGVyU3VwcG9ydHNCYWxsb3RJdGVtID0gU3VwcG9ydFN0b3JlLmdldFZvdGVyU3VwcG9ydHNCeUJhbGxvdEl0ZW1XZVZvdGVJZChjYW5kaWRhdGVXZVZvdGVJZCk7XG4gICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgYmFsbG90SXRlbURpc3BsYXlOYW1lOiBjYW5kaWRhdGUuYmFsbG90X2l0ZW1fZGlzcGxheV9uYW1lLFxuICAgICAgICAvLyBiYWxsb3RwZWRpYUNhbmRpZGF0ZVVybDogY2FuZGlkYXRlLmJhbGxvdHBlZGlhX2NhbmRpZGF0ZV91cmwsXG4gICAgICAgIGNhbmRpZGF0ZVBob3RvVXJsLFxuICAgICAgICBjYW5kaWRhdGVUZXh0LFxuICAgICAgICBjb250ZXN0T2ZmaWNlTmFtZTogY2FuZGlkYXRlLmNvbnRlc3Rfb2ZmaWNlX25hbWUsXG4gICAgICAgIG9mZmljZVdlVm90ZUlkOiBjYW5kaWRhdGUuY29udGVzdF9vZmZpY2Vfd2Vfdm90ZV9pZCxcbiAgICAgICAgcG9saXRpY2FsUGFydHk6IGNhbmRpZGF0ZS5wYXJ0eSxcbiAgICAgICAgdHdpdHRlckZvbGxvd2Vyc0NvdW50OiBjYW5kaWRhdGUudHdpdHRlcl9mb2xsb3dlcnNfY291bnQsXG4gICAgICAgIHZvdGVyT3Bwb3Nlc0JhbGxvdEl0ZW0sXG4gICAgICAgIHZvdGVyU3VwcG9ydHNCYWxsb3RJdGVtLFxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgc2hvdWxkQ29tcG9uZW50VXBkYXRlIChuZXh0UHJvcHMsIG5leHRTdGF0ZSkge1xuICAgIGlmICh0aGlzLnN0YXRlLmFsbENhY2hlZFBvc2l0aW9uc0ZvclRoaXNDYW5kaWRhdGVMZW5ndGggIT09IG5leHRTdGF0ZS5hbGxDYWNoZWRQb3NpdGlvbnNGb3JUaGlzQ2FuZGlkYXRlTGVuZ3RoKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKHRoaXMuc3RhdGUuYmFsbG90SXRlbURpc3BsYXlOYW1lICE9PSBuZXh0U3RhdGUuYmFsbG90SXRlbURpc3BsYXlOYW1lKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKHRoaXMuc3RhdGUuYmFsbG90SXRlbVdlVm90ZUlkICE9PSBuZXh0U3RhdGUuYmFsbG90SXRlbVdlVm90ZUlkKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKHRoaXMuc3RhdGUuY2FuZGlkYXRlUGhvdG9VcmwgIT09IG5leHRTdGF0ZS5jYW5kaWRhdGVQaG90b1VybCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGlmICh0aGlzLnN0YXRlLmNhbmRpZGF0ZVRleHQgIT09IG5leHRTdGF0ZS5jYW5kaWRhdGVUZXh0KSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKHRoaXMucHJvcHMuY2FuZGlkYXRlV2VWb3RlSWQgIT09IG5leHRQcm9wcy5jYW5kaWRhdGVXZVZvdGVJZCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGlmICh0aGlzLnN0YXRlLmlzc3Vlc1VuZGVyVGhpc0JhbGxvdEl0ZW1Wb3RlcklzRm9sbG93aW5nTGVuZ3RoICE9PSBuZXh0U3RhdGUuaXNzdWVzVW5kZXJUaGlzQmFsbG90SXRlbVZvdGVySXNGb2xsb3dpbmdMZW5ndGgpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBpZiAodGhpcy5zdGF0ZS5pc3N1ZXNVbmRlclRoaXNCYWxsb3RJdGVtVm90ZXJJc05vdEZvbGxvd2luZ0xlbmd0aCAhPT0gbmV4dFN0YXRlLmlzc3Vlc1VuZGVyVGhpc0JhbGxvdEl0ZW1Wb3RlcklzTm90Rm9sbG93aW5nTGVuZ3RoKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKHRoaXMuc3RhdGUubGFyZ2VBcmVhSG92ZXJDb2xvck9uTm93ICE9PSBuZXh0U3RhdGUubGFyZ2VBcmVhSG92ZXJDb2xvck9uTm93KSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKHRoaXMucHJvcHMub3JnYW5pemF0aW9uV2VWb3RlSWQgIT09IG5leHRQcm9wcy5vcmdhbml6YXRpb25XZVZvdGVJZCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGlmICh0aGlzLnByb3BzLnNob3dQb3NpdGlvblN0YXRlbWVudEFjdGlvbkJhciAhPT0gbmV4dFByb3BzLnNob3dQb3NpdGlvblN0YXRlbWVudEFjdGlvbkJhcikge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGlmICh0aGlzLnN0YXRlLnZvdGVyT3Bwb3Nlc0JhbGxvdEl0ZW0gIT09IG5leHRTdGF0ZS52b3Rlck9wcG9zZXNCYWxsb3RJdGVtKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKHRoaXMuc3RhdGUudm90ZXJTdXBwb3J0c0JhbGxvdEl0ZW0gIT09IG5leHRTdGF0ZS52b3RlclN1cHBvcnRzQmFsbG90SXRlbSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGNvbXBvbmVudFdpbGxVbm1vdW50ICgpIHtcbiAgICB0aGlzLmNhbmRpZGF0ZVN0b3JlTGlzdGVuZXIucmVtb3ZlKCk7XG4gICAgdGhpcy5pc3N1ZVN0b3JlTGlzdGVuZXIucmVtb3ZlKCk7XG4gICAgdGhpcy52b3Rlckd1aWRlU3RvcmVMaXN0ZW5lci5yZW1vdmUoKTtcbiAgICB0aGlzLnN1cHBvcnRTdG9yZUxpc3RlbmVyLnJlbW92ZSgpO1xuICB9XG5cbiAgb25DYW5kaWRhdGVTdG9yZUNoYW5nZSAoKSB7XG4gICAgY29uc3QgeyBjYW5kaWRhdGVXZVZvdGVJZCB9ID0gdGhpcy5wcm9wcztcbiAgICAvLyBjb25zb2xlLmxvZygnQ2FuZGlkYXRlSXRlbSBvbkNhbmRpZGF0ZVN0b3JlQ2hhbmdlLCBjYW5kaWRhdGVXZVZvdGVJZDonLCBjYW5kaWRhdGVXZVZvdGVJZCk7XG4gICAgaWYgKGNhbmRpZGF0ZVdlVm90ZUlkKSB7XG4gICAgICBjb25zdCBjYW5kaWRhdGUgPSBDYW5kaWRhdGVTdG9yZS5nZXRDYW5kaWRhdGUoY2FuZGlkYXRlV2VWb3RlSWQpO1xuICAgICAgbGV0IGNhbmRpZGF0ZVBob3RvVXJsO1xuICAgICAgaWYgKHRoaXMucHJvcHMuc2hvd0xhcmdlSW1hZ2UgJiYgY2FuZGlkYXRlLmNhbmRpZGF0ZV9waG90b191cmxfbGFyZ2UpIHtcbiAgICAgICAgY2FuZGlkYXRlUGhvdG9VcmwgPSBjYW5kaWRhdGUuY2FuZGlkYXRlX3Bob3RvX3VybF9sYXJnZTtcbiAgICAgIH0gZWxzZSBpZiAoY2FuZGlkYXRlLmNhbmRpZGF0ZV9waG90b191cmxfbWVkaXVtKSB7XG4gICAgICAgIGNhbmRpZGF0ZVBob3RvVXJsID0gY2FuZGlkYXRlLmNhbmRpZGF0ZV9waG90b191cmxfbWVkaXVtO1xuICAgICAgfSBlbHNlIGlmIChjYW5kaWRhdGUuY2FuZGlkYXRlX3Bob3RvX3VybF90aW55KSB7XG4gICAgICAgIGNhbmRpZGF0ZVBob3RvVXJsID0gY2FuZGlkYXRlLmNhbmRpZGF0ZV9waG90b191cmxfdGlueTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHR3aXR0ZXJEZXNjcmlwdGlvbiA9IGNhbmRpZGF0ZS50d2l0dGVyX2Rlc2NyaXB0aW9uO1xuICAgICAgY29uc3QgdHdpdHRlckRlc2NyaXB0aW9uVGV4dCA9IHR3aXR0ZXJEZXNjcmlwdGlvbiAmJiB0d2l0dGVyRGVzY3JpcHRpb24ubGVuZ3RoID8gYCR7dHdpdHRlckRlc2NyaXB0aW9ufSBgIDogJyc7XG4gICAgICBjb25zdCBiYWxsb3RwZWRpYUNhbmRpZGF0ZVN1bW1hcnkgPSBjYW5kaWRhdGUuYmFsbG90cGVkaWFfY2FuZGlkYXRlX3N1bW1hcnk7XG4gICAgICBsZXQgYmFsbG90cGVkaWFDYW5kaWRhdGVTdW1tYXJ5VGV4dCA9IGJhbGxvdHBlZGlhQ2FuZGlkYXRlU3VtbWFyeSAmJiBiYWxsb3RwZWRpYUNhbmRpZGF0ZVN1bW1hcnkubGVuZ3RoID8gYmFsbG90cGVkaWFDYW5kaWRhdGVTdW1tYXJ5IDogJyc7XG4gICAgICBiYWxsb3RwZWRpYUNhbmRpZGF0ZVN1bW1hcnlUZXh0ID0gYmFsbG90cGVkaWFDYW5kaWRhdGVTdW1tYXJ5VGV4dC5zcGxpdCgvPFtePD5dKj4vKS5qb2luKCcnKTsgLy8gU3RyaXAgYXdheSBhbnkgSFRNTCB0YWdzXG4gICAgICBjb25zdCBjYW5kaWRhdGVUZXh0ID0gdHdpdHRlckRlc2NyaXB0aW9uVGV4dCArIGJhbGxvdHBlZGlhQ2FuZGlkYXRlU3VtbWFyeVRleHQ7XG4gICAgICBjb25zdCBhbGxDYWNoZWRQb3NpdGlvbnNGb3JUaGlzQ2FuZGlkYXRlID0gQ2FuZGlkYXRlU3RvcmUuZ2V0QWxsQ2FjaGVkUG9zaXRpb25zQnlDYW5kaWRhdGVXZVZvdGVJZChjYW5kaWRhdGVXZVZvdGVJZCk7XG4gICAgICBjb25zdCBhbGxDYWNoZWRQb3NpdGlvbnNGb3JUaGlzQ2FuZGlkYXRlTGVuZ3RoID0gYWxsQ2FjaGVkUG9zaXRpb25zRm9yVGhpc0NhbmRpZGF0ZS5sZW5ndGggfHwgMDtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICBhbGxDYWNoZWRQb3NpdGlvbnNGb3JUaGlzQ2FuZGlkYXRlTGVuZ3RoLFxuICAgICAgICBiYWxsb3RJdGVtRGlzcGxheU5hbWU6IGNhbmRpZGF0ZS5iYWxsb3RfaXRlbV9kaXNwbGF5X25hbWUsXG4gICAgICAgIC8vIGJhbGxvdHBlZGlhQ2FuZGlkYXRlVXJsOiBjYW5kaWRhdGUuYmFsbG90cGVkaWFfY2FuZGlkYXRlX3VybCxcbiAgICAgICAgY2FuZGlkYXRlUGhvdG9VcmwsXG4gICAgICAgIGNhbmRpZGF0ZVRleHQsXG4gICAgICAgIGNvbnRlc3RPZmZpY2VOYW1lOiBjYW5kaWRhdGUuY29udGVzdF9vZmZpY2VfbmFtZSxcbiAgICAgICAgb2ZmaWNlV2VWb3RlSWQ6IGNhbmRpZGF0ZS5jb250ZXN0X29mZmljZV93ZV92b3RlX2lkLFxuICAgICAgICBwb2xpdGljYWxQYXJ0eTogY2FuZGlkYXRlLnBhcnR5LFxuICAgICAgICB0d2l0dGVyRm9sbG93ZXJzQ291bnQ6IGNhbmRpZGF0ZS50d2l0dGVyX2ZvbGxvd2Vyc19jb3VudCxcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIG9uSXNzdWVTdG9yZUNoYW5nZSAoKSB7XG4gICAgY29uc3QgeyBjYW5kaWRhdGVXZVZvdGVJZCB9ID0gdGhpcy5wcm9wcztcbiAgICBpZiAoY2FuZGlkYXRlV2VWb3RlSWQpIHtcbiAgICAgIGNvbnN0IGlzc3Vlc1VuZGVyVGhpc0JhbGxvdEl0ZW1Wb3RlcklzRm9sbG93aW5nID0gSXNzdWVTdG9yZS5nZXRJc3N1ZXNVbmRlclRoaXNCYWxsb3RJdGVtVm90ZXJJc0ZvbGxvd2luZyhjYW5kaWRhdGVXZVZvdGVJZCkgfHwgW107XG4gICAgICBjb25zdCBpc3N1ZXNVbmRlclRoaXNCYWxsb3RJdGVtVm90ZXJJc05vdEZvbGxvd2luZyA9IElzc3VlU3RvcmUuZ2V0SXNzdWVzVW5kZXJUaGlzQmFsbG90SXRlbVZvdGVyTm90Rm9sbG93aW5nKGNhbmRpZGF0ZVdlVm90ZUlkKSB8fCBbXTtcbiAgICAgIGNvbnN0IGlzc3Vlc1VuZGVyVGhpc0JhbGxvdEl0ZW1Wb3RlcklzRm9sbG93aW5nTGVuZ3RoID0gaXNzdWVzVW5kZXJUaGlzQmFsbG90SXRlbVZvdGVySXNGb2xsb3dpbmcubGVuZ3RoO1xuICAgICAgY29uc3QgaXNzdWVzVW5kZXJUaGlzQmFsbG90SXRlbVZvdGVySXNOb3RGb2xsb3dpbmdMZW5ndGggPSBpc3N1ZXNVbmRlclRoaXNCYWxsb3RJdGVtVm90ZXJJc05vdEZvbGxvd2luZy5sZW5ndGg7XG4gICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgaXNzdWVzVW5kZXJUaGlzQmFsbG90SXRlbVZvdGVySXNGb2xsb3dpbmdMZW5ndGgsXG4gICAgICAgIGlzc3Vlc1VuZGVyVGhpc0JhbGxvdEl0ZW1Wb3RlcklzTm90Rm9sbG93aW5nTGVuZ3RoLFxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgb25Wb3Rlckd1aWRlU3RvcmVDaGFuZ2UgKCkge1xuICAgIC8vIFdlIGp1c3Qgd2FudCB0byB0cmlnZ2VyIGEgcmUtcmVuZGVyXG4gICAgdGhpcy5zZXRTdGF0ZSgpO1xuICB9XG5cbiAgb25TdXBwb3J0U3RvcmVDaGFuZ2UgKCkge1xuICAgIGNvbnN0IHsgY2FuZGlkYXRlV2VWb3RlSWQgfSA9IHRoaXMucHJvcHM7XG4gICAgaWYgKGNhbmRpZGF0ZVdlVm90ZUlkKSB7XG4gICAgICBjb25zdCB2b3Rlck9wcG9zZXNCYWxsb3RJdGVtID0gU3VwcG9ydFN0b3JlLmdldFZvdGVyT3Bwb3Nlc0J5QmFsbG90SXRlbVdlVm90ZUlkKGNhbmRpZGF0ZVdlVm90ZUlkKTtcbiAgICAgIGNvbnN0IHZvdGVyU3VwcG9ydHNCYWxsb3RJdGVtID0gU3VwcG9ydFN0b3JlLmdldFZvdGVyU3VwcG9ydHNCeUJhbGxvdEl0ZW1XZVZvdGVJZChjYW5kaWRhdGVXZVZvdGVJZCk7XG4gICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgdm90ZXJPcHBvc2VzQmFsbG90SXRlbSxcbiAgICAgICAgdm90ZXJTdXBwb3J0c0JhbGxvdEl0ZW0sXG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBnZXRDYW5kaWRhdGVMaW5rICgpIHtcbiAgICAvLyBJZiBoZXJlLCB3ZSBhc3N1bWUgdGhlIHZvdGVyIGlzIG9uIHRoZSBPZmZpY2UgcGFnZVxuICAgIGNvbnN0IHsgY2FuZGlkYXRlV2VWb3RlSWQsIG9yZ2FuaXphdGlvbldlVm90ZUlkIH0gPSB0aGlzLnByb3BzO1xuICAgIGlmIChjYW5kaWRhdGVXZVZvdGVJZCkge1xuICAgICAgaWYgKG9yZ2FuaXphdGlvbldlVm90ZUlkKSB7XG4gICAgICAgIHJldHVybiBgL2NhbmRpZGF0ZS8ke2NhbmRpZGF0ZVdlVm90ZUlkfS9idG8vJHtvcmdhbml6YXRpb25XZVZvdGVJZH1gOyAvLyBiYWNrLXRvLW9mZmljZVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGAvY2FuZGlkYXRlLyR7Y2FuZGlkYXRlV2VWb3RlSWR9L2IvYnRkby9gOyAvLyBiYWNrLXRvLWRlZmF1bHQtb2ZmaWNlXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiAnJztcbiAgfVxuXG4gIGdldE9mZmljZUxpbmsgKCkge1xuICAgIGNvbnN0IHsgb3JnYW5pemF0aW9uV2VWb3RlSWQgfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3QgeyBvZmZpY2VXZVZvdGVJZCB9ID0gdGhpcy5zdGF0ZTtcbiAgICBpZiAob3JnYW5pemF0aW9uV2VWb3RlSWQgJiYgb3JnYW5pemF0aW9uV2VWb3RlSWQgIT09ICcnKSB7XG4gICAgICByZXR1cm4gYC9vZmZpY2UvJHtvZmZpY2VXZVZvdGVJZH0vYnR2Zy8ke29yZ2FuaXphdGlvbldlVm90ZUlkfWA7IC8vIGJhY2stdG8tdm90ZXItZ3VpZGVcbiAgICB9IGVsc2UgaWYgKG9mZmljZVdlVm90ZUlkKSB7XG4gICAgICByZXR1cm4gYC9vZmZpY2UvJHtvZmZpY2VXZVZvdGVJZH0vYi9idGRiL2A7IC8vIGJhY2stdG8tZGVmYXVsdC1iYWxsb3RcbiAgICB9IGVsc2UgcmV0dXJuICcnO1xuICB9XG5cbiAgaGFuZGxlRW50ZXIgPSAoKSA9PiB7XG4gICAgLy8gY29uc29sZS5sb2coJ0hhbmRsZSBsYXJnZUFyZWFIb3ZlckNvbG9yT25Ob3cnLCBlLnRhcmdldCk7XG4gICAgaWYgKHRoaXMucHJvcHMuc2hvd0hvdmVyKSB7XG4gICAgICB0aGlzLnNldFN0YXRlKHsgbGFyZ2VBcmVhSG92ZXJDb2xvck9uTm93OiB0cnVlLCBsYXJnZUFyZWFIb3ZlckxpbmtPbk5vdzogdHJ1ZSB9KTtcbiAgICB9XG4gIH1cblxuICBoYW5kbGVMZWF2ZSA9ICgpID0+IHtcbiAgICAvLyBjb25zb2xlLmxvZygnSGFuZGxlIGxlYXZlJywgZS50YXJnZXQpO1xuICAgIGlmICh0aGlzLnByb3BzLnNob3dIb3Zlcikge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7IGxhcmdlQXJlYUhvdmVyQ29sb3JPbk5vdzogZmFsc2UsIGxhcmdlQXJlYUhvdmVyTGlua09uTm93OiBmYWxzZSB9KTtcbiAgICB9XG4gIH1cblxuICBjYW5kaWRhdGVSZW5kZXJCbG9jayA9IChjYW5kaWRhdGVXZVZvdGVJZCwgdXNlTGlua1RvQ2FuZGlkYXRlUGFnZSA9IGZhbHNlKSA9PiB7XG4gICAgY29uc3QgeyBsaW5rVG9CYWxsb3RJdGVtUGFnZSwgbGlua1RvT2ZmaWNlUGFnZSwgc2hvd0hvdmVyLCBzaG93T2ZmaWNlTmFtZSB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCB7XG4gICAgICBiYWxsb3RJdGVtRGlzcGxheU5hbWUsXG4gICAgICBwb2xpdGljYWxQYXJ0eSxcbiAgICAgIHR3aXR0ZXJGb2xsb3dlcnNDb3VudCxcbiAgICAgIGNvbnRlc3RPZmZpY2VOYW1lLFxuICAgICAgY2FuZGlkYXRlUGhvdG9VcmwsXG4gICAgICBsYXJnZUFyZWFIb3ZlckNvbG9yT25Ob3csXG4gICAgfSA9IHRoaXMuc3RhdGU7XG4gICAgLy8gY29uc29sZS5sb2coJ2NhbmRpZGF0ZVJlbmRlckJsb2NrIGNhbmRpZGF0ZVBob3RvVXJsOiAnLCBjYW5kaWRhdGVQaG90b1VybCk7XG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXY+XG4gICAgICAgIDxDYW5kaWRhdGVXcmFwcGVyIGNsYXNzTmFtZT1cImNhcmQtbWFpbl9fbWVkaWEtb2JqZWN0XCI+XG4gICAgICAgICAgPENhbmRpZGF0ZUluZm9cbiAgICAgICAgICAgIGlzQ2xpY2thYmxlPXt1c2VMaW5rVG9DYW5kaWRhdGVQYWdlID09PSB0cnVlfVxuICAgICAgICAgICAgb25DbGljaz17dXNlTGlua1RvQ2FuZGlkYXRlUGFnZSA9PT0gdHJ1ZSA/ICgpID0+IHRoaXMuZ29Ub0NhbmRpZGF0ZUxpbmsoKSA6IG51bGx9XG4gICAgICAgICAgPlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjYXJkLW1haW5fX21lZGlhLW9iamVjdC1hbmNob3JcIj5cbiAgICAgICAgICAgICAgPEltYWdlSGFuZGxlclxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImNhcmQtbWFpbl9fYXZhdGFyXCJcbiAgICAgICAgICAgICAgICBzaXplQ2xhc3NOYW1lPVwiaWNvbi1vZmZpY2UtY2hpbGQgXCJcbiAgICAgICAgICAgICAgICBpbWFnZVVybD17Y2FuZGlkYXRlUGhvdG9Vcmx9XG4gICAgICAgICAgICAgICAgYWx0PVwiY2FuZGlkYXRlLXBob3RvXCJcbiAgICAgICAgICAgICAgICBraW5kX29mX2JhbGxvdF9pdGVtPVwiQ0FORElEQVRFXCJcbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPENhbmRpZGF0ZT5cbiAgICAgICAgICAgICAgPGgyIGNsYXNzTmFtZT17YGNhcmQtbWFpbl9fZGlzcGxheS1uYW1lICR7bGlua1RvQmFsbG90SXRlbVBhZ2UgJiYgbGFyZ2VBcmVhSG92ZXJDb2xvck9uTm93ICYmIHNob3dIb3ZlciA/ICdjYXJkX19ibHVlJyA6ICcnfWB9PlxuICAgICAgICAgICAgICAgIHtiYWxsb3RJdGVtRGlzcGxheU5hbWV9XG4gICAgICAgICAgICAgIDwvaDI+XG4gICAgICAgICAgICAgIHt0d2l0dGVyRm9sbG93ZXJzQ291bnQgPyAoXG4gICAgICAgICAgICAgICAgPHNwYW5cbiAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17YHUtc2hvdy1kZXNrdG9wIHR3aXR0ZXItZm9sbG93ZXJzX19iYWRnZSAke2xpbmtUb0JhbGxvdEl0ZW1QYWdlID8gJ3UtY3Vyc29yLS1wb2ludGVyJyA6ICcnfWB9XG4gICAgICAgICAgICAgICAgICBvbkNsaWNrPXtsaW5rVG9CYWxsb3RJdGVtUGFnZSA/IHRoaXMuZ29Ub0NhbmRpZGF0ZUxpbmsgOiBudWxsfVxuICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cImZhYiBmYS10d2l0dGVyIGZhLXNtXCIgLz5cbiAgICAgICAgICAgICAgICAgIDxzcGFuIHRpdGxlPXtudW1iZXJXaXRoQ29tbWFzKHR3aXR0ZXJGb2xsb3dlcnNDb3VudCl9PnthYmJyZXZpYXRlTnVtYmVyKHR3aXR0ZXJGb2xsb3dlcnNDb3VudCl9PC9zcGFuPlxuICAgICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgICAgKSA6XG4gICAgICAgICAgICAgICAgbnVsbFxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cInUtc2hvdy1kZXNrdG9wXCI+XG4gICAgICAgICAgICAgICAgeyBjb250ZXN0T2ZmaWNlTmFtZSA/IChcbiAgICAgICAgICAgICAgICAgIDxwIGNsYXNzTmFtZT17bGlua1RvQmFsbG90SXRlbVBhZ2UgJiYgbGFyZ2VBcmVhSG92ZXJDb2xvck9uTm93ICYmIHNob3dIb3ZlciA/ICdjYXJkX19ibHVlJyA6ICcnfT5cbiAgICAgICAgICAgICAgICAgICAgPE9mZmljZU5hbWVUZXh0XG4gICAgICAgICAgICAgICAgICAgICAgY29udGVzdE9mZmljZU5hbWU9e2NvbnRlc3RPZmZpY2VOYW1lfVxuICAgICAgICAgICAgICAgICAgICAgIG9mZmljZUxpbms9e2xpbmtUb09mZmljZVBhZ2UgPyB0aGlzLmdldE9mZmljZUxpbmsoKSA6ICcnfVxuICAgICAgICAgICAgICAgICAgICAgIHBvbGl0aWNhbFBhcnR5PXtwb2xpdGljYWxQYXJ0eX1cbiAgICAgICAgICAgICAgICAgICAgICBzaG93T2ZmaWNlTmFtZT17c2hvd09mZmljZU5hbWV9XG4gICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICA8L3A+XG4gICAgICAgICAgICAgICAgKSA6XG4gICAgICAgICAgICAgICAgICBudWxsXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgICA8L0NhbmRpZGF0ZT5cbiAgICAgICAgICA8L0NhbmRpZGF0ZUluZm8+XG4gICAgICAgICAgPEJhbGxvdEl0ZW1TdXBwb3J0T3Bwb3NlQ291bnREaXNwbGF5V3JhcHBlciBjbGFzc05hbWU9XCJ1LXNob3ctZGVza3RvcFwiPlxuICAgICAgICAgICAgPEJhbGxvdEl0ZW1TdXBwb3J0T3Bwb3NlQ291bnREaXNwbGF5XG4gICAgICAgICAgICAgIGhhbmRsZUxlYXZlQ2FuZGlkYXRlQ2FyZD17dGhpcy5oYW5kbGVMZWF2ZX1cbiAgICAgICAgICAgICAgaGFuZGxlRW50ZXJDYW5kaWRhdGVDYXJkPXt0aGlzLmhhbmRsZUVudGVyfVxuICAgICAgICAgICAgICBiYWxsb3RJdGVtV2VWb3RlSWQ9e2NhbmRpZGF0ZVdlVm90ZUlkfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICA8L0JhbGxvdEl0ZW1TdXBwb3J0T3Bwb3NlQ291bnREaXNwbGF5V3JhcHBlcj5cbiAgICAgICAgICA8QmFsbG90SXRlbVN1cHBvcnRPcHBvc2VDb3VudERpc3BsYXlXcmFwcGVyIGNsYXNzTmFtZT1cInUtc2hvdy1tb2JpbGUtdGFibGV0XCI+XG4gICAgICAgICAgICA8QmFsbG90SXRlbVN1cHBvcnRPcHBvc2VDb3VudERpc3BsYXkgYmFsbG90SXRlbVdlVm90ZUlkPXtjYW5kaWRhdGVXZVZvdGVJZH0gLz5cbiAgICAgICAgICA8L0JhbGxvdEl0ZW1TdXBwb3J0T3Bwb3NlQ291bnREaXNwbGF5V3JhcHBlcj5cbiAgICAgICAgICB7JyAnfVxuICAgICAgICA8L0NhbmRpZGF0ZVdyYXBwZXI+XG4gICAgICAgIHsnICd9XG4gICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cInUtc2hvdy1tb2JpbGUtdGFibGV0XCI+XG4gICAgICAgICAgeyBjb250ZXN0T2ZmaWNlTmFtZSA/IChcbiAgICAgICAgICAgIDxwPlxuICAgICAgICAgICAgICA8T2ZmaWNlTmFtZVRleHRcbiAgICAgICAgICAgICAgICBjb250ZXN0T2ZmaWNlTmFtZT17Y29udGVzdE9mZmljZU5hbWV9XG4gICAgICAgICAgICAgICAgb2ZmaWNlTGluaz17bGlua1RvT2ZmaWNlUGFnZSA/IHRoaXMuZ2V0T2ZmaWNlTGluaygpIDogJyd9XG4gICAgICAgICAgICAgICAgcG9saXRpY2FsUGFydHk9e3BvbGl0aWNhbFBhcnR5fVxuICAgICAgICAgICAgICAgIHNob3dPZmZpY2VOYW1lPXtzaG93T2ZmaWNlTmFtZX1cbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDwvcD5cbiAgICAgICAgICApIDpcbiAgICAgICAgICAgIG51bGxcbiAgICAgICAgICB9XG4gICAgICAgIDwvc3Bhbj5cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH07XG5cbiAgdG9wQ29tbWVudEJ5QmFsbG90SXRlbSA9IChjYW5kaWRhdGVXZVZvdGVJZCwgY2FuZGlkYXRlVGV4dCkgPT4gKFxuICAgIDxUb3BDb21tZW50QnlCYWxsb3RJdGVtXG4gICAgICBiYWxsb3RJdGVtV2VWb3RlSWQ9e2NhbmRpZGF0ZVdlVm90ZUlkfVxuICAgICAgaGlkZU1vcmVCdXR0b25cbiAgICA+XG4gICAgICB7LyogSWYgdGhlcmUgYXJlbid0IGFueSBjb21tZW50cyBhYm91dCB0aGUgY2FuZGlkYXRlLCBzaG93IHRoZSB0ZXh0IGRlc2NyaXB0aW9uIG9mIHRoZSBjYW5kaWRhdGUgKi99XG4gICAgICB7IChjYW5kaWRhdGVUZXh0ICYmIGNhbmRpZGF0ZVRleHQubGVuZ3RoKSA/IChcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9e2B1LXN0YWNrLS1zbSR7dGhpcy5wcm9wcy5saW5rVG9CYWxsb3RJdGVtUGFnZSA/ICcgY2FyZC1tYWluX19kZXNjcmlwdGlvbi1jb250YWluZXItLXRydW5jYXRlZCcgOiAnIGNhcmQtbWFpbl9fZGVzY3JpcHRpb24tY29udGFpbmVyJ31gfT5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNhcmQtbWFpbl9fZGVzY3JpcHRpb25cIj5cbiAgICAgICAgICAgIDxUZXh0VHJ1bmNhdGVcbiAgICAgICAgICAgICAgbGluZT17Mn1cbiAgICAgICAgICAgICAgdHJ1bmNhdGVUZXh0PVwiLi4uXCJcbiAgICAgICAgICAgICAgdGV4dD17Y2FuZGlkYXRlVGV4dH1cbiAgICAgICAgICAgICAgdGV4dFRydW5jYXRlQ2hpbGQ9e251bGx9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cImNhcmQtbWFpbl9fcmVhZC1tb3JlLXBzZXVkb1wiIC8+XG4gICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwiY2FyZC1tYWluX19yZWFkLW1vcmUtbGlua1wiPlxuICAgICAgICAgICAgJm5ic3A7bW9yZVxuICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgPC9kaXY+XG4gICAgICApIDogbnVsbCB9XG4gICAgPC9Ub3BDb21tZW50QnlCYWxsb3RJdGVtPlxuICApO1xuXG4gIGNhbmRpZGF0ZUlzc3Vlc0FuZENvbW1lbnRCbG9jayA9IChjYW5kaWRhdGVUZXh0LCBsb2NhbFVuaXF1ZUlkKSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgY2FuZGlkYXRlV2VWb3RlSWQsIGhpZGVCYWxsb3RJdGVtU3VwcG9ydE9wcG9zZUNvbW1lbnQsIGhpZGVTaG93TW9yZUZvb3RlcixcbiAgICAgIGxpbmtUb0JhbGxvdEl0ZW1QYWdlLCBzaG93SG92ZXIsIHNob3dQb3NpdGlvblN0YXRlbWVudEFjdGlvbkJhciwgc2hvd1RvcENvbW1lbnRCeUJhbGxvdEl0ZW0sXG4gICAgfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3Qge1xuICAgICAgYmFsbG90SXRlbURpc3BsYXlOYW1lLCBsYXJnZUFyZWFIb3ZlckNvbG9yT25Ob3csXG4gICAgICBsYXJnZUFyZWFIb3ZlckxpbmtPbk5vdywgdm90ZXJPcHBvc2VzQmFsbG90SXRlbSwgdm90ZXJTdXBwb3J0c0JhbGxvdEl0ZW0sXG4gICAgfSA9IHRoaXMuc3RhdGU7XG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXY+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY2FyZC1tYWluX19hY3Rpb25zXCI+XG4gICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgIHsvKiBJc3N1ZXMgcmVsYXRlZCB0byB0aGlzIENhbmRpZGF0ZSAqL31cbiAgICAgICAgICAgIDxJc3N1ZXNCeUJhbGxvdEl0ZW1EaXNwbGF5TGlzdFxuICAgICAgICAgICAgICBiYWxsb3RJdGVtRGlzcGxheU5hbWU9e2JhbGxvdEl0ZW1EaXNwbGF5TmFtZX1cbiAgICAgICAgICAgICAgYmFsbG90SXRlbVdlVm90ZUlkPXtjYW5kaWRhdGVXZVZvdGVJZH1cbiAgICAgICAgICAgICAgcGxhY2VtZW50PVwiYm90dG9tXCJcbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgICB7LyogSWYgdGhlcmUgaXMgYSBxdW90ZSBhYm91dCB0aGUgY2FuZGlkYXRlLCBzaG93IHRoYXQgdG9vLiAqL31cbiAgICAgICAgICAgIHtzaG93VG9wQ29tbWVudEJ5QmFsbG90SXRlbSA/IChcbiAgICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInUtc2hvdy1kZXNrdG9wXCI+XG4gICAgICAgICAgICAgICAgICB7bGlua1RvQmFsbG90SXRlbVBhZ2UgJiYgbGFyZ2VBcmVhSG92ZXJMaW5rT25Ob3cgJiYgc2hvd0hvdmVyID9cbiAgICAgICAgICAgICAgICAgICAgKFxuICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicm93XCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17YGNhcmRfX2JsdWUgJHsodm90ZXJTdXBwb3J0c0JhbGxvdEl0ZW0gfHwgdm90ZXJPcHBvc2VzQmFsbG90SXRlbSkgPyAnY29sIGNvbC02JyA6ICdjb2wgY29sLTknfWB9PlxuICAgICAgICAgICAgICAgICAgICAgICAgICA8TGluayB0bz17dGhpcy5nZXRDYW5kaWRhdGVMaW5rKCl9IGNsYXNzTmFtZT1cImNhcmQtbWFpbl9fbm8tdW5kZXJsaW5lXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge3RoaXMudG9wQ29tbWVudEJ5QmFsbG90SXRlbShjYW5kaWRhdGVXZVZvdGVJZCwgY2FuZGlkYXRlVGV4dCl9XG4gICAgICAgICAgICAgICAgICAgICAgICAgIDwvTGluaz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9e2Akeyh2b3RlclN1cHBvcnRzQmFsbG90SXRlbSB8fCB2b3Rlck9wcG9zZXNCYWxsb3RJdGVtKSA/ICdjb2wgY29sLTYnIDogJ2NvbCBjb2wtMyd9YH0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgIDxJdGVtQWN0aW9uQmFyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYmFsbG90SXRlbVdlVm90ZUlkPXtjYW5kaWRhdGVXZVZvdGVJZH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBidXR0b25zT25seVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cInUtZmxvYXQtcmlnaHRcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbW1lbnRCdXR0b25IaWRlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXh0ZXJuYWxVbmlxdWVJZD17YGNhbmRpZGF0ZUl0ZW0tSXRlbUFjdGlvbkJhci0ke2xvY2FsVW5pcXVlSWR9YH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaGFyZUJ1dHRvbkhpZGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlPVwiQ0FORElEQVRFXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICApIDpcbiAgICAgICAgICAgICAgICAgICAgKFxuICAgICAgICAgICAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17bGlua1RvQmFsbG90SXRlbVBhZ2UgJiYgbGFyZ2VBcmVhSG92ZXJDb2xvck9uTm93ICYmIHNob3dIb3ZlciA/IChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgJ2NhcmRfX2JsdWUnXG4gICAgICAgICAgICAgICAgICAgICAgICApIDogKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAnJ1xuICAgICAgICAgICAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgICAgICB7dGhpcy50b3BDb21tZW50QnlCYWxsb3RJdGVtKGNhbmRpZGF0ZVdlVm90ZUlkLCBjYW5kaWRhdGVUZXh0KX1cbiAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidS1zaG93LW1vYmlsZS10YWJsZXRcIj5cbiAgICAgICAgICAgICAgICAgIDxMaW5rIHRvPXt0aGlzLmdldENhbmRpZGF0ZUxpbmsoKX0gY2xhc3NOYW1lPVwiY2FyZC1tYWluX19uby11bmRlcmxpbmVcIj5cbiAgICAgICAgICAgICAgICAgICAge3RoaXMudG9wQ29tbWVudEJ5QmFsbG90SXRlbShjYW5kaWRhdGVXZVZvdGVJZCwgY2FuZGlkYXRlVGV4dCl9XG4gICAgICAgICAgICAgICAgICA8L0xpbms+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgKSA6IChcbiAgICAgICAgICAgICAgPHNwYW4+XG4gICAgICAgICAgICAgICAgeyhjYW5kaWRhdGVUZXh0ICYmIGNhbmRpZGF0ZVRleHQubGVuZ3RoKSAmJiAoXG4gICAgICAgICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17YHUtc3RhY2stLXNtICR7bGlua1RvQmFsbG90SXRlbVBhZ2UgPyAnY2FyZC1tYWluX19kZXNjcmlwdGlvbi1jb250YWluZXItLXRydW5jYXRlZCcgOiAnY2FyZC1tYWluX19kZXNjcmlwdGlvbi1jb250YWluZXInfWB9XG4gICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY2FyZC1tYWluX19kZXNjcmlwdGlvblwiPlxuICAgICAgICAgICAgICAgICAgICAgIDxSZWFkTW9yZVxuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dF90b19kaXNwbGF5PXtjYW5kaWRhdGVUZXh0fVxuICAgICAgICAgICAgICAgICAgICAgICAgbnVtX29mX2xpbmVzPXsyfVxuICAgICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgKX1cbiAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgIHtoaWRlQmFsbG90SXRlbVN1cHBvcnRPcHBvc2VDb21tZW50ID9cbiAgICAgICAgICAgICAgICBudWxsIDogKFxuICAgICAgICAgICAgICAgICAgPEJhbGxvdEl0ZW1TdXBwb3J0T3Bwb3NlQ29tbWVudFxuICAgICAgICAgICAgICAgICAgICBiYWxsb3RJdGVtV2VWb3RlSWQ9e2NhbmRpZGF0ZVdlVm90ZUlkfVxuICAgICAgICAgICAgICAgICAgICBleHRlcm5hbFVuaXF1ZUlkPXtgY2FuZGlkYXRlSXRlbS0ke2xvY2FsVW5pcXVlSWR9YH1cbiAgICAgICAgICAgICAgICAgICAgc2hvd1Bvc2l0aW9uU3RhdGVtZW50QWN0aW9uQmFyPXtzaG93UG9zaXRpb25TdGF0ZW1lbnRBY3Rpb25CYXJ9XG4gICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICB7aGlkZVNob3dNb3JlRm9vdGVyID9cbiAgICAgICAgICBudWxsIDpcbiAgICAgICAgICA8U2hvd01vcmVGb290ZXIgc2hvd01vcmVJZD1cImNhbmRpZGF0ZUl0ZW1TaG93TW9yZUZvb3RlclwiIHNob3dNb3JlTGluaz17dGhpcy5nb1RvQ2FuZGlkYXRlTGlua30gLz5cbiAgICAgICAgfVxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfTtcblxuICBnb1RvQ2FuZGlkYXRlTGluayAoKSB7XG4gICAgLy8gSWYgaGVyZSwgd2UgYXNzdW1lIHRoZSB2b3RlciBpcyBvbiB0aGUgT2ZmaWNlIHBhZ2VcbiAgICBoaXN0b3J5UHVzaCh0aGlzLmdldENhbmRpZGF0ZUxpbmsoKSk7XG4gIH1cblxuICBnb1RvT2ZmaWNlTGluayAoKSB7XG4gICAgaGlzdG9yeVB1c2godGhpcy5nZXRPZmZpY2VMaW5rKCkpO1xuICB9XG5cbiAgcmVuZGVyICgpIHtcbiAgICByZW5kZXJMb2coJ0NhbmRpZGF0ZUl0ZW0nKTsgIC8vIFNldCBMT0dfUkVOREVSX0VWRU5UUyB0byBsb2cgYWxsIHJlbmRlcnNcbiAgICBjb25zdCB7IGNhbmRpZGF0ZVdlVm90ZUlkLCBsaW5rVG9CYWxsb3RJdGVtUGFnZSwgc2hvd0hvdmVyIH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IHsgY2FuZGlkYXRlVGV4dCwgbGFyZ2VBcmVhSG92ZXJDb2xvck9uTm93LCBsYXJnZUFyZWFIb3ZlckxpbmtPbk5vdyB9ID0gdGhpcy5zdGF0ZTtcbiAgICBpZiAoIWNhbmRpZGF0ZVdlVm90ZUlkKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICByZXR1cm4gKFxuICAgICAgPENhbmRpZGF0ZUl0ZW1XcmFwcGVyPlxuICAgICAgICA8RGVza3RvcFdyYXBwZXJcbiAgICAgICAgICBjbGFzc05hbWU9e2B1LXNob3ctZGVza3RvcCBjYXJkLW1haW4gdS1vdmVyZmxvdy1oaWRkZW4gY2FuZGlkYXRlLWNhcmQgJHtsaW5rVG9CYWxsb3RJdGVtUGFnZSAmJiBsYXJnZUFyZWFIb3ZlckNvbG9yT25Ob3cgJiYgc2hvd0hvdmVyID8gJyBjYXJkLW1haW4tLW91dGxpbmUnIDogJyd9YH1cbiAgICAgICAgICBvbk1vdXNlRW50ZXI9e3RoaXMuaGFuZGxlRW50ZXJ9XG4gICAgICAgICAgb25Nb3VzZUxlYXZlPXt0aGlzLmhhbmRsZUxlYXZlfVxuICAgICAgICA+XG4gICAgICAgICAge2xpbmtUb0JhbGxvdEl0ZW1QYWdlICYmIGxhcmdlQXJlYUhvdmVyTGlua09uTm93ICYmIHNob3dIb3ZlciA/IChcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY2FyZC1tYWluX19uby11bmRlcmxpbmVcIj5cbiAgICAgICAgICAgICAge3RoaXMuY2FuZGlkYXRlUmVuZGVyQmxvY2soY2FuZGlkYXRlV2VWb3RlSWQsIGxpbmtUb0JhbGxvdEl0ZW1QYWdlKX1cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICB7dGhpcy5jYW5kaWRhdGVSZW5kZXJCbG9jayhjYW5kaWRhdGVXZVZvdGVJZCl9XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICApfVxuICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICB7dGhpcy5jYW5kaWRhdGVJc3N1ZXNBbmRDb21tZW50QmxvY2soY2FuZGlkYXRlVGV4dCwgJ2Rlc2t0b3BJc3N1ZXNDb21tZW50Jyl9XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvRGVza3RvcFdyYXBwZXI+XG4gICAgICAgIDxNb2JpbGVUYWJsZXRXcmFwcGVyIGNsYXNzTmFtZT1cInUtc2hvdy1tb2JpbGUtdGFibGV0IGNhcmQtbWFpbiBjYW5kaWRhdGUtY2FyZCB1LW5vLXNjcm9sbFwiPlxuICAgICAgICAgIHtsaW5rVG9CYWxsb3RJdGVtUGFnZSA/IChcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY2FyZC1tYWluX19uby11bmRlcmxpbmVcIj5cbiAgICAgICAgICAgICAge3RoaXMuY2FuZGlkYXRlUmVuZGVyQmxvY2soY2FuZGlkYXRlV2VWb3RlSWQsIGxpbmtUb0JhbGxvdEl0ZW1QYWdlKX1cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICA8c3Bhbj5cbiAgICAgICAgICAgICAge3RoaXMuY2FuZGlkYXRlUmVuZGVyQmxvY2soY2FuZGlkYXRlV2VWb3RlSWQpfVxuICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICl9XG4gICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgIHt0aGlzLmNhbmRpZGF0ZUlzc3Vlc0FuZENvbW1lbnRCbG9jayhjYW5kaWRhdGVUZXh0LCAnbW9iaWxlSXNzdWVzQ29tbWVudCcpfVxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L01vYmlsZVRhYmxldFdyYXBwZXI+XG4gICAgICA8L0NhbmRpZGF0ZUl0ZW1XcmFwcGVyPlxuICAgICk7XG4gIH1cbn1cblxuY29uc3QgQmFsbG90SXRlbVN1cHBvcnRPcHBvc2VDb3VudERpc3BsYXlXcmFwcGVyID0gc3R5bGVkLmRpdmBcbiAgY3Vyc29yOiBwb2ludGVyO1xuYDtcblxuY29uc3QgQ2FuZGlkYXRlSW5mbyA9IHN0eWxlZC5kaXZgXG4gICR7KHsgaXNDbGlja2FibGUgfSkgPT4gKChpc0NsaWNrYWJsZSkgPyAnY3Vyc29yOiBwb2ludGVyOycgOiAnJyl9XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtZmxvdzogcm93IHdyYXA7XG5gO1xuXG5jb25zdCBDYW5kaWRhdGUgPSBzdHlsZWQuZGl2YFxuYDtcblxuY29uc3QgQ2FuZGlkYXRlSXRlbVdyYXBwZXIgPSBzdHlsZWQuZGl2YFxuYDtcblxuY29uc3QgQ2FuZGlkYXRlV3JhcHBlciA9IHN0eWxlZC5kaXZgXG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtZmxvdzogcm93IHdyYXA7XG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcbiAgd2lkdGg6IDEwMCU7XG4gIEBtZWRpYSAobWF4LXdpZHRoOiAkeyh7IHRoZW1lIH0pID0+IHRoZW1lLmJyZWFrcG9pbnRzLnNtfSkge1xuICAgIHdpZHRoOiAxMDAlO1xuICB9XG5gO1xuXG5jb25zdCBEZXNrdG9wV3JhcHBlciA9IHN0eWxlZC5kaXZgXG5gO1xuXG5jb25zdCBNb2JpbGVUYWJsZXRXcmFwcGVyID0gc3R5bGVkLmRpdmBcbmA7XG5cbmV4cG9ydCBkZWZhdWx0IENhbmRpZGF0ZUl0ZW07XG4iXX0=*/