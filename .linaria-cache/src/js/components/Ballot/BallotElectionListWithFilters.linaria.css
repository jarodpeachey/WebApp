.b1pd27zk{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-flow:row;-ms-flex-flow:row;flex-flow:row;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;width:100%;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}
.e11y6epp{margin-right:auto;}
.e5n45ii{margin-left:auto;font-size:12px;font-weight:100;}@media (min-width:var(--e5n45ii-0)){.e5n45ii{font-size:12px;}}
.sstv6xs{margin-bottom:20px;}
/*# sourceMappingURL=data:application/json;base64,*/