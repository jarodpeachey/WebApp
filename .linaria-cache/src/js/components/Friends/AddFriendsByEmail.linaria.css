.f168uz1k{background:#fff;padding:12px 0;margin-bottom:8px;}
.f1nfomt9{background:#eee;margin:0 10px 0 0;display:inline-block;padding:6px 8px;}
.su0y5e0{width:-webkit-fit-content;width:-moz-fit-content;width:fit-content;font-weight:bold;font-size:18px;margin-bottom:16px;}
.f3by6u{margin-bottom:8px;}
.lfvf199{margin-bottom:-4px;}
.b1xorcbg{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:end;-webkit-justify-content:flex-end;-ms-flex-pack:end;justify-content:flex-end;}@media (max-width:520px){.b1xorcbg{-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;}}
/*# sourceMappingURL=data:application/json;base64,*/