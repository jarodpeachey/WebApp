.idol03p{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;width:100%;-webkit-box-pack:end;-webkit-justify-content:flex-end;-ms-flex-pack:end;justify-content:flex-end;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;border-top:var(--idol03p-0);margin-top:var(--idol03p-1);margin-right:0;margin-left:0;padding-top:var(--idol03p-2);}@media (max-width:var(--idol03p-3)){.idol03p{margin-bottom:8px;}}
.b1hsgtk5{margin-left:0;height:-webkit-fit-content;height:-moz-fit-content;height:fit-content;}
.s17zyrf5{margin-left:3px;width:var(--s17zyrf5-0);}
/*# sourceMappingURL=data:application/json;base64,*/