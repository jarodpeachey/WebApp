.ed583uz{margin-bottom:10px;}
.pmmvbb2{margin:15px 15px;font-size:16px;font-weight:normal;}
.pwt7nnx{position:relative;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;margin-bottom:16px;margin-bottom:10px;background-color:white;background-clip:border-box;border:2px solid #999;}@media print{.pwt7nnx{display:none;}}
/*# sourceMappingURL=data:application/json;base64,*/