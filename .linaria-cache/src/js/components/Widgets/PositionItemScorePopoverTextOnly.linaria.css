.fp78pzg{margin-top:10px;}
.o560618{margin-top:4px;}
.p1ilb67h{font-weight:bold;font-size:16px;}
.p8ll8ot{font-size:14px;padding:8px;}
.s1cmj64o{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-box-pack:start;-webkit-justify-content:flex-start;-ms-flex-pack:start;justify-content:flex-start;margin-top:6px;}
.s12b0e18{margin-left:4px;}
/*# sourceMappingURL=data:application/json;base64,*/