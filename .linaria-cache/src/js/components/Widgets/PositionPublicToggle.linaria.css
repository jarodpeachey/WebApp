.wqry5nz{margin-left:auto;width:-webkit-fit-content;width:-moz-fit-content;width:fit-content;}
.p13bixw9{padding-left:15px;}@media (max-width:var(--p13bixw9-0)){.p13bixw9{padding-top:4px;margin-bottom:10px;}}
@media (max-width:var(--r2axv01-0)){.r2axv01{width:100% !important;min-width:100% !important;margin-bottom:-6px;}}
.r1hm4udl{width:100%;}@media (max-width:var(--r1hm4udl-0)){.r1hm4udl{margin-bottom:-10px;}}@media (min-width:var(--r1hm4udl-1)){.r1hm4udl{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-flow:row nowrap;-ms-flex-flow:row nowrap;flex-flow:row nowrap;}}
/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkQ6XFxKYXJvZFxcV2VWb3RlXFxXZWJBcHBcXHNyY1xcanNcXGNvbXBvbmVudHNcXFdpZGdldHNcXFBvc2l0aW9uUHVibGljVG9nZ2xlLmpzeCJdLCJuYW1lcyI6WyIud3FyeTVueiIsIi5wMTNiaXh3OSIsIi5yMmF4djAxIiwiLnIxaG00dWRsIl0sIm1hcHBpbmdzIjoiQUE4Vk1BO0FBS0FDO0FBUUFDO0FBUUFDIiwiZmlsZSI6IkQ6XFxKYXJvZFxcV2VWb3RlXFxXZWJBcHBcXHNyY1xcanNcXGNvbXBvbmVudHNcXFdpZGdldHNcXFBvc2l0aW9uUHVibGljVG9nZ2xlLmpzeCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgc3R5bGVkIH0gZnJvbSAnbGluYXJpYS9yZWFjdCc7XG5pbXBvcnQgRGlhbG9nIGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlL0RpYWxvZyc7XG5pbXBvcnQgRGlhbG9nQ29udGVudCBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZS9EaWFsb2dDb250ZW50JztcbmltcG9ydCBEaWFsb2dUaXRsZSBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZS9EaWFsb2dUaXRsZSc7XG5pbXBvcnQgSWNvbkJ1dHRvbiBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZS9JY29uQnV0dG9uJztcbmltcG9ydCBDbG9zZUljb24gZnJvbSAnQG1hdGVyaWFsLXVpL2ljb25zL0Nsb3NlJztcbmltcG9ydCBUeXBvZ3JhcGh5IGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlL1R5cG9ncmFwaHknO1xuaW1wb3J0IFJhZGlvIGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlL1JhZGlvJztcbmltcG9ydCBGb3JtQ29udHJvbExhYmVsIGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlL0Zvcm1Db250cm9sTGFiZWwnO1xuaW1wb3J0IEZvcm1Db250cm9sIGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlL0Zvcm1Db250cm9sJztcbmltcG9ydCB7IHdpdGhTdHlsZXMgfSBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZS9zdHlsZXMnO1xuaW1wb3J0IHsgcmVuZGVyTG9nIH0gZnJvbSAnLi4vLi4vdXRpbHMvbG9nZ2luZyc7XG5pbXBvcnQgeyBoYXNJUGhvbmVOb3RjaCB9IGZyb20gJy4uLy4uL3V0aWxzL2NvcmRvdmFVdGlscyc7XG5pbXBvcnQgU2V0dGluZ3NBY2NvdW50IGZyb20gJy4uL1NldHRpbmdzL1NldHRpbmdzQWNjb3VudCc7XG5pbXBvcnQgU3VwcG9ydEFjdGlvbnMgZnJvbSAnLi4vLi4vYWN0aW9ucy9TdXBwb3J0QWN0aW9ucyc7XG5pbXBvcnQgU3VwcG9ydFN0b3JlIGZyb20gJy4uLy4uL3N0b3Jlcy9TdXBwb3J0U3RvcmUnO1xuaW1wb3J0IFZvdGVyQWN0aW9ucyBmcm9tICcuLi8uLi9hY3Rpb25zL1ZvdGVyQWN0aW9ucyc7XG5pbXBvcnQgVm90ZXJDb25zdGFudHMgZnJvbSAnLi4vLi4vY29uc3RhbnRzL1ZvdGVyQ29uc3RhbnRzJztcbmltcG9ydCBWb3RlclN0b3JlIGZyb20gJy4uLy4uL3N0b3Jlcy9Wb3RlclN0b3JlJztcbmltcG9ydCB7IG9wZW5TbmFja2JhciB9IGZyb20gJy4vU25hY2tOb3RpZmllcic7XG5cbmNsYXNzIFBvc2l0aW9uUHVibGljVG9nZ2xlIGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgc3RhdGljIHByb3BUeXBlcyA9IHtcbiAgICBiYWxsb3RJdGVtV2VWb3RlSWQ6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICAgIGV4dGVybmFsVW5pcXVlSWQ6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgaW5UZXN0TW9kZTogUHJvcFR5cGVzLmJvb2wsXG4gICAgdHlwZTogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICB9O1xuXG4gIGNvbnN0cnVjdG9yIChwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgYmFsbG90SXRlbVdlVm90ZUlkOiAnJyxcbiAgICAgIGNvbXBvbmVudERpZE1vdW50OiBmYWxzZSxcbiAgICAgIHZvdGVyUG9zaXRpb25Jc1B1YmxpYzogbnVsbCxcbiAgICAgIGluVGVzdE1vZGU6IGZhbHNlLFxuICAgICAgaXNTaWduZWRJbjogbnVsbCxcbiAgICAgIHNob3dQb3NpdGlvblB1YmxpY0hlbHBNb2RhbDogZmFsc2UsXG4gICAgICB2b3RlcldlVm90ZUlkOiAnJyxcbiAgICB9O1xuICB9XG5cbiAgY29tcG9uZW50RGlkTW91bnQgKCkge1xuICAgIHRoaXMub25Wb3RlclN0b3JlQ2hhbmdlKCk7XG4gICAgdGhpcy5zdXBwb3J0U3RvcmVMaXN0ZW5lciA9IFN1cHBvcnRTdG9yZS5hZGRMaXN0ZW5lcih0aGlzLm9uU3VwcG9ydFN0b3JlQ2hhbmdlLmJpbmQodGhpcykpO1xuICAgIHRoaXMudm90ZXJTdG9yZUxpc3RlbmVyID0gVm90ZXJTdG9yZS5hZGRMaXN0ZW5lcih0aGlzLm9uVm90ZXJTdG9yZUNoYW5nZS5iaW5kKHRoaXMpKTtcbiAgICBjb25zdCB7IGJhbGxvdEl0ZW1XZVZvdGVJZCwgaW5UZXN0TW9kZSB9ID0gdGhpcy5wcm9wcztcblxuICAgIGxldCB2b3RlclBvc2l0aW9uSXNQdWJsaWMgPSBmYWxzZTtcbiAgICBjb25zdCBiYWxsb3RJdGVtU3RhdFNoZWV0ID0gU3VwcG9ydFN0b3JlLmdldEJhbGxvdEl0ZW1TdGF0U2hlZXQoYmFsbG90SXRlbVdlVm90ZUlkKTtcbiAgICBpZiAoYmFsbG90SXRlbVN0YXRTaGVldCkge1xuICAgICAgKHsgdm90ZXJQb3NpdGlvbklzUHVibGljIH0gPSBiYWxsb3RJdGVtU3RhdFNoZWV0KTtcbiAgICB9XG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBiYWxsb3RJdGVtV2VWb3RlSWQsXG4gICAgICBjb21wb25lbnREaWRNb3VudDogdHJ1ZSxcbiAgICAgIGluVGVzdE1vZGUsXG4gICAgICB2b3RlclBvc2l0aW9uSXNQdWJsaWMsXG4gICAgfSk7XG4gIH1cblxuICBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIChuZXh0UHJvcHMpIHtcbiAgICB0aGlzLm9uVm90ZXJTdG9yZUNoYW5nZSgpO1xuICAgIGNvbnN0IHsgYmFsbG90SXRlbVdlVm90ZUlkIH0gPSBuZXh0UHJvcHM7XG4gICAgbGV0IHZvdGVyUG9zaXRpb25Jc1B1YmxpYyA9IGZhbHNlO1xuICAgIGNvbnN0IGJhbGxvdEl0ZW1TdGF0U2hlZXQgPSBTdXBwb3J0U3RvcmUuZ2V0QmFsbG90SXRlbVN0YXRTaGVldChiYWxsb3RJdGVtV2VWb3RlSWQpO1xuICAgIGlmIChiYWxsb3RJdGVtU3RhdFNoZWV0KSB7XG4gICAgICAoeyB2b3RlclBvc2l0aW9uSXNQdWJsaWMgfSA9IGJhbGxvdEl0ZW1TdGF0U2hlZXQpO1xuICAgIH1cbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIGJhbGxvdEl0ZW1XZVZvdGVJZCxcbiAgICAgIHZvdGVyUG9zaXRpb25Jc1B1YmxpYyxcbiAgICB9KTtcbiAgfVxuXG4gIHNob3VsZENvbXBvbmVudFVwZGF0ZSAobmV4dFByb3BzLCBuZXh0U3RhdGUpIHtcbiAgICBpZiAodGhpcy5zdGF0ZS5iYWxsb3RJdGVtV2VWb3RlSWQgIT09IG5leHRTdGF0ZS5iYWxsb3RJdGVtV2VWb3RlSWQpIHtcbiAgICAgIC8vIGNvbnNvbGUubG9nKCd0aGlzLnN0YXRlLmJhbGxvdEl0ZW1XZVZvdGVJZDonLCB0aGlzLnN0YXRlLmJhbGxvdEl0ZW1XZVZvdGVJZCwgJywgbmV4dFN0YXRlLmJhbGxvdEl0ZW1XZVZvdGVJZDogJywgbmV4dFN0YXRlLmJhbGxvdEl0ZW1XZVZvdGVJZCk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKHRoaXMuc3RhdGUuY29tcG9uZW50RGlkTW91bnQgIT09IG5leHRTdGF0ZS5jb21wb25lbnREaWRNb3VudCkge1xuICAgICAgLy8gY29uc29sZS5sb2coJ3RoaXMuc3RhdGUuY29tcG9uZW50RGlkTW91bnQ6JywgdGhpcy5zdGF0ZS5jb21wb25lbnREaWRNb3VudCwgJywgbmV4dFN0YXRlLmNvbXBvbmVudERpZE1vdW50OiAnLCBuZXh0U3RhdGUuY29tcG9uZW50RGlkTW91bnQpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGlmICh0aGlzLnN0YXRlLnZvdGVyUG9zaXRpb25Jc1B1YmxpYyAhPT0gbmV4dFN0YXRlLnZvdGVyUG9zaXRpb25Jc1B1YmxpYykge1xuICAgICAgLy8gY29uc29sZS5sb2coJ3RoaXMuc3RhdGUudm90ZXJQb3NpdGlvbklzUHVibGljOicsIHRoaXMuc3RhdGUudm90ZXJQb3NpdGlvbklzUHVibGljLCAnLCBuZXh0U3RhdGUudm90ZXJQb3NpdGlvbklzUHVibGljOiAnLCBuZXh0U3RhdGUudm90ZXJQb3NpdGlvbklzUHVibGljKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBpZiAodGhpcy5zdGF0ZS5pc1NpZ25lZEluICE9PSBuZXh0U3RhdGUuaXNTaWduZWRJbikge1xuICAgICAgLy8gY29uc29sZS5sb2coJ3RoaXMuc3RhdGUuaXNTaWduZWRJbjonLCB0aGlzLnN0YXRlLmlzU2lnbmVkSW4sICcsIG5leHRTdGF0ZS5pc1NpZ25lZEluOiAnLCBuZXh0U3RhdGUuaXNTaWduZWRJbik7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKHRoaXMuc3RhdGUuc2hvd1Bvc2l0aW9uUHVibGljSGVscE1vZGFsICE9PSBuZXh0U3RhdGUuc2hvd1Bvc2l0aW9uUHVibGljSGVscE1vZGFsKSB7XG4gICAgICAvLyBjb25zb2xlLmxvZygndGhpcy5zdGF0ZS5zaG93UG9zaXRpb25QdWJsaWNIZWxwTW9kYWw6JywgdGhpcy5zdGF0ZS5zaG93UG9zaXRpb25QdWJsaWNIZWxwTW9kYWwsICcsIG5leHRTdGF0ZS5zaG93UG9zaXRpb25QdWJsaWNIZWxwTW9kYWw6ICcsIG5leHRTdGF0ZS5zaG93UG9zaXRpb25QdWJsaWNIZWxwTW9kYWwpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGlmICh0aGlzLnN0YXRlLnZvdGVyV2VWb3RlSWQgIT09IG5leHRTdGF0ZS52b3RlcldlVm90ZUlkKSB7XG4gICAgICAvLyBjb25zb2xlLmxvZygndGhpcy5zdGF0ZS52b3RlcldlVm90ZUlkOicsIHRoaXMuc3RhdGUudm90ZXJXZVZvdGVJZCwgJywgbmV4dFN0YXRlLnZvdGVyV2VWb3RlSWQ6ICcsIG5leHRTdGF0ZS52b3RlcldlVm90ZUlkKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICAvLyBjb25zb2xlLmxvZygnc2hvdWxkQ29tcG9uZW50VXBkYXRlIGZhbHNlJyk7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgY29tcG9uZW50V2lsbFVubW91bnQgKCkge1xuICAgIHRoaXMuc3VwcG9ydFN0b3JlTGlzdGVuZXIucmVtb3ZlKCk7XG4gICAgdGhpcy52b3RlclN0b3JlTGlzdGVuZXIucmVtb3ZlKCk7XG4gIH1cblxuICBvblN1cHBvcnRTdG9yZUNoYW5nZSAoKSB7XG4gICAgY29uc3QgeyBiYWxsb3RJdGVtV2VWb3RlSWQgfSA9IHRoaXMuc3RhdGU7XG4gICAgbGV0IHZvdGVyUG9zaXRpb25Jc1B1YmxpYyA9IGZhbHNlO1xuICAgIGNvbnN0IGJhbGxvdEl0ZW1TdGF0U2hlZXQgPSBTdXBwb3J0U3RvcmUuZ2V0QmFsbG90SXRlbVN0YXRTaGVldChiYWxsb3RJdGVtV2VWb3RlSWQpO1xuICAgIGlmIChiYWxsb3RJdGVtU3RhdFNoZWV0KSB7XG4gICAgICAoeyB2b3RlclBvc2l0aW9uSXNQdWJsaWMgfSA9IGJhbGxvdEl0ZW1TdGF0U2hlZXQpO1xuICAgIH1cbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIHZvdGVyUG9zaXRpb25Jc1B1YmxpYyxcbiAgICB9KTtcbiAgfVxuXG4gIG9uVm90ZXJTdG9yZUNoYW5nZSAoKSB7XG4gICAgY29uc3Qgdm90ZXIgPSBWb3RlclN0b3JlLmdldFZvdGVyKCk7XG4gICAgY29uc3QgeyBpc19zaWduZWRfaW46IGlzU2lnbmVkSW4sIHdlX3ZvdGVfaWQ6IHZvdGVyV2VWb3RlSWQgfSA9IHZvdGVyO1xuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgaXNTaWduZWRJbixcbiAgICAgIHZvdGVyV2VWb3RlSWQsXG4gICAgfSk7XG4gIH1cblxuICBoYW5kbGVQb3NpdGlvblRvZ2dsZSA9IChldnQpID0+IHtcbiAgICBjb25zdCB7IHZhbHVlIH0gPSBldnQudGFyZ2V0O1xuICAgIGlmICh2YWx1ZSA9PT0gJ1B1YmxpYycpIHtcbiAgICAgIHRoaXMuc2hvd0l0ZW1Ub1B1YmxpYygpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnNob3dJdGVtVG9GcmllbmRzT25seSgpO1xuICAgIH1cbiAgfTtcblxuICBzaG93SXRlbVRvRnJpZW5kc09ubHkgKCkge1xuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgdm90ZXJQb3NpdGlvbklzUHVibGljOiBmYWxzZSxcbiAgICB9KTtcblxuICAgIC8vIGNvbnNvbGUubG9nKFwiUG9zaXRpb25QdWJsaWNUb2dnbGUtc2hvd0l0ZW1Ub0ZyaWVuZHNPbmx5LCB0aGlzLnByb3BzLnR5cGU6XCIsIHRoaXMucHJvcHMudHlwZSk7XG4gICAgU3VwcG9ydEFjdGlvbnMudm90ZXJQb3NpdGlvblZpc2liaWxpdHlTYXZlKHRoaXMuc3RhdGUuYmFsbG90SXRlbVdlVm90ZUlkLCB0aGlzLnByb3BzLnR5cGUsICdGUklFTkRTX09OTFknKTtcbiAgICBvcGVuU25hY2tiYXIoeyBtZXNzYWdlOiAnUG9zaXRpb24gbm93IHZpc2libGUgdG8gZnJpZW5kcyBvbmx5IScgfSk7XG4gIH1cblxuICBzaG93SXRlbVRvUHVibGljICgpIHtcbiAgICBjb25zdCB7IGluVGVzdE1vZGUsIGlzU2lnbmVkSW4gfSA9IHRoaXMuc3RhdGU7XG5cbiAgICAvLyBjb25zb2xlLmxvZyhcIlBvc2l0aW9uUHVibGljVG9nZ2xlLXNob3dJdGVtVG9QdWJsaWMsIHRoaXMucHJvcHMudHlwZTpcIiwgdGhpcy5wcm9wcy50eXBlKTtcbiAgICBpZiAoaW5UZXN0TW9kZSkge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIHZvdGVyUG9zaXRpb25Jc1B1YmxpYzogdHJ1ZSxcbiAgICAgIH0pO1xuICAgICAgb3BlblNuYWNrYmFyKHsgbWVzc2FnZTogJ1RoaXMgcG9zaXRpb24gbm93IHZpc2libGUgdG8gYW55b25lIG9uIFdlIFZvdGUhJyB9KTtcbiAgICB9IGVsc2UgaWYgKGlzU2lnbmVkSW4pIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICB2b3RlclBvc2l0aW9uSXNQdWJsaWM6IHRydWUsXG4gICAgICB9KTtcbiAgICAgIFN1cHBvcnRBY3Rpb25zLnZvdGVyUG9zaXRpb25WaXNpYmlsaXR5U2F2ZSh0aGlzLnN0YXRlLmJhbGxvdEl0ZW1XZVZvdGVJZCwgdGhpcy5wcm9wcy50eXBlLCAnU0hPV19QVUJMSUMnKTtcbiAgICAgIGNvbnN0IHBvc2l0aW9uUHVibGljVG9nZ2xlTW9kYWxIYXNCZWVuU2hvd24gPSBWb3RlclN0b3JlLmdldEludGVyZmFjZUZsYWdTdGF0ZShWb3RlckNvbnN0YW50cy5QT1NJVElPTl9QVUJMSUNfTU9EQUxfU0hPV04pO1xuICAgICAgaWYgKCFwb3NpdGlvblB1YmxpY1RvZ2dsZU1vZGFsSGFzQmVlblNob3duKSB7XG4gICAgICAgIHRoaXMudG9nZ2xlUG9zaXRpb25QdWJsaWNIZWxwTW9kYWwoKTtcbiAgICAgICAgVm90ZXJBY3Rpb25zLnZvdGVyVXBkYXRlSW50ZXJmYWNlU3RhdHVzRmxhZ3MoVm90ZXJDb25zdGFudHMuUE9TSVRJT05fUFVCTElDX01PREFMX1NIT1dOKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG9wZW5TbmFja2Jhcih7IG1lc3NhZ2U6ICdUaGlzIHBvc2l0aW9uIG5vdyB2aXNpYmxlIHRvIGFueW9uZSBvbiBXZSBWb3RlIScgfSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMudG9nZ2xlUG9zaXRpb25QdWJsaWNIZWxwTW9kYWwoKTtcbiAgICB9XG4gIH1cblxuICB0b2dnbGVQb3NpdGlvblB1YmxpY0hlbHBNb2RhbCAoKSB7XG4gICAgY29uc3QgeyBzaG93UG9zaXRpb25QdWJsaWNIZWxwTW9kYWwgfSA9IHRoaXMuc3RhdGU7XG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBzaG93UG9zaXRpb25QdWJsaWNIZWxwTW9kYWw6ICFzaG93UG9zaXRpb25QdWJsaWNIZWxwTW9kYWwsXG4gICAgfSk7XG4gIH1cblxuICByZW5kZXIgKCkge1xuICAgIHJlbmRlckxvZygnUG9zaXRpb25QdWJsaWNUb2dnbGUnKTsgIC8vIFNldCBMT0dfUkVOREVSX0VWRU5UUyB0byBsb2cgYWxsIHJlbmRlcnNcbiAgICBjb25zdCB7IGNsYXNzZXMgfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3QgeyBpblRlc3RNb2RlLCBpc1NpZ25lZEluLCB2b3RlcldlVm90ZUlkIH0gPSB0aGlzLnN0YXRlO1xuICAgIGxldCB7IHZvdGVyUG9zaXRpb25Jc1B1YmxpYyB9ID0gdGhpcy5zdGF0ZTtcbiAgICBpZiAoIXZvdGVyV2VWb3RlSWQpIHtcbiAgICAgIHJldHVybiA8ZGl2IGNsYXNzTmFtZT1cInVuZGVmaW5lZC1wcm9wc1wiIC8+O1xuICAgIH1cblxuICAgIGxldCBvbkNoYW5nZTtcbiAgICBjb25zdCBfdGhpcyA9IHRoaXM7XG4gICAgaWYgKHZvdGVyUG9zaXRpb25Jc1B1YmxpYykge1xuICAgICAgb25DaGFuZ2UgPSAoKSA9PiB7XG4gICAgICAgIHZvdGVyUG9zaXRpb25Jc1B1YmxpYyA9IGZhbHNlO1xuXG4gICAgICAgIC8vIFRPRE8gU29tZWhvdyBjYXVzZSB0aGUgdG9vbHRpcCB0byB1cGRhdGUgaWYgaW5UZXN0TW9kZVxuICAgICAgICBpZiAoIWluVGVzdE1vZGUpIHtcbiAgICAgICAgICBfdGhpcy5zaG93SXRlbVRvRnJpZW5kc09ubHkoKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgb25DaGFuZ2UgPSAoKSA9PiB7XG4gICAgICAgIHZvdGVyUG9zaXRpb25Jc1B1YmxpYyA9IHRydWU7XG5cbiAgICAgICAgLy8gVE9ETyBTb21laG93IGNhdXNlIHRoZSB0b29sdGlwIHRvIHVwZGF0ZSBpZiBpblRlc3RNb2RlXG4gICAgICAgIGlmICghaW5UZXN0TW9kZSkge1xuICAgICAgICAgIF90aGlzLnNob3dJdGVtVG9QdWJsaWMoKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyB0aGlzIG9uS2V5RG93biBmdW5jdGlvbiBpcyBmb3IgYWNjZXNzaWJpbGl0eTogdGhlIHBhcmVudCBkaXYgb2YgdGhlIHRvZ2dsZVxuICAgIC8vIGhhcyBhIHRhYiBpbmRleCBzbyB0aGF0IHVzZXJzIGNhbiB1c2UgdGFiIGtleSB0byBzZWxlY3QgdGhlIHRvZ2dsZSwgYW5kIHRoZW5cbiAgICAvLyBwcmVzcyBlaXRoZXIgc3BhY2Ugb3IgZW50ZXIgKGtleSBjb2RlcyAzMiBhbmQgMTMsIHJlc3BlY3RpdmVseSkgdG8gdG9nZ2xlXG4gICAgY29uc3Qgb25LZXlEb3duID0gKGUpID0+IHtcbiAgICAgIGNvbnN0IGVudGVyQW5kU3BhY2VLZXlDb2RlcyA9IFsxMywgMzJdO1xuICAgICAgaWYgKGVudGVyQW5kU3BhY2VLZXlDb2Rlcy5pbmNsdWRlcyhlLmtleUNvZGUpKSB7XG4gICAgICAgIG9uQ2hhbmdlKCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIC8vIFRoaXMgbW9kYWwgaXMgc2hvd24gd2hlbiB0aGUgdXNlciBjbGlja3Mgb24gcHVibGljIHBvc2l0aW9uIHRvZ2dsZSBlaXRoZXIgd2hlbiBub3Qgc2lnbmVkIGluXG4gICAgLy8gb3IgZm9yIHRoZSBmaXJzdCB0aW1lIGFmdGVyIGJlaW5nIHNpZ25lZCBpbi5cbiAgICBjb25zdCBQb3NpdGlvblB1YmxpY1RvZ2dsZUhlbHBNb2RhbCA9IChcbiAgICAgIDxEaWFsb2dcbiAgICAgICAgY2xhc3Nlcz17eyBwYXBlcjogY2xhc3Nlcy5kaWFsb2dQYXBlciB9fVxuICAgICAgICBvcGVuPXt0aGlzLnN0YXRlLnNob3dQb3NpdGlvblB1YmxpY0hlbHBNb2RhbH1cbiAgICAgICAgb25DbG9zZT17KCkgPT4geyB0aGlzLnRvZ2dsZVBvc2l0aW9uUHVibGljSGVscE1vZGFsKCk7IH19XG4gICAgICA+XG4gICAgICAgIDxEaWFsb2dUaXRsZT5cbiAgICAgICAgICA8VHlwb2dyYXBoeSB2YXJpYW50PVwiaDZcIiBjbGFzc05hbWU9XCJ0ZXh0LWNlbnRlclwiPk1ha2UgWW91ciBFbmRvcnNlbWVudHMgUHVibGljPC9UeXBvZ3JhcGh5PlxuICAgICAgICAgIDxJY29uQnV0dG9uXG4gICAgICAgICAgICBhcmlhLWxhYmVsPVwiQ2xvc2VcIlxuICAgICAgICAgICAgY2xhc3Nlcz17eyByb290OiBjbGFzc2VzLmNsb3NlQnV0dG9uIH19XG4gICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiB7IHRoaXMudG9nZ2xlUG9zaXRpb25QdWJsaWNIZWxwTW9kYWwoKTsgfX1cbiAgICAgICAgICAgIGlkPVwicHJvZmlsZUNsb3NlUG9zaXRpb25QdWJsaWNUb2dnbGVcIlxuICAgICAgICAgID5cbiAgICAgICAgICAgIDxDbG9zZUljb24gLz5cbiAgICAgICAgICA8L0ljb25CdXR0b24+XG4gICAgICAgIDwvRGlhbG9nVGl0bGU+XG4gICAgICAgIDxEaWFsb2dDb250ZW50PlxuICAgICAgICAgIDxzZWN0aW9uIGNsYXNzTmFtZT1cImNhcmRcIj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidGV4dC1jZW50ZXJcIj5cbiAgICAgICAgICAgICAge2lzU2lnbmVkSW4gPyAoXG4gICAgICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidS1mMlwiPllvdSBoYXZlIGp1c3QgbWFkZSB5b3VyIHBvc2l0aW9uIHZpc2libGUgdG8gYW55b25lIG9uIFdlIFZvdGUuPC9kaXY+XG4gICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInUtZjRcIj5JZiB5b3UgZG8gTk9UIHdhbnQgdG8gc2hhcmUgeW91ciBwb3NpdGlvbiBwdWJsaWNseSwgY2xpY2sgdGhlIHRvZ2dsZSBhZ2FpbiB0byByZXN0cmljdCB2aXNpYmlsaXR5IHRvIFdlIFZvdGUgZnJpZW5kcyBvbmx5LjwvZGl2PlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICApIDogKFxuICAgICAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgICA8U2V0dGluZ3NBY2NvdW50IC8+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAgIDxiciAvPlxuICAgICAgICAgICAgICBXZSBWb3RlIG1ha2VzIGl0IGVhc3kgdG8gc2hhcmUgeW91ciB2aWV3cyBlaXRoZXIgcHVibGljbHksIG9yIHByaXZhdGVseSB3aXRoIHlvdXIgV2UgVm90ZSBmcmllbmRzLlxuICAgICAgICAgICAgICA8YnIgLz5cbiAgICAgICAgICAgICAgPGJyIC8+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8L3NlY3Rpb24+XG4gICAgICAgIDwvRGlhbG9nQ29udGVudD5cbiAgICAgIDwvRGlhbG9nPlxuICAgICk7XG5cbiAgICByZXR1cm4gKFxuICAgICAgPFdyYXBwZXIgY2xhc3NOYW1lPXt0aGlzLnByb3BzLmNsYXNzTmFtZX0+XG4gICAgICAgIHsgdGhpcy5zdGF0ZS5zaG93UG9zaXRpb25QdWJsaWNIZWxwTW9kYWwgPyBQb3NpdGlvblB1YmxpY1RvZ2dsZUhlbHBNb2RhbCA6IG51bGwgfVxuICAgICAgICA8UHVibGljVG9nZ2xlIG9uS2V5RG93bj17b25LZXlEb3dufT5cbiAgICAgICAgICA8Rm9ybUNvbnRyb2wgY2xhc3Nlcz17eyByb290OiBjbGFzc2VzLmZvcm1Db250cm9sIH19PlxuICAgICAgICAgICAgPFJhZGlvR3JvdXBcbiAgICAgICAgICAgICAgb25DaGFuZ2U9e3RoaXMuaGFuZGxlUG9zaXRpb25Ub2dnbGV9XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIDxSYWRpb0l0ZW0+XG4gICAgICAgICAgICAgICAgPEZvcm1Db250cm9sTGFiZWxcbiAgICAgICAgICAgICAgICAgIGNsYXNzZXM9e3sgbGFiZWw6IGNsYXNzZXMucmFkaW9MYWJlbCB9fVxuICAgICAgICAgICAgICAgICAgaWQ9e2Bwb3NpdGlvblB1YmxpY1RvZ2dsZUZyaWVuZHNPbmx5LSR7dGhpcy5wcm9wcy5leHRlcm5hbFVuaXF1ZUlkfWB9XG4gICAgICAgICAgICAgICAgICB2YWx1ZT1cIkZyaWVuZHMgT25seVwiXG4gICAgICAgICAgICAgICAgICBsYWJlbD1cIkZyaWVuZHMgT25seVwiXG4gICAgICAgICAgICAgICAgICBsYWJlbFBsYWNlbWVudD1cImVuZFwiXG4gICAgICAgICAgICAgICAgICBjb250cm9sPXtcbiAgICAgICAgICAgICAgICAgICAgKFxuICAgICAgICAgICAgICAgICAgICAgIDxSYWRpb1xuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3Nlcz17eyBjb2xvclByaW1hcnk6IGNsYXNzZXMucmFkaW9QcmltYXJ5IH19XG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xvcj1cInByaW1hcnlcIlxuICAgICAgICAgICAgICAgICAgICAgICAgY2hlY2tlZD17dm90ZXJQb3NpdGlvbklzUHVibGljID09PSBmYWxzZX1cbiAgICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgPC9SYWRpb0l0ZW0+XG4gICAgICAgICAgICAgIDxSYWRpb0l0ZW0+XG4gICAgICAgICAgICAgICAgPEZvcm1Db250cm9sTGFiZWxcbiAgICAgICAgICAgICAgICAgIGlkPXtgcG9zaXRpb25QdWJsaWNUb2dnbGVQdWJsaWMtJHt0aGlzLnByb3BzLmV4dGVybmFsVW5pcXVlSWR9YH1cbiAgICAgICAgICAgICAgICAgIGNsYXNzZXM9e3sgbGFiZWw6IGNsYXNzZXMucmFkaW9MYWJlbCB9fVxuICAgICAgICAgICAgICAgICAgdmFsdWU9XCJQdWJsaWNcIlxuICAgICAgICAgICAgICAgICAgbGFiZWw9XCJQdWJsaWNcIlxuICAgICAgICAgICAgICAgICAgbGFiZWxQbGFjZW1lbnQ9XCJlbmRcIlxuICAgICAgICAgICAgICAgICAgY29udHJvbD17XG4gICAgICAgICAgICAgICAgICAgIChcbiAgICAgICAgICAgICAgICAgICAgICA8UmFkaW9cbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzZXM9e3sgY29sb3JQcmltYXJ5OiBjbGFzc2VzLnJhZGlvUHJpbWFyeSB9fVxuICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I9XCJwcmltYXJ5XCJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoZWNrZWQ9e3ZvdGVyUG9zaXRpb25Jc1B1YmxpYyA9PT0gdHJ1ZX1cbiAgICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgPC9SYWRpb0l0ZW0+XG4gICAgICAgICAgICA8L1JhZGlvR3JvdXA+XG4gICAgICAgICAgPC9Gb3JtQ29udHJvbD5cbiAgICAgICAgPC9QdWJsaWNUb2dnbGU+XG4gICAgICA8L1dyYXBwZXI+XG4gICAgKTtcbiAgfVxufVxuXG5jb25zdCBzdHlsZXMgPSB0aGVtZSA9PiAoe1xuICByYWRpb1ByaW1hcnk6IHtcbiAgICBwYWRkaW5nOiAnLjFyZW0nLFxuICAgIG1hcmdpbjogJy4xcmVtIC4xcmVtIC42cmVtIC42cmVtJyxcbiAgICBbdGhlbWUuYnJlYWtwb2ludHMuZG93bignbWQnKV06IHtcbiAgICAgIG1hcmdpbkxlZnQ6IDAsXG4gICAgfSxcbiAgfSxcbiAgZGlhbG9nUGFwZXI6IHtcbiAgICBtYXJnaW5Ub3A6IGhhc0lQaG9uZU5vdGNoKCkgPyA2OCA6IDQ4LFxuICB9LFxuICByYWRpb0xhYmVsOiB7XG4gICAgZm9udFNpemU6ICcxNHB4JyxcbiAgICBib3R0b206ICc0cHgnLFxuICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgIFt0aGVtZS5icmVha3BvaW50cy5kb3duKCdzbScpXToge1xuICAgICAgZm9udFNpemU6ICcxMXB4JyxcbiAgICB9LFxuICB9LFxuICBmb3JtQ29udHJvbDoge1xuICAgIHdpZHRoOiAnMTAwJScsXG4gIH0sXG4gIGNsb3NlQnV0dG9uOiB7XG4gICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgcmlnaHQ6IGAke3RoZW1lLnNwYWNpbmcoMSl9cHhgLFxuICAgIHRvcDogYCR7dGhlbWUuc3BhY2luZygxKX1weGAsXG4gIH0sXG59KTtcblxuY29uc3QgV3JhcHBlciA9IHN0eWxlZC5kaXZgXG4gIG1hcmdpbi1sZWZ0OiBhdXRvO1xuICB3aWR0aDogZml0LWNvbnRlbnQ7XG5gO1xuXG5jb25zdCBQdWJsaWNUb2dnbGUgPSBzdHlsZWQuZGl2YFxuICBwYWRkaW5nLWxlZnQ6IDE1cHg7XG4gIEBtZWRpYSAobWF4LXdpZHRoOiAkeyh7IHRoZW1lIH0pID0+IHRoZW1lLmJyZWFrcG9pbnRzLm1kfSkge1xuICAgIHBhZGRpbmctdG9wOiA0cHg7XG4gICAgbWFyZ2luLWJvdHRvbTogMTBweDtcbiAgfVxuYDtcblxuY29uc3QgUmFkaW9JdGVtID0gc3R5bGVkLmRpdmBcbiAgQG1lZGlhIChtYXgtd2lkdGg6ICR7KHsgdGhlbWUgfSkgPT4gdGhlbWUuYnJlYWtwb2ludHMuc219KSB7XG4gICAgd2lkdGg6IDEwMCUgIWltcG9ydGFudDtcbiAgICBtaW4td2lkdGg6IDEwMCUgIWltcG9ydGFudDtcbiAgICBtYXJnaW4tYm90dG9tOiAtNnB4O1xuICB9XG5gO1xuXG5jb25zdCBSYWRpb0dyb3VwID0gc3R5bGVkLmRpdmBcbiAgd2lkdGg6IDEwMCU7XG4gIEBtZWRpYSAobWF4LXdpZHRoOiAkeyh7IHRoZW1lIH0pID0+IHRoZW1lLmJyZWFrcG9pbnRzLm1kfSkge1xuICAgIG1hcmdpbi1ib3R0b206IC0xMHB4O1xuICB9XG4gIEBtZWRpYSAobWluLXdpZHRoOiAkeyh7IHRoZW1lIH0pID0+IHRoZW1lLmJyZWFrcG9pbnRzLnNtfSkge1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgZmxleC1mbG93OiByb3cgbm93cmFwOztcbiAgfVxuYDtcblxuXG5leHBvcnQgZGVmYXVsdCB3aXRoU3R5bGVzKHN0eWxlcykoUG9zaXRpb25QdWJsaWNUb2dnbGUpO1xuIl19*/