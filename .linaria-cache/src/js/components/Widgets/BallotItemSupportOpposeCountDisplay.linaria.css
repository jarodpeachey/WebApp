.w1hy16m6{margin-top:.1rem;}
.devwgtc{margin-right:6px;}
.e6obaa0{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-flow:column;-ms-flex-flow:column;flex-flow:column;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;}
.elswxdh{color:#888;font-weight:500;font-size:10px;text-align:right;}
.e1xc18ub{max-width:25%;color:#888;text-align:right;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;max-width:100%;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-flow:row;-ms-flex-flow:row;flex-flow:row;padding-bottom:8px;margin-top:-4px;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;}
.e1ksracn{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-flow:row nowrap;-ms-flex-flow:row nowrap;flex-flow:row nowrap;font-size:12px;}
.e1rt8hq9{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-flow:row wrap;-ms-flex-flow:row wrap;flex-flow:row wrap;-webkit-box-pack:end;-webkit-justify-content:flex-end;-ms-flex-pack:end;justify-content:flex-end;}
.e9vhj0w{padding-top:4px;}
.n1je067a{background:var(--n1je067a-0);color:white;box-shadow:0 1px 3px 0 rgba(0,0,0,.2),0 1px 1px 0 rgba(0,0,0,.14),0 2px 1px -1px rgba(0,0,0,.12);display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;width:40px;height:40px;border-radius:5px;float:right;font-size:16px;font-weight:bold;}@media print{.n1je067a{border-width:1 px;border-style:solid;border-color:var(--n1je067a-0);}}
.n1ltps72{background:var(--n1ltps72-0);color:white;box-shadow:0 1px 3px 0 rgba(0,0,0,.2),0 1px 1px 0 rgba(0,0,0,.14),0 2px 1px -1px rgba(0,0,0,.12);display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;width:20px;height:20px;border-radius:5px;float:left;font-size:10px;font-weight:bold;}@media print{.n1ltps72{border-width:1 px;border-style:solid;border-color:var(--n1ltps72-0);}}
.v1hllg78{color:white;}@media print{.v1hllg78{color:#1fc06f;}}
.p1fca8ng{width:100%;height:100%;border-radius:3px;}
.p1d49ite{background:var(--p1d49ite-0);padding:4px 8px;min-height:35px;color:white;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-box-pack:start;-webkit-justify-content:flex-start;-ms-flex-pack:start;justify-content:flex-start;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;border-radius:4px;border-bottom-right-radius:0;border-bottom-left-radius:0;}
.p1g6cgi8{font-size:14px;font-weight:bold;margin-right:20px;}
.pcqrm2z{padding:8px;}
.rzns1yj{margin-top:6px;}
/*# sourceMappingURL=data:application/json;base64,*/