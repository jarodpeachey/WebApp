.w1jsvtkj{-webkit-var(--w1jsvtkj-0);-moz-var(--w1jsvtkj-0);-ms-var(--w1jsvtkj-0);var(--w1jsvtkj-0);}
.pgzax7b{width:auto;margin-left:auto;margin-top:auto;}@media(max-width:576px){.pgzax7b{height:28px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:flex-end;-webkit-box-align:flex-end;-ms-flex-align:flex-end;align-items:flex-end;}}
/*# sourceMappingURL=data:application/json;base64,*/