.w10zdaxc{overflow-x:hidden;width:100%;height:100%;position:relative;right:12px;bottom:8px;border-radius:3px;margin-left:12px;margin-top:8px;}
.cnvtfio{padding:8px;}
.b145hu6q{background:#f7f7f7;min-height:90.05px !important;display:block;width:100%;}
.l1944au0{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;position:relative;bottom:32px;}
.iyl9bjp *{border-radius:50px;}
.f1h4zuhp{width:125px;}
.mgphu1q{margin-top:-24px;}
.o7kvzrw{font-weight:bold;font-size:18px;color:var(--o7kvzrw-0);margin-bottom:4px;-webkit-text-decoration:none !important;text-decoration:none !important;}
.o14zx2a9{font-weight:500;font-size:14px;margin:0;padding:0;color:#ccc;}
.d1mxgo9i{margin-top:8px;color:#333 !important;font-weight:500 !important;font-size:12px !important;}
/*# sourceMappingURL=data:application/json;base64,*/