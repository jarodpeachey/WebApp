.r1oomf1j{margin:0 -8px;}
/*# sourceMappingURL=data:application/json;base64,{"version":3,"sources":["D:\\Jarod\\WeVote\\WebApp\\src\\js\\components\\Navigation\\BallotSummaryFooter.jsx"],"names":[".r1oomf1j"],"mappings":"AA2QMA","file":"D:\\Jarod\\WeVote\\WebApp\\src\\js\\components\\Navigation\\BallotSummaryFooter.jsx","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Ballot from '@material-ui/icons/Ballot';\nimport Typography from '@material-ui/core/Typography';\nimport { styled } from 'linaria/react';\nimport BallotStore from '../../stores/BallotStore';\nimport BallotSideBarLink from './BallotSideBarLink';\nimport { renderLog } from '../../utils/logging';\nimport BallotSummaryFooterItem from './BallotSummaryFooterItem';\n\nclass BallotSummaryFooter extends Component {\n  static propTypes = {\n    activeRaceItem: PropTypes.string,\n    ballotWithAllItemsByFilterType: PropTypes.array,\n    ballotItemLinkHasBeenClicked: PropTypes.func,\n    classes: PropTypes.object,\n    displayTitle: PropTypes.bool,\n    displaySubtitles: PropTypes.bool,\n    onClick: PropTypes.func,\n    pathname: PropTypes.string,\n    raceLevelFilterItemsInThisBallot: PropTypes.array,\n    setActiveRaceItem: PropTypes.func,\n  };\n\n  static defaultProps = {\n    pathname: '/ballot',\n  };\n\n  constructor (props) {\n    super(props);\n    this.state = {\n      componentDidMountFinished: false,\n      // expanded: undefined,\n    };\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  componentDidMount () {\n    const unsorted = BallotStore.ballot;\n    this.setState({\n      ballot: this._sortBallots(unsorted),\n      componentDidMountFinished: true,\n    });\n    this.ballotStoreListener = BallotStore.addListener(this.onBallotStoreChange.bind(this));\n  }\n\n  shouldComponentUpdate (nextProps, nextState) {\n    // This lifecycle method tells the component to NOT render if componentWillReceiveProps didn't see any changes\n    if (this.state.componentDidMountFinished === false) {\n      // console.log('shouldComponentUpdate: componentDidMountFinished === false');\n      return true;\n    }\n    if (this.state.ballot === undefined && nextState.ballot !== undefined) {\n      // console.log('shouldComponentUpdate: new ballot found');\n      return true;\n    }\n    if (this.state.ballot !== undefined && this.state.ballot.length !== nextState.ballot.length) {\n      // console.log('shouldComponentUpdate: changed this.props.ballot.length', this.state.ballot.length, ', nextState.ballot.length', nextState.ballot.length);\n      return true;\n    }\n    if (this.props.ballotWithAllItemsByFilterType.length !== nextProps.ballotWithAllItemsByFilterType.length) {\n      // console.log('shouldComponentUpdate: changed this.props.ballotWithAllItemsByFilterType.length', this.props.ballotWithAllItemsByFilterType.length, ', nextState.ballotWithAllItemsByFilterType.length', nextProps.ballotWithAllItemsByFilterType.length);\n      return true;\n    }\n    if (this.props.displayTitle !== nextProps.displayTitle) {\n      // console.log('shouldComponentUpdate: changed this.props.displayTitle', this.props.displayTitle, ', nextState.displayTitle', nextProps.displayTitle);\n      return true;\n    }\n    if (this.props.pathname !== nextProps.pathname) {\n      // console.log('shouldComponentUpdate: changed this.props.pathname', this.props.pathname, ', nextState.pathname', nextProps.pathname);\n      return true;\n    }\n    if (this.props.raceLevelFilterItemsInThisBallot !== nextProps.raceLevelFilterItemsInThisBallot) {\n      return true;\n    }\n    if (this.props.activeRaceItem !== nextProps.activeRaceItem) {\n      return true;\n    }\n    // console.log('shouldComponentUpdate return false');\n    return false;\n  }\n\n  componentWillUnmount () {\n    this.ballotStoreListener.remove();\n  }\n\n  onBallotStoreChange () {\n    const unsorted = BallotStore.ballot;\n    this.setState({\n      ballot: this._sortBallots(unsorted),\n    });\n  }\n\n  _sortBallots (unsorted) {\n    if (unsorted) {\n      // temporary array holds objects with position and sort-value\n      const mapped = unsorted.map((item, i) => ({ index: i, value: item }));\n\n      // sorting the mapped array based on local_ballot_order which came from the server\n      mapped.sort((a, b) => +(\n        parseInt(a.value.local_ballot_order, 10) >\n            parseInt(b.value.local_ballot_order, 10)\n      ) ||\n          +(\n            parseInt(a.value.local_ballot_order, 10) ===\n            parseInt(b.value.local_ballot_order, 10)\n          ) - 1);\n\n      const orderedArray = [];\n      // for (const element of mapped) {\n      //   orderedArray.push(element.value);\n      // }\n      for (let count = 0; count < mapped.length; count++) {\n        orderedArray.push(mapped[count].value);\n      }\n\n      return orderedArray;\n    } else {\n      return {};\n    }\n  }\n\n  handleClick () {\n    // Fullscreen mode won't pass an onClick function, since the BallotSummaryFooter does not go away after a click\n    if (this.props.onClick) {\n      this.props.onClick();\n    }\n  }\n\n  filteredBallotToRender (ballot, ballotWithAllItemIdsByFilterType, type, key) {\n    // console.log('BallotSummaryFooter, filteredBallotToRender');\n    const filteredBallot = ballot.filter((item) => {\n      if (item.kind_of_ballot_item === 'MEASURE') {\n        return type === 'Measure';\n      } else {\n        return type === item.race_office_level;\n      }\n    });\n\n    if (!filteredBallot.length) {\n      return null;\n    }\n\n    const filteredBallotListItems = filteredBallot.map((item, index) => {\n      if (\n        (item.kind_of_ballot_item === 'OFFICE' ||\n        item.kind_of_ballot_item === 'MEASURE') &&\n        index < 3\n      ) {\n        return (\n          <BallotSideBarLink\n            plainTextLink\n            url={this.renderUrl(item.we_vote_id, ballotWithAllItemIdsByFilterType)}\n            ballotItemLinkHasBeenClicked={this.props.ballotItemLinkHasBeenClicked}\n            label={item.ballot_item_display_name}\n            subtitle={item.measure_subtitle}\n            key={`ballot-summary-footer-${item.we_vote_id}`}\n            displaySubtitles={this.props.displaySubtitles}\n            id={`ballotSummaryFooterLink-${item.we_vote_id}`}\n            onClick={this.handleClick}\n          />\n        );\n      } else {\n        return <span key={`ballot-summary-footer-${item.we_vote_id}`} />;\n      }\n    });\n\n    return (\n      <div\n        key={key}\n        isOpen={this.props.activeRaceItem === type}\n        label={type}\n      >\n        <ul className=\"BallotItem__summary__list\">\n          {filteredBallotListItems}\n        </ul>\n      </div>\n    );\n  }\n\n  renderUrl (ballotItemWeVoteId) {\n    if (ballotItemWeVoteId.indexOf('meas') > -1) return `/measure/${ballotItemWeVoteId}/b/btdb/`;\n    return `/office/${ballotItemWeVoteId}/b/btdb/`;\n  }\n\n  render () {\n    renderLog('BallotSummaryFooter');  // Set LOG_RENDER_EVENTS to log all renders\n\n    // let turnedOnNPSInput = false;\n    // const BALLOT_ITEM_FILTER_TYPES = ['Federal', 'State', 'Measure', 'Local'];\n\n    const { ballot } = this.state;\n    const { classes, ballotWithAllItemsByFilterType, raceLevelFilterItemsInThisBallot } = this.props;\n    const BALLOT_ITEM_FILTER_TYPES = ['Federal', 'State', 'Measure', 'Local']; // Properly ordered\n    const raceLevelFilterItemsInThisBallotOrdered = [];\n    // Make the incoming raceLevelFilterItems match the standard order\n    if (raceLevelFilterItemsInThisBallot) {\n      for (let i = 0; i < BALLOT_ITEM_FILTER_TYPES.length; i++) {\n        if (raceLevelFilterItemsInThisBallot.findIndex(item => BALLOT_ITEM_FILTER_TYPES[i].toLowerCase() === item.toLowerCase()) !== -1 && BALLOT_ITEM_FILTER_TYPES[i].toLowerCase() !== this.props.activeRaceItem.toLowerCase()) {\n          raceLevelFilterItemsInThisBallotOrdered.push(BALLOT_ITEM_FILTER_TYPES[i]);\n        }\n      }\n    }\n    if (ballot && ballot.length && raceLevelFilterItemsInThisBallotOrdered && raceLevelFilterItemsInThisBallotOrdered.length > 1) {\n      const ballotWithAllItemIdsByFilterType = [];\n      ballotWithAllItemsByFilterType.forEach((itemByFilterType) => {\n        ballotWithAllItemIdsByFilterType.push(itemByFilterType.we_vote_id);\n      });\n      // console.log('BallotSummaryFooter, raceLevelFilterItemsInThisBallotOrdered:', raceLevelFilterItemsInThisBallotOrdered);\n      return (\n        <div className={classes.card}>\n          <div className={classes.cardBody}>\n            { this.props.displayTitle ? (\n              <>\n                <Typography variant=\"h2\" classes={{ root: classes.typography }}>\n                  <Ballot className={classes.icon} />\n                  Show More Ballot Items\n                </Typography>\n              </>\n            ) :\n              null\n            }\n            <Row className=\"row\">\n              <BallotSummaryFooterItem setActiveRaceItem={type => this.props.setActiveRaceItem(type)} activeRaceItem={this.props.activeRaceItem}>\n                {raceLevelFilterItemsInThisBallotOrdered.map((type, key) => this.filteredBallotToRender(ballot, ballotWithAllItemIdsByFilterType, type, key))}\n              </BallotSummaryFooterItem>\n            </Row>\n          </div>\n        </div>\n      );\n    } else {\n      return <div />;\n    }\n  }\n}\n\nconst styles = theme => ({\n  typography: {\n    padding: '16px 0',\n    fontWeight: 600,\n    fontSize: 18,\n    [theme.breakpoints.down('lg')]: {\n      padding: '12px 0',\n    },\n    marginBottom: 24,\n    display: 'flex',\n    alignItems: 'center',\n  },\n  card: {\n    backgroundColor: '#fff',\n    borderRadius: '0px',\n    boxShadow: '0 1px 3px 0 rgba(0, 0, 0, 0.2), 0 1px 1px 0 rgba(0, 0, 0, 0.14), 0 2px 1px -1px rgba(0, 0, 0, 0.12)',\n    marginBottom: '16px',\n    overflowY: 'none',\n    border: 'none',\n  },\n  cardBody: {\n    padding: '20px',\n  },\n  icon: {\n    marginRight: 12,\n    color: '#2E3C5D',\n    fontSize: 32,\n  },\n});\n\nconst Row = styled.div`\n  margin: 0 -8px;\n`;\n\nexport default withStyles(styles)(BallotSummaryFooter);\n"]}*/