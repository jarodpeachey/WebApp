.dfjvz91{display:inherit;}@media (max-width:var(--dfjvz91-0)){.dfjvz91{display:none;}}
.m1viys3u{display:inherit;}@media (min-width:var(--m1viys3u-0)){.m1viys3u{display:none;}}
/*# sourceMappingURL=data:application/json;base64,{"version":3,"sources":["D:\\Jarod\\WeVote\\WebApp\\src\\js\\components\\Navigation\\WelcomeAppbar.jsx"],"names":[".dfjvz91",".m1viys3u"],"mappings":"AAudMA;AAOAC","file":"D:\\Jarod\\WeVote\\WebApp\\src\\js\\components\\Navigation\\WelcomeAppbar.jsx","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { styled } from 'linaria/react';\nimport AccountCircleIcon from '@material-ui/icons/AccountCircle';\nimport Appbar from '@material-ui/core/AppBar/index';\nimport Toolbar from '@material-ui/core/Toolbar/index';\nimport Button from '@material-ui/core/Button/index';\nimport IconButton from '@material-ui/core/IconButton/index';\nimport { withStyles } from '@material-ui/core/styles/index';\nimport CloseIcon from '@material-ui/icons/Close';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport { renderLog } from '../../utils/logging';\nimport cookies from '../../utils/cookies';\nimport Navigation, { LogoContainer, Divider, NavLink, MobileNavigationMenu, MobileNavDivider, NavRow } from '../Welcome/Navigation';\nimport HeaderBarLogo from './HeaderBarLogo';\nimport { cordovaWelcomeAppToolbarTop } from '../../utils/cordovaOffsets';\nimport { historyPush } from '../../utils/cordovaUtils';\nimport AppStore from '../../stores/AppStore';\nimport AppActions from '../../actions/AppActions';\nimport HeaderBarProfilePopUp from './HeaderBarProfilePopUp';\nimport OrganizationActions from '../../actions/OrganizationActions';\n// eslint-disable-next-line import/no-cycle\nimport PaidAccountUpgradeModal from '../Settings/PaidAccountUpgradeModal';\nimport SignInModal from '../Widgets/SignInModal';\nimport VoterGuideActions from '../../actions/VoterGuideActions';\nimport VoterStore from '../../stores/VoterStore';\nimport VoterSessionActions from '../../actions/VoterSessionActions';\n\nclass WelcomeAppbar extends Component {\n  static propTypes = {\n    classes: PropTypes.object,\n    pathname: PropTypes.string,\n  };\n\n  constructor (props) {\n    super(props);\n    this.state = {\n      paidAccountUpgradeMode: '',\n      profilePopUpOpen: false,\n      showMobileNavigationMenu: false,\n      showPaidAccountUpgradeModal: false,\n      showSignInModal: AppStore.showSignInModal(),\n    };\n    this.closePaidAccountUpgradeModal = this.closePaidAccountUpgradeModal.bind(this);\n  }\n\n  componentDidMount () {\n    this.onVoterStoreChange();\n    this.appStoreListener = AppStore.addListener(this.onAppStoreChange.bind(this));\n    this.voterStoreListener = VoterStore.addListener(this.onVoterStoreChange.bind(this));\n  }\n\n  shouldComponentUpdate (nextProps, nextState) {\n    if (this.state.linkedOrganizationWeVoteId !== nextState.linkedOrganizationWeVoteId) {\n      // console.log('this.state.linkedOrganizationWeVoteId', this.state.linkedOrganizationWeVoteId, ', nextState.linkedOrganizationWeVoteId', nextState.linkedOrganizationWeVoteId);\n      return true;\n    }\n    if (this.state.paidAccountUpgradeMode !== nextState.paidAccountUpgradeMode) {\n      // console.log('this.state.paidAccountUpgradeMode', this.state.paidAccountUpgradeMode, ', nextState.paidAccountUpgradeMode', nextState.paidAccountUpgradeMode);\n      return true;\n    }\n    if (this.state.showPaidAccountUpgradeModal !== nextState.showPaidAccountUpgradeModal) {\n      // console.log('this.state.showPaidAccountUpgradeModal', this.state.showPaidAccountUpgradeModal, ', nextState.showPaidAccountUpgradeModal', nextState.showPaidAccountUpgradeModal);\n      return true;\n    }\n    if (this.state.showMobileNavigationMenu !== nextState.showMobileNavigationMenu) {\n      // console.log('this.state.showMobileNavigationMenu', this.state.showMobileNavigationMenu, ', nextState.showMobileNavigationMenu', nextState.showMobileNavigationMenu);\n      return true;\n    }\n    if (this.state.showSignInModal !== nextState.showSignInModal) {\n      // console.log('this.state.showSignInModal', this.state.showSignInModal, ', nextState.showSignInModal', nextState.showSignInModal);\n      return true;\n    }\n    if (this.state.profilePopUpOpen !== nextState.profilePopUpOpen) {\n      // console.log('this.state.profilePopUpOpen', this.state.profilePopUpOpen, ', nextState.profilePopUpOpen', nextState.profilePopUpOpen);\n      return true;\n    }\n    if (this.state.voterIsSignedIn !== nextState.voterIsSignedIn) {\n      // console.log('this.state.voterIsSignedIn', this.state.voterIsSignedIn, ', nextState.voterIsSignedIn', nextState.voterIsSignedIn);\n      return true;\n    }\n    if (this.state.voterPhotoUrlMedium !== nextState.voterPhotoUrlMedium) {\n      // console.log('this.state.voterPhotoUrlMedium', this.state.voterPhotoUrlMedium, ', nextState.voterPhotoUrlMedium', nextState.voterPhotoUrlMedium);\n      return true;\n    }\n    if (this.props.pathname !== nextProps.pathname) {\n      // console.log('this.state.pathname', this.state.pathname, ', nextState.pathname', nextState.pathname);\n      return true;\n    }\n    return false;\n  }\n\n  componentWillUnmount () {\n    this.appStoreListener.remove();\n    this.voterStoreListener.remove();\n  }\n\n  onAppStoreChange () {\n    const paidAccountUpgradeMode = AppStore.showPaidAccountUpgradeModal();\n    // console.log('HeaderBar paidAccountUpgradeMode:', paidAccountUpgradeMode);\n    const showPaidAccountUpgradeModal = paidAccountUpgradeMode && paidAccountUpgradeMode !== '';\n    this.setState({\n      paidAccountUpgradeMode,\n      showPaidAccountUpgradeModal,\n      showSignInModal: AppStore.showSignInModal(),\n    });\n  }\n\n  onVoterStoreChange () {\n    const voter = VoterStore.getVoter();\n    const { linked_organization_we_vote_id: linkedOrganizationWeVoteId, is_signed_in: voterIsSignedIn, voter_photo_url_medium: voterPhotoUrlMedium } = voter;\n    this.setState({\n      linkedOrganizationWeVoteId,\n      voter,\n      voterIsSignedIn,\n      voterPhotoUrlMedium,\n    });\n  }\n\n  handleShowMobileNavigation = (show) => {\n    if (show) {\n      // If the voter opens the mobile drop-down, set the sign_in_start_full_url\n      cookies.removeItem('sign_in_start_full_url', '/');\n      cookies.removeItem('sign_in_start_full_url', '/', 'wevote.us');\n      AppActions.storeSignInStartFullUrl();\n    }\n    this.setState({ showMobileNavigationMenu: show });\n    if (show) {\n      document.querySelector('body').style.overflow = 'hidden';\n      return;\n    }\n    document.querySelector('body').style.overflow = '';\n  }\n\n  handleToPageFromMobileNav = (destination) => {\n    this.handleShowMobileNavigation(false);\n    historyPush(destination);\n  }\n\n  handleSignInFromMobileNav = () => {\n    this.handleShowMobileNavigation(false);\n    this.toggleSignInModal();\n  }\n\n  hideProfilePopUp = () => {\n    this.setState({ profilePopUpOpen: false });\n  }\n\n  signOutAndHideProfilePopUp = () => {\n    this.handleShowMobileNavigation(false);\n    VoterSessionActions.voterSignOut();\n    this.setState({ profilePopUpOpen: false });\n  }\n\n  toggleProfilePopUp = () => {\n    const { profilePopUpOpen } = this.state;\n    this.setState({ profilePopUpOpen: !profilePopUpOpen });\n  }\n\n  toggleSignInModal = () => {\n    const { showSignInModal } = this.state;\n    AppActions.setShowSignInModal(!showSignInModal);\n  }\n\n  transitionToYourVoterGuide = () => {\n    // Positions for this organization, for this voter/election\n    const { linkedOrganizationWeVoteId } = this.state;\n    OrganizationActions.positionListForOpinionMaker(linkedOrganizationWeVoteId, true);\n\n    // Positions for this organization, NOT including for this voter / election\n    OrganizationActions.positionListForOpinionMaker(linkedOrganizationWeVoteId, false, true);\n    OrganizationActions.organizationsFollowedRetrieve();\n    VoterGuideActions.voterGuideFollowersRetrieve(linkedOrganizationWeVoteId);\n    VoterGuideActions.voterGuidesFollowedByOrganizationRetrieve(linkedOrganizationWeVoteId);\n    this.setState({ profilePopUpOpen: false });\n  };\n\n  closePaidAccountUpgradeModal () {\n    AppActions.setShowPaidAccountUpgradeModal(false);\n  }\n\n  closeSignInModal () {\n    AppActions.setShowSignInModal(false);\n  }\n\n  render () {\n    renderLog('WelcomeAppbar');  // Set LOG_RENDER_EVENTS to log all renders\n    const { classes, pathname } = this.props;\n    const { paidAccountUpgradeMode, showMobileNavigationMenu, showPaidAccountUpgradeModal, showSignInModal, voterIsSignedIn, voterPhotoUrlMedium } = this.state;\n    let showWelcomeForVoters = false;\n    let showWelcomeForOrganizations = false;\n    let showWelcomeForCampaigns = false;\n    let showForCampaignsDesktop = false;\n    let showForOrganizations = false;\n    let showForOrganizationsDesktop = false;\n    let showForVoters = false;\n    let showHowItWorksForCampaigns = false;\n    let showHowItWorksForOrganizations = false;\n    let showHowItWorksForVoters = false;\n    if (String(pathname) === '/how' || String(pathname) === '/how/for-voters') {\n      showWelcomeForVoters = true;\n    } else if (String(pathname) === '/how/for-organizations') {\n      showWelcomeForOrganizations = true;\n    } else if (String(pathname) === '/how/for-campaigns') {\n      showWelcomeForCampaigns = true;\n    }\n    if (String(pathname) === '/welcome') {\n      showForOrganizations = true;\n    }\n    if (!pathname.startsWith('/how') &&\n      String(pathname) !== '/welcome' &&\n      String(pathname) !== '/more/credits' &&\n      !pathname.startsWith('/more/donate') &&\n      !pathname.startsWith('/more/pricing')) {\n      showForVoters = true;\n    }\n    if (!pathname.startsWith('/how') &&\n      (String(pathname) === '/for-campaigns' ||\n        String(pathname) === '/more/about' ||\n        String(pathname) === '/more/credits' ||\n        pathname.startsWith('/more/donate') ||\n        pathname.startsWith('/more/pricing'))) {\n      showForOrganizationsDesktop = true;\n    }\n    if (!pathname.startsWith('/how') &&\n      (String(pathname) === '/welcome' ||\n        String(pathname) === '/for-organizations' ||\n        String(pathname) === '/more/credits' ||\n        pathname.startsWith('/more/donate') ||\n        pathname.startsWith('/more/pricing'))) {\n      showForCampaignsDesktop = true;\n    }\n    if (String(pathname) === '/for-campaigns') {\n      showHowItWorksForCampaigns = true;\n    }\n    if (String(pathname) === '/for-organizations') {\n      showHowItWorksForOrganizations = true;\n    }\n    if (String(pathname) === '/welcome' || String(pathname) === '/more/about') {\n      showHowItWorksForVoters = true;\n    }\n    return (\n      <Appbar position=\"relative\" classes={{ root: classes.appBarRoot }}>\n        <Toolbar classes={{ root: classes.toolbar }} disableGutters style={{ top: cordovaWelcomeAppToolbarTop() }}>\n          <LogoContainer>\n            <HeaderBarLogo light />\n          </LogoContainer>\n          <Navigation>\n            <DesktopView>\n              {showWelcomeForVoters &&\n                <NavLink id=\"welcomePageLink\" to=\"/welcome\">Welcome</NavLink>\n              }\n              {showWelcomeForOrganizations &&\n                <NavLink id=\"welcomePageLink\" to=\"/for-organizations\">Welcome</NavLink>\n              }\n              {showWelcomeForCampaigns &&\n                <NavLink id=\"welcomePageLink\" to=\"/for-campaigns\">Welcome</NavLink>\n              }\n              {/* Don't show 'For Organizations' or 'For Voters' when on How It Works page */}\n              {showForOrganizations &&\n                <NavLink id=\"welcomeForOrganizations\" to=\"/for-organizations\">For Organizations</NavLink>\n              }\n              {showForVoters &&\n                <NavLink id=\"welcomeForVoters\" to=\"/welcome\">For Voters</NavLink>\n              }\n              {/* Don't show 'For Organizations' or 'For Campaigns' when on How It Works page */}\n              { (showWelcomeForVoters || showWelcomeForOrganizations || showWelcomeForCampaigns || showForOrganizations || showForVoters) &&\n                <Divider />\n              }\n              { showForOrganizationsDesktop &&\n                <NavLink id=\"welcomeForOrganizations\" to=\"/for-organizations\">For Organizations</NavLink>\n              }\n              { showForOrganizationsDesktop && showForCampaignsDesktop &&\n                <Divider />\n              }\n              { showForCampaignsDesktop &&\n                <NavLink id=\"welcomeForCampaigns\" to=\"/for-campaigns\">For Campaigns</NavLink>\n              }\n              {/* Turn off How It Works link on that page */}\n              { (showForOrganizationsDesktop || showForCampaignsDesktop) &&\n                <Divider />\n              }\n              {/* Change the How It Works link depending on which welcome page you are on */}\n              { showHowItWorksForVoters &&\n                <NavLink id=\"welcomeHowItWorks\" to=\"/how/for-voters\">How It Works</NavLink>\n              }\n              { showHowItWorksForCampaigns &&\n                <NavLink id=\"welcomeHowItWorks\" to=\"/how/for-campaigns\">How It Works</NavLink>\n              }\n              { showHowItWorksForOrganizations &&\n                <NavLink id=\"welcomeHowItWorks\" to=\"/how/for-organizations\">How It Works</NavLink>\n              }\n              { (showHowItWorksForVoters || showHowItWorksForCampaigns || showHowItWorksForOrganizations) &&\n                <Divider />\n              }\n              <NavLink id=\"welcomeYourBallot\" to=\"/ballot\">Your Ballot</NavLink>\n              <Divider />\n              {!voterIsSignedIn && <NavLink id=\"welcomeSignIn\" to=\"\" onClick={() => this.toggleSignInModal()}>Sign In</NavLink> }\n              {voterIsSignedIn &&\n              (\n                <div>\n                  {voterPhotoUrlMedium ? (\n                    <div\n                      id=\"profileAvatarHeaderBar\"\n                      className=\"header-nav__avatar-container\"\n                      onClick={this.toggleProfilePopUp}\n                    >\n                      <img\n                        className=\"header-nav__avatar\"\n                        src={voterPhotoUrlMedium}\n                        height={34}\n                        width={34}\n                        alt=\"generic avatar\"\n                      />\n                    </div>\n                  ) : (\n                    <div>\n                      <IconButton\n                        classes={{ root: classes.iconButtonRoot }}\n                        id=\"profileAvatarHeaderBar\"\n                        onClick={this.toggleProfilePopUp}\n                      >\n                        <AccountCircleIcon />\n                      </IconButton>\n                    </div>\n                  )\n                  }\n                  {this.state.profilePopUpOpen && voterIsSignedIn && (\n                    <HeaderBarProfilePopUp\n                      onClick={this.toggleProfilePopUp}\n                      hideProfilePopUp={this.hideProfilePopUp}\n                      profilePopUpOpen={this.state.profilePopUpOpen}\n                      signOutAndHideProfilePopUp={this.signOutAndHideProfilePopUp}\n                      toggleProfilePopUp={this.toggleProfilePopUp}\n                      toggleSignInModal={this.toggleSignInModal}\n                      transitionToYourVoterGuide={this.transitionToYourVoterGuide}\n                      voter={this.state.voter}\n                      weVoteBrandingOff={this.state.we_vote_branding_off}\n                    />\n                  )}\n                </div>\n              )\n              }\n            </DesktopView>\n            <MobileTabletView>\n              <NavLink id=\"welcomeYourBallotMobile\" to=\"/ballot\">Your Ballot</NavLink>\n              <IconButton\n                classes={{ root: classes.iconButton }}\n                id=\"profileAvatarHeaderBar\"\n                onClick={() => this.handleShowMobileNavigation(true)}\n              >\n                <MenuIcon />\n              </IconButton>\n              {\n                showMobileNavigationMenu && (\n                  <MobileNavigationMenu>\n                    <NavRow>\n                      <CloseIcon\n                        classes={{ root: classes.navClose }}\n                        onClick={() => this.handleShowMobileNavigation(false)}\n                      />\n                    </NavRow>\n                    <MobileNavDivider />\n                    <NavRow>\n                      <NavLink id=\"welcomeForVotersMobile\" onClick={() => this.handleToPageFromMobileNav('/welcome')} to=\"\">For Voters</NavLink>\n                    </NavRow>\n                    <MobileNavDivider />\n                    <NavRow>\n                      <NavLink id=\"welcomeForOrganizationsMobile\" onClick={() => this.handleToPageFromMobileNav('/for-organizations')} to=\"\">For Organizations</NavLink>\n                    </NavRow>\n                    <MobileNavDivider />\n                    <NavRow>\n                      <NavLink id=\"welcomeForCampaignsMobile\" onClick={() => this.handleToPageFromMobileNav('/for-campaigns')} to=\"\">For Campaigns</NavLink>\n                    </NavRow>\n                    <MobileNavDivider />\n                    <NavRow>\n                      <NavLink id=\"welcomeHowItWorksMobile\" onClick={() => this.handleToPageFromMobileNav('/how')} to=\"\">How It Works</NavLink>\n                    </NavRow>\n                    <MobileNavDivider />\n                    <NavRow>\n                      <Button\n                        variant=\"outlined\"\n                        classes={{ root: classes.navButtonOutlined }}\n                        id=\"welcomeYourBallotMobile\"\n                        onClick={() => this.handleToPageFromMobileNav('/ballot')}\n                      >\n                        Your Ballot\n                      </Button>\n                      { voterIsSignedIn ?\n                        (\n                          <Button\n                            variant=\"outlined\"\n                            classes={{ root: classes.navButtonOutlined }}\n                            id=\"welcomeSignOutMobile\"\n                            onClick={() => this.signOutAndHideProfilePopUp()}\n                          >\n                            Sign Out\n                          </Button>\n                        ) :\n                        (\n                          <Button\n                            variant=\"outlined\"\n                            classes={{ root: classes.navButtonOutlined }}\n                            id=\"welcomeSignInMobile\"\n                            onClick={() => this.handleSignInFromMobileNav()}\n                          >\n                            Sign In\n                          </Button>\n                        )\n                      }\n                    </NavRow>\n                  </MobileNavigationMenu>\n                )\n              }\n            </MobileTabletView>\n          </Navigation>\n        </Toolbar>\n        {showSignInModal && (\n          <SignInModal\n            show={showSignInModal}\n            closeFunction={this.closeSignInModal}\n          />\n        )}\n        {showPaidAccountUpgradeModal && (\n          <PaidAccountUpgradeModal\n            initialPaidAccountProcessStep=\"payForPlan\"\n            initialPricingPlan={paidAccountUpgradeMode}\n            pathname={pathname}\n            show={showPaidAccountUpgradeModal}\n            toggleFunction={this.closePaidAccountUpgradeModal}\n          />\n        )}\n      </Appbar>\n    );\n  }\n}\n\nconst styles = ({\n  appBarRoot: {\n    background: 'transparent',\n    alignItems: 'center',\n    boxShadow: 'none',\n  },\n  toolbar: {\n    width: 960,\n    maxWidth: '95%',\n    justifyContent: 'space-between',\n    borderBottom: '2px solid rgba(255, 255, 255, 0.1)',\n  },\n  iconButton: {\n    color: 'white',\n  },\n  navButtonOutlined: {\n    height: 32,\n    borderRadius: 32,\n    color: 'white',\n    border: '1px solid white',\n    marginBottom: '1em',\n    fontWeight: '300',\n    width: '47%',\n    fontSize: 12,\n    padding: '5px 0',\n    marginTop: 8,\n  },\n  navClose: {\n    position: 'fixed',\n    right: 16,\n    cursor: 'pointer',\n  },\n});\n\nconst DesktopView = styled.div`\n  display: inherit;\n  @media (max-width: ${({ theme }) => theme.breakpoints.lg}) {\n    display: none;\n  }\n`;\n\nconst MobileTabletView = styled.div`\n  display: inherit;\n  @media (min-width: ${({ theme }) => theme.breakpoints.lg}) {\n    display: none;\n  }\n`;\n\nexport default withStyles(styles)(WelcomeAppbar);\n"]}*/