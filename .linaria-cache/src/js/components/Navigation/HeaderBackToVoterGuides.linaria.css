.v1w4dxa2{-webkit-align-items:left;-webkit-box-align:left;-ms-flex-align:left;align-items:left;margin-left:30px;width:100%;}
.e1xcjccz{-webkit-align-items:left;-webkit-box-align:left;-ms-flex-align:left;align-items:left;margin-left:30px;width:100%;}
/*# sourceMappingURL=data:application/json;base64,*/