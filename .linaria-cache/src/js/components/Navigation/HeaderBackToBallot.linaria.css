.olk5w4j{margin-left:30px;}
/*# sourceMappingURL=data:application/json;base64,{"version":3,"sources":["D:\\Jarod\\WeVote\\WebApp\\src\\js\\components\\Navigation\\HeaderBackToBallot.jsx"],"names":[".olk5w4j"],"mappings":"AA6mBMA","file":"D:\\Jarod\\WeVote\\WebApp\\src\\js\\components\\Navigation\\HeaderBackToBallot.jsx","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { styled } from 'linaria/react';\nimport AccountCircleIcon from '@material-ui/icons/AccountCircle';\nimport AppBar from '@material-ui/core/AppBar';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport { withStyles } from '@material-ui/core/styles';\nimport AppStore from '../../stores/AppStore';\nimport AppActions from '../../actions/AppActions';\nimport CandidateStore from '../../stores/CandidateStore';\nimport cookies from '../../utils/cookies';\nimport { isCordova, isWebApp } from '../../utils/cordovaUtils';\nimport HeaderBackToButton from './HeaderBackToButton';\nimport HeaderBarProfilePopUp from './HeaderBarProfilePopUp';\nimport MeasureStore from '../../stores/MeasureStore';\nimport OfficeItem from '../Ballot/OfficeItem';\nimport OfficeStore from '../../stores/OfficeStore';\nimport OrganizationActions from '../../actions/OrganizationActions';\nimport OrganizationStore from '../../stores/OrganizationStore';\nimport { renderLog } from '../../utils/logging';\nimport { stringContains } from '../../utils/textFormat';\nimport SignInModal from '../Widgets/SignInModal';\nimport VoterGuideActions from '../../actions/VoterGuideActions';\nimport VoterSessionActions from '../../actions/VoterSessionActions';\nimport VoterStore from '../../stores/VoterStore';\n\nclass HeaderBackToBallot extends Component {\n  static propTypes = {\n    classes: PropTypes.object,\n    location: PropTypes.object,\n    params: PropTypes.object.isRequired,\n    pathname: PropTypes.string,\n  };\n\n  constructor (props) {\n    super(props);\n    this.state = {\n      backToCandidateWeVoteId: '',\n      backToMeasure: {},\n      backToMeasureWeVoteId: '',\n      backToVariable: '',\n      candidateWeVoteId: '',\n      measureWeVoteId: '',\n      officeName: '',\n      officeWeVoteId: '',\n      organization: {},\n      organizationHasBeenRetrievedOnce: {},\n      organizationWeVoteId: '',\n      profilePopUpOpen: false,\n      showSignInModal: AppStore.showSignInModal(),\n      scrolledDown: AppStore.getScrolledDown(),\n      voter: {},\n    };\n    this.toggleAccountMenu = this.toggleAccountMenu.bind(this);\n    this.hideAccountMenu = this.hideAccountMenu.bind(this);\n    this.hideProfilePopUp = this.hideProfilePopUp.bind(this);\n    this.signOutAndHideProfilePopUp = this.signOutAndHideProfilePopUp.bind(this);\n    this.toggleProfilePopUp = this.toggleProfilePopUp.bind(this);\n    this.toggleSignInModal = this.toggleSignInModal.bind(this);\n    this.transitionToYourVoterGuide = this.transitionToYourVoterGuide.bind(this);\n  }\n\n  componentDidMount () {\n    // console.log('HeaderBackToBallot componentDidMount, this.props: ', this.props);\n    this.appStoreListener = AppStore.addListener(this.onAppStoreChange.bind(this));\n    this.candidateStoreListener = CandidateStore.addListener(this.onCandidateStoreChange.bind(this));\n    this.measureStoreListener = MeasureStore.addListener(this.onMeasureStoreChange.bind(this));\n    this.organizationStoreListener = OrganizationStore.addListener(this.onOrganizationStoreChange.bind(this));\n    this.officeStoreListener = OfficeStore.addListener(this.onOfficeStoreChange.bind(this));\n    this.voterStoreListener = VoterStore.addListener(this.onVoterStoreChange.bind(this));\n\n    let candidateWeVoteId;\n    let measureWeVoteId;\n    let officeWeVoteId;\n    let officeName;\n    let organization = {};\n    let organizationWeVoteId;\n    if (this.props.params) {\n      candidateWeVoteId = this.props.params.candidate_we_vote_id || '';\n      measureWeVoteId = this.props.params.measure_we_vote_id || '';\n      officeWeVoteId = this.props.params.office_we_vote_id || '';\n      if (candidateWeVoteId && candidateWeVoteId !== '') {\n        const candidate = CandidateStore.getCandidate(candidateWeVoteId);\n        // console.log('HeaderBackToBallot, candidateWeVoteId:', candidateWeVoteId, ', candidate:', candidate);\n        officeWeVoteId = candidate.contest_officeWeVoteId;\n        officeName = candidate.contest_office_name;\n        this.setState({\n          candidateWeVoteId,\n          officeName,\n          officeWeVoteId,\n        });\n      } else if (officeWeVoteId && officeWeVoteId !== '') {\n        const office = OfficeStore.getOffice(officeWeVoteId);\n        officeName = office ? office.ballot_item_display_name : '';\n        this.setState({\n          officeName,\n          officeWeVoteId,\n        });\n      }\n      const backToCandidateWeVoteId = this.props.params.back_to_cand_we_vote_id || '';\n      const backToMeasureWeVoteId = this.props.params.back_to_meas_we_vote_id || '';\n      if (backToMeasureWeVoteId) {\n        const backToMeasure = MeasureStore.getMeasure(backToMeasureWeVoteId);\n        this.setState({\n          backToMeasure,\n        });\n      }\n      const backToVariable = this.props.params.back_to_variable || '';\n      organizationWeVoteId = this.props.params.organization_we_vote_id || '';\n      organization = OrganizationStore.getOrganizationByWeVoteId(organizationWeVoteId);\n      if (organizationWeVoteId && organizationWeVoteId !== '' && !organization.organization_we_vote_id) {\n        // Retrieve the organization object\n        OrganizationActions.organizationRetrieve(organizationWeVoteId);\n        const { organizationHasBeenRetrievedOnce } = this.state;\n        organizationHasBeenRetrievedOnce[organizationWeVoteId] = true;\n        this.setState({\n          organizationHasBeenRetrievedOnce,\n        });\n      }\n      // console.log('backToMeasureWeVoteId: ', backToMeasureWeVoteId);\n      this.setState({\n        backToCandidateWeVoteId,\n        backToMeasureWeVoteId,\n        backToVariable,\n        measureWeVoteId,\n        organization,\n        organizationWeVoteId,\n      });\n    }\n\n    // console.log('candidateWeVoteId: ', candidateWeVoteId);\n    // console.log('organizationWeVoteId: ', organizationWeVoteId);\n\n    const weVoteBrandingOffFromUrl = this.props.location.query ? this.props.location.query.we_vote_branding_off : 0;\n    const weVoteBrandingOffFromCookie = cookies.getItem('we_vote_branding_off');\n    const voter = VoterStore.getVoter();\n    const voterIsSignedIn = voter.is_signed_in;\n    const voterPhotoUrlMedium = voter.voter_photo_url_medium;\n    this.setState({\n      voter,\n      voterIsSignedIn,\n      voterPhotoUrlMedium,\n      we_vote_branding_off: weVoteBrandingOffFromUrl || weVoteBrandingOffFromCookie,\n    });\n  }\n\n  componentWillReceiveProps (nextProps) {\n    // console.log('HeaderBackToBallot componentWillReceiveProps, nextProps: ', nextProps);\n    let candidateWeVoteId;\n    let measureWeVoteId;\n    let officeWeVoteId;\n    let officeName;\n    let organization = {};\n    let organizationWeVoteId;\n    if (nextProps.params) {\n      candidateWeVoteId = nextProps.params.candidate_we_vote_id || '';\n      measureWeVoteId = this.props.params.measure_we_vote_id || '';\n      officeWeVoteId = nextProps.params.office_we_vote_id || '';\n      if (candidateWeVoteId && candidateWeVoteId !== '') {\n        const candidate = CandidateStore.getCandidate(candidateWeVoteId);\n        // console.log('HeaderBackToBallot, candidateWeVoteId:', candidateWeVoteId, ', candidate:', candidate);\n        officeWeVoteId = candidate.contest_office_we_vote_id;\n        officeName = candidate.contest_office_name;\n        this.setState({\n          candidate,\n          candidateWeVoteId,\n          officeName,\n          officeWeVoteId,\n        });\n      } else if (officeWeVoteId && officeWeVoteId !== '') {\n        const office = OfficeStore.getOffice(officeWeVoteId);\n        officeName = office ? office.ballot_item_display_name : '';\n        this.setState({\n          officeName,\n          officeWeVoteId,\n        });\n      }\n      const backToCandidateWeVoteId = nextProps.params.back_to_cand_we_vote_id || '';\n      const backToMeasureWeVoteId = nextProps.params.back_to_meas_we_vote_id || '';\n      if (backToMeasureWeVoteId) {\n        const backToMeasure = MeasureStore.getMeasure(backToMeasureWeVoteId);\n        this.setState({\n          backToMeasure,\n        });\n      }\n      const backToVariable = nextProps.params.back_to_variable || '';\n      organizationWeVoteId = nextProps.params.organization_we_vote_id || '';\n      organization = OrganizationStore.getOrganizationByWeVoteId(organizationWeVoteId);\n      if (organizationWeVoteId && organizationWeVoteId !== '' && !organization.organization_we_vote_id) {\n        // Retrieve the organization object\n        if (!this.localOrganizationHasBeenRetrievedOnce(organizationWeVoteId)) {\n          OrganizationActions.organizationRetrieve(organizationWeVoteId);\n          const { organizationHasBeenRetrievedOnce } = this.state;\n          organizationHasBeenRetrievedOnce[organizationWeVoteId] = true;\n          this.setState({\n            organizationHasBeenRetrievedOnce,\n          });\n        }\n      }\n      // console.log('backToMeasureWeVoteId: ', backToMeasureWeVoteId);\n      this.setState({\n        backToCandidateWeVoteId,\n        backToMeasureWeVoteId,\n        backToVariable,\n        measureWeVoteId,\n        organization,\n        organizationWeVoteId,\n      });\n    }\n\n    // console.log('organizationWeVoteId: ', organizationWeVoteId);\n\n    const weVoteBrandingOffFromUrl = nextProps.location.query ? nextProps.location.query.we_vote_branding_off : 0;\n    const weVoteBrandingOffFromCookie = cookies.getItem('we_vote_branding_off');\n    const voter = VoterStore.getVoter();\n    const voterIsSignedIn = voter.is_signed_in;\n    const voterPhotoUrlMedium = voter.voter_photo_url_medium;\n    this.setState({\n      voter,\n      voterIsSignedIn,\n      voterPhotoUrlMedium,\n      we_vote_branding_off: weVoteBrandingOffFromUrl || weVoteBrandingOffFromCookie,\n    });\n  }\n\n  shouldComponentUpdate (nextProps, nextState) {\n    // This lifecycle method tells the component to NOT render if not needed\n    if (this.state.backToCandidateWeVoteId !== nextState.backToCandidateWeVoteId) {\n      // console.log('this.state.backToCandidateWeVoteId: ', this.state.backToCandidateWeVoteId, ', nextState.backToCandidateWeVoteId', nextState.backToCandidateWeVoteId);\n      return true;\n    }\n    if (this.state.backToMeasureWeVoteId !== nextState.backToMeasureWeVoteId) {\n      // console.log('this.state.backToMeasureWeVoteId: ', this.state.backToMeasureWeVoteId, ', nextState.backToMeasureWeVoteId', nextState.backToMeasureWeVoteId);\n      return true;\n    }\n    if (this.state.backToVariable !== nextState.backToVariable) {\n      // console.log('this.state.backToVariable: ', this.state.backToVariable, ', nextState.backToVariable', nextState.backToVariable);\n      return true;\n    }\n    if (this.state.candidateWeVoteId !== nextState.candidateWeVoteId) {\n      // console.log('this.state.candidateWeVoteId: ', this.state.candidateWeVoteId, ', nextState.candidateWeVoteId', nextState.candidateWeVoteId);\n      return true;\n    }\n    if (this.state.measureWeVoteId !== nextState.measureWeVoteId) {\n      // console.log('this.state.measureWeVoteId: ', this.state.measureWeVoteId, ', nextState.measureWeVoteId', nextState.measureWeVoteId);\n      return true;\n    }\n    if (this.state.officeName !== nextState.officeName) {\n      // console.log('this.state.officeName: ', this.state.officeName, ', nextState.officeName', nextState.officeName);\n      return true;\n    }\n    if (this.state.officeWeVoteId !== nextState.officeWeVoteId) {\n      // console.log('this.state.officeWeVoteId: ', this.state.officeWeVoteId, ', nextState.officeWeVoteId', nextState.officeWeVoteId);\n      return true;\n    }\n    if (this.state.organizationWeVoteId !== nextState.organizationWeVoteId) {\n      // console.log('this.state.organizationWeVoteId: ', this.state.organizationWeVoteId, ', nextState.organizationWeVoteId', nextState.organizationWeVoteId);\n      return true;\n    }\n    if (this.state.profilePopUpOpen !== nextState.profilePopUpOpen) {\n      // console.log('this.state.profilePopUpOpen: ', this.state.profilePopUpOpen, ', nextState.profilePopUpOpen', nextState.profilePopUpOpen);\n      return true;\n    }\n    if (this.state.scrolledDown !== nextState.scrolledDown) {\n      // console.log('this.state.scrolledDown: ', this.state.scrolledDown, ', nextState.scrolledDown', nextState.scrolledDown);\n      return true;\n    }\n    if (this.state.showSignInModal !== nextState.showSignInModal) {\n      // console.log('this.state.showSignInModal: ', this.state.showSignInModal, ', nextState.showSignInModal', nextState.showSignInModal);\n      return true;\n    }\n    const { voter, voterIsSignedIn, voterPhotoUrlMedium } = this.state;\n    const { voter: nextVoter, voterIsSignedIn: nextVoterIsSignedIn, voterPhotoUrlMedium: nextVoterPhotoUrlMedium } = nextState;\n    if (!voter && nextVoter) {\n      // console.log('FIRST VOTER, voter: ', voter, ', nextVoter: ', nextVoter);\n      return true;\n    }\n    if (voterIsSignedIn !== nextVoterIsSignedIn) {\n      // console.log('voterIsSignedIn: ', voterIsSignedIn, ', nextVoterIsSignedIn: ', nextVoterIsSignedIn);\n      return true;\n    }\n    if (voterPhotoUrlMedium !== nextVoterPhotoUrlMedium) {\n      // console.log('voterPhotoUrlMedium: ', voterPhotoUrlMedium, ', nextVoterPhotoUrlMedium: ', nextVoterPhotoUrlMedium);\n      return true;\n    }\n    // console.log('shouldComponentUpdate false');\n    return false;\n  }\n\n  componentWillUnmount () {\n    // this.ballotStoreListener.remove();\n    this.appStoreListener.remove();\n    this.candidateStoreListener.remove();\n    this.measureStoreListener.remove();\n    this.organizationStoreListener.remove();\n    this.officeStoreListener.remove();\n    this.voterStoreListener.remove();\n  }\n\n  onAppStoreChange () {\n    this.setState({\n      scrolledDown: AppStore.getScrolledDown(),\n      showSignInModal: AppStore.showSignInModal(),\n    });\n  }\n\n  onCandidateStoreChange () {\n    const { candidateWeVoteId } = this.state;\n    let { officeWeVoteId } = this.state;\n    // console.log('Candidate onCandidateStoreChange');\n    let officeName;\n    if (candidateWeVoteId && candidateWeVoteId !== '') {\n      const candidate = CandidateStore.getCandidate(candidateWeVoteId);\n      // console.log('HeaderBackToBallot -- onCandidateStoreChange, candidateWeVoteId:', this.state.candidateWeVoteId, ', candidate:', candidate);\n      officeName = candidate.contest_office_name;\n      officeWeVoteId = candidate.contest_office_we_vote_id;\n      this.setState({\n        candidate,\n        officeName,\n        officeWeVoteId,\n      });\n    } else if (officeWeVoteId && officeWeVoteId !== '') {\n      const office = OfficeStore.getOffice(officeWeVoteId);\n      officeName = office ? office.ballot_item_display_name : '';\n      this.setState({\n        officeName,\n      });\n    }\n  }\n\n  onMeasureStoreChange () {\n    const { backToMeasureWeVoteId } = this.state;\n    if (backToMeasureWeVoteId && backToMeasureWeVoteId !== '') {\n      const backToMeasure = MeasureStore.getMeasure(backToMeasureWeVoteId);\n      this.setState({\n        backToMeasure,\n      });\n    }\n  }\n\n  onOrganizationStoreChange () {\n    const { organizationWeVoteId } = this.state;\n    this.setState({\n      organization: OrganizationStore.getOrganizationByWeVoteId(organizationWeVoteId),\n    });\n  }\n\n  onOfficeStoreChange () {\n    const { officeWeVoteId } = this.state;\n    let officeName;\n    if (officeWeVoteId && officeWeVoteId !== '') {\n      const office = OfficeStore.getOffice(officeWeVoteId);\n      officeName = office ? office.ballot_item_display_name : '';\n    }\n\n    this.setState({\n      officeName,\n    });\n  }\n\n  onVoterStoreChange () {\n    const voter = VoterStore.getVoter();\n    const voterIsSignedIn = voter.is_signed_in;\n    const voterPhotoUrlMedium = voter.voter_photo_url_medium;\n    this.setState({\n      voter,\n      voterIsSignedIn,\n      voterPhotoUrlMedium,\n    });\n  }\n\n  getOfficeLink () {\n    if (this.state.organizationWeVoteId && this.state.organizationWeVoteId !== '') {\n      return `/office/${this.state.officeWeVoteId}/btvg/${this.state.organizationWeVoteId}`;\n    } else {\n      return `/office/${this.state.officeWeVoteId}/b/btdb/`; // back-to-default-ballot\n    }\n  }\n\n  getVoterGuideLink () {\n    const { organizationWeVoteId, candidate } = this.state;\n    return `/voterguide/${organizationWeVoteId}/ballot/election/${candidate.google_civic_election_id}`;\n  }\n\n  signOutAndHideAccountMenu () {\n    VoterSessionActions.voterSignOut();\n    this.setState({ profilePopUpOpen: false });\n  }\n\n  transitionToYourVoterGuide () {\n    const { voter } = this.state;\n    // Positions for this organization, for this voter / election\n    OrganizationActions.positionListForOpinionMaker(voter.linked_organization_we_vote_id, true);\n\n    // Positions for this organization, NOT including for this voter / election\n    OrganizationActions.positionListForOpinionMaker(voter.linked_organization_we_vote_id, false, true);\n    OrganizationActions.organizationsFollowedRetrieve();\n    VoterGuideActions.voterGuideFollowersRetrieve(voter.linked_organization_we_vote_id);\n    VoterGuideActions.voterGuidesFollowedByOrganizationRetrieve(voter.linked_organization_we_vote_id);\n    this.setState({ profilePopUpOpen: false });\n  }\n\n  hideAccountMenu () {\n    this.setState({ profilePopUpOpen: false });\n  }\n\n  toggleAccountMenu () {\n    const { profilePopUpOpen } = this.state;\n    this.setState({ profilePopUpOpen: !profilePopUpOpen });\n  }\n\n  toggleProfilePopUp () {\n    const { profilePopUpOpen } = this.state;\n    this.setState({ profilePopUpOpen: !profilePopUpOpen });\n  }\n\n  closeSignInModal () {\n    AppActions.setShowSignInModal(false);\n  }\n\n  toggleSignInModal () {\n    const { showSignInModal } = this.state;\n    this.setState({ profilePopUpOpen: false });\n    AppActions.setShowSignInModal(!showSignInModal);\n  }\n\n  hideProfilePopUp () {\n    this.setState({ profilePopUpOpen: false });\n  }\n\n  signOutAndHideProfilePopUp () {\n    VoterSessionActions.voterSignOut();\n    this.setState({ profilePopUpOpen: false });\n  }\n\n  localOrganizationHasBeenRetrievedOnce (organizationWeVoteId) {\n    if (organizationWeVoteId) {\n      const { organizationHasBeenRetrievedOnce } = this.state;\n      return organizationHasBeenRetrievedOnce[organizationWeVoteId];\n    }\n    return false;\n  }\n\n  render () {\n    renderLog('HeaderBackToBallot');  // Set LOG_RENDER_EVENTS to log all renders\n    const {\n      backToCandidateWeVoteId, backToMeasure, backToMeasureWeVoteId, backToVariable,\n      candidate, measureWeVoteId, officeName, officeWeVoteId,\n      organization, organizationWeVoteId, profilePopUpOpen, scrolledDown, showSignInModal,\n      voter, voterIsSignedIn, voterPhotoUrlMedium,\n    } = this.state;\n    const { classes, pathname } = this.props;\n\n    let backToLink;\n    let backToLinkText;\n    if (backToCandidateWeVoteId) {\n      backToLink = `/candidate/${backToCandidateWeVoteId}/b/${backToVariable}/`;\n    } else if (backToMeasureWeVoteId) {\n      backToLink = `/measure/${backToMeasureWeVoteId}/b/${backToVariable}/`;\n    } else if ((backToVariable === 'bto' || backToVariable === 'btdo') && !backToCandidateWeVoteId) { // back-to-default-office\n      backToLink = this.getOfficeLink();\n    } else if (organizationWeVoteId && candidate && candidate.google_civic_election_id) {\n      backToLink = this.getVoterGuideLink(); // Default to this when there is an organizationWeVoteId\n    } else if (candidate && candidate.google_civic_election_id) {\n      backToLink = `/ballot/election/${candidate.google_civic_election_id}`;\n    } else if (measureWeVoteId) {\n      backToLink = `/ballot#${measureWeVoteId}`;\n    } else {\n      backToLink = '/ballot'; // Default to this\n    }\n\n    if (backToCandidateWeVoteId) {\n      if (candidate && candidate.ballot_item_display_name) {\n        backToLinkText = candidate.ballot_item_display_name;\n      } else {\n        backToLinkText = 'Back to Candidate';\n      }\n    } else if (backToMeasureWeVoteId) {\n      if (backToMeasure && backToMeasure.ballot_item_display_name) {\n        backToLinkText = backToMeasure.ballot_item_display_name;\n      } else {\n        backToLinkText = 'Back to Measure';\n      }\n    } else if (backToVariable === 'bto' || backToVariable === 'btdo') { // back-to-default-office\n      if (officeName) {\n        backToLinkText = `${officeName}`; // Back to\n      } else {\n        backToLinkText = 'Back';\n      }\n    } else if (organization && organization.organization_name) {\n      backToLinkText = `${organization.organization_name}`; // Back to\n    } else {\n      backToLinkText = 'Ballot'; // Back to\n    }\n\n    const headerClassName = (function header () {\n      let cname;\n      if (stringContains('/office', pathname.toLowerCase())) {\n        if (isWebApp()) {\n          cname = 'page-header page-header__back-to-ballot';\n        } else {\n          cname = 'page-header page-header__back-to-ballot-cordova  page-header__cordova';\n        }\n      } else {\n        cname = 'page-header';\n      }\n      return cname;\n    }());\n\n    let appBarClasses;\n    const onCandidateOrMeasureRoute = stringContains('/candidate/', pathname.toLowerCase()) || stringContains('/measure/', pathname.toLowerCase());\n    if (scrolledDown && onCandidateOrMeasureRoute) {\n      appBarClasses = { root: classes.noBoxShadow };\n    }\n\n    return (\n      <AppBar className={headerClassName} color=\"default\" classes={appBarClasses}>\n        <Toolbar className=\"header-toolbar header-backto-toolbar\" disableGutters>\n          <HeaderBackToButton\n            backToLink={backToLink}\n            backToLinkText={backToLinkText}\n            id=\"backToLinkTabHeader\"\n          />\n\n          <div className=\"header-nav__avatar-wrapper u-cursor--pointer u-flex-none\" onClick={this.toggleAccountMenu}>\n            {voterIsSignedIn ? (\n              <span>\n                {voterPhotoUrlMedium ? (\n                  <div\n                    id=\"profileAvatarHeaderBar\"\n                    className={`header-nav__avatar-container ${isCordova() ? 'header-nav__avatar-cordova' : undefined}`}\n                    onClick={this.toggleProfilePopUp}\n                  >\n                    <img\n                      className=\"header-nav__avatar\"\n                      src={voterPhotoUrlMedium}\n                      height={34}\n                      width={34}\n                      alt=\"Your Settings\"\n                    />\n                  </div>\n                ) : (\n                  <div>\n                    <IconButton\n                      classes={{ root: classes.iconButtonRoot }}\n                      id=\"profileAvatarHeaderBar\"\n                      onClick={this.toggleProfilePopUp}\n                    >\n                      <AccountCircleIcon />\n                    </IconButton>\n                  </div>\n                )\n                }\n                {profilePopUpOpen && (\n                <HeaderBarProfilePopUp\n                  hideProfilePopUp={this.hideProfilePopUp}\n                  onClick={this.toggleProfilePopUp}\n                  profilePopUpOpen={profilePopUpOpen}\n                  signOutAndHideProfilePopUp={this.signOutAndHideProfilePopUp}\n                  toggleProfilePopUp={this.toggleProfilePopUp}\n                  toggleSignInModal={this.toggleSignInModal}\n                  transitionToYourVoterGuide={this.transitionToYourVoterGuide}\n                  voter={voter}\n                  weVoteBrandingOff={this.state.we_vote_branding_off}\n                />\n                )}\n              </span>\n            ) : (\n              <Button\n                className=\"header-sign-in\"\n                classes={{ root: classes.headerButtonRoot }}\n                color=\"primary\"\n                id=\"signInHeaderBar\"\n                onClick={this.toggleSignInModal}\n                variant=\"text\"\n              >\n              Sign In\n              </Button>\n            )}\n          </div>\n        </Toolbar>\n        {stringContains('/office', pathname.toLowerCase())  && officeName && (\n          <OfficeNameWrapper className=\"header-toolbar\">\n            <OfficeItem\n              weVoteId={officeWeVoteId}\n              ballotItemDisplayName={officeName}\n            />\n          </OfficeNameWrapper>\n        )}\n        {showSignInModal && (\n          <SignInModal\n            show={showSignInModal}\n            closeFunction={this.closeSignInModal}\n          />\n        )}\n      </AppBar>\n    );\n  }\n}\n\nconst styles = theme => ({\n  noBoxShadow: {\n    boxShadow: '0 0 0 0',\n  },\n  headerButtonRoot: {\n    paddingTop: 2,\n    paddingBottom: 2,\n    '&:hover': {\n      backgroundColor: 'transparent',\n    },\n    color: 'rgb(6, 95, 212)',\n    marginLeft: '1rem',\n    outline: 'none !important',\n    [theme.breakpoints.down('md')]: {\n      marginLeft: '.1rem',\n    },\n  },\n});\n\nconst OfficeNameWrapper = styled.div`\n  margin-left: 30px;\n`;\n\nexport default withStyles(styles)(HeaderBackToBallot);\n"]}*/