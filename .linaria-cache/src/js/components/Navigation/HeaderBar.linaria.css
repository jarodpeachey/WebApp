.w1suac6s{margin-top:var(--w1suac6s-0);-webkit-transition:all 50ms ease-in;transition:all 50ms ease-in;-webkit-var(--w1suac6s-1);-moz-var(--w1suac6s-1);-ms-var(--w1suac6s-1);var(--w1suac6s-1);}
/*# sourceMappingURL=data:application/json;base64,{"version":3,"sources":["D:\\Jarod\\WeVote\\WebApp\\src\\js\\components\\Navigation\\HeaderBar.jsx"],"names":[".w1suac6s"],"mappings":"AAimBMA","file":"D:\\Jarod\\WeVote\\WebApp\\src\\js\\components\\Navigation\\HeaderBar.jsx","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { styled } from 'linaria/react';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport PlaceIcon from '@material-ui/icons/Place';\nimport AccountCircleIcon from '@material-ui/icons/AccountCircle';\nimport { withStyles } from '@material-ui/core/styles';\nimport Badge from '@material-ui/core/Badge';\nimport { historyPush, isWebApp, isCordova, hasIPhoneNotch } from '../../utils/cordovaUtils';\nimport AppActions from '../../actions/AppActions';\nimport AppStore from '../../stores/AppStore';\nimport BallotActions from '../../actions/BallotActions';\nimport cookies from '../../utils/cookies';\nimport FriendStore from '../../stores/FriendStore';\nimport HeaderBarProfilePopUp from './HeaderBarProfilePopUp';\nimport HeaderBarLogo from './HeaderBarLogo';\nimport { renderLog } from '../../utils/logging';\nimport OrganizationActions from '../../actions/OrganizationActions';\nimport PaidAccountUpgradeModal from '../Settings/PaidAccountUpgradeModal';\nimport SelectBallotModal from '../Ballot/SelectBallotModal';\nimport SignInModal from '../Widgets/SignInModal';\nimport VoterGuideActions from '../../actions/VoterGuideActions';\nimport VoterSessionActions from '../../actions/VoterSessionActions';\nimport VoterStore from '../../stores/VoterStore';\nimport { stringContains } from '../../utils/textFormat';\nimport shouldHeaderRetreat from '../../utils/shouldHeaderRetreat';\nimport displayFriendsTabs from '../../utils/displayFriendsTabs';\n\nconst webAppConfig = require('../../config');\n\n\nclass HeaderBar extends Component {\n  static goToGetStarted () {\n    const getStartedNow = '/ballot';\n    historyPush(getStartedNow);\n  }\n\n  static propTypes = {\n    location: PropTypes.object,\n    voter: PropTypes.object,\n    pathname: PropTypes.string,\n    classes: PropTypes.object,\n  };\n\n  constructor (props) {\n    super(props);\n    this.state = {\n      // aboutMenuOpen: false,\n      chosenSiteLogoUrl: '',\n      componentDidMountFinished: false,\n      friendInvitationsSentToMe: 0,\n      hideWeVoteLogo: false,\n      paidAccountUpgradeMode: '',\n      profilePopUpOpen: false,\n      scrolledDown: false,\n      showEditAddressButton: false,\n      showSelectBallotModal: false,\n      showSignInModal: false,\n      showPaidAccountUpgradeModal: false,\n      voter: {},\n    };\n    this.hideProfilePopUp = this.hideProfilePopUp.bind(this);\n    this.signOutAndHideProfilePopUp = this.signOutAndHideProfilePopUp.bind(this);\n    this.toggleProfilePopUp = this.toggleProfilePopUp.bind(this);\n    this.transitionToYourVoterGuide = this.transitionToYourVoterGuide.bind(this);\n    this.toggleSignInModal = this.toggleSignInModal.bind(this);\n    this.toggleSelectBallotModal = this.toggleSelectBallotModal.bind(this);\n    this.closePaidAccountUpgradeModal = this.closePaidAccountUpgradeModal.bind(this);\n  }\n\n  componentDidMount () {\n    this.appStoreListener = AppStore.addListener(this.onAppStoreChange.bind(this));\n    this.friendStoreListener = FriendStore.addListener(this.onFriendStoreChange.bind(this));\n    this.voterStoreListener = VoterStore.addListener(this.onVoterStoreChange.bind(this));\n    // this.onBallotStoreChange();\n\n    // this.props.location &&\n    const weVoteBrandingOffFromUrl = this.props.location.query ? this.props.location.query.we_vote_branding_off : 0;\n    const weVoteBrandingOffFromCookie = cookies.getItem('we_vote_branding_off');\n    this.setState({\n      componentDidMountFinished: true,\n      chosenSiteLogoUrl: AppStore.getChosenSiteLogoUrl(),\n      friendInvitationsSentToMe: FriendStore.friendInvitationsSentToMe(),\n      hideWeVoteLogo: AppStore.getHideWeVoteLogo(),\n      scrolledDown: AppStore.getScrolledDown(),\n      showEditAddressButton: AppStore.showEditAddressButton(),\n      showSelectBallotModal: AppStore.showSelectBallotModal(),\n      showSignInModal: AppStore.showSignInModal(),\n      voter: this.props.voter,\n      voterIsSignedIn: this.props.voter && this.props.voter.is_signed_in,\n      we_vote_branding_off: weVoteBrandingOffFromUrl || weVoteBrandingOffFromCookie,\n    });\n  }\n\n  shouldComponentUpdate (nextProps, nextState) {\n    if (this.state.componentDidMountFinished === false) {\n      // console.log(\"shouldComponentUpdate: componentDidMountFinished === false\");\n      return true;\n    }\n    if (this.state.profilePopUpOpen !== nextState.profilePopUpOpen) {\n      // console.log(\"shouldComponentUpdate: this.state.profilePopUpOpen\", this.state.profilePopUpOpen, \", nextState.profilePopUpOpen\", nextState.profilePopUpOpen);\n      return true;\n    }\n    if (this.state.aboutMenuOpen !== nextState.aboutMenuOpen) {\n      // console.log(\"shouldComponentUpdate: this.state.aboutMenuOpen\", this.state.aboutMenuOpen, \", nextState.aboutMenuOpen\", nextState.aboutMenuOpen);\n      return true;\n    }\n    if (this.state.chosenSiteLogoUrl !== nextState.chosenSiteLogoUrl) {\n      // console.log(\"shouldComponentUpdate: this.state.chosenSiteLogoUrl\", this.state.chosenSiteLogoUrl, \", nextState.chosenSiteLogoUrl\", nextState.chosenSiteLogoUrl);\n      return true;\n    }\n    if (this.state.hideWeVoteLogo !== nextState.hideWeVoteLogo) {\n      // console.log(\"shouldComponentUpdate: this.state.hideWeVoteLogo\", this.state.hideWeVoteLogo, \", nextState.hideWeVoteLogo\", nextState.hideWeVoteLogo);\n      return true;\n    }\n    if (this.state.friendInvitationsSentToMe !== nextState.friendInvitationsSentToMe) {\n      // console.log(\"shouldComponentUpdate: this.state.friendInvitationsSentToMe\", this.state.friendInvitationsSentToMe, \", nextState.friendInvitationsSentToMe\", nextState.friendInvitationsSentToMe);\n      return true;\n    }\n    if (this.state.showEditAddressButton !== nextState.showEditAddressButton) {\n      return true;\n    }\n    if (this.state.showPaidAccountUpgradeModal !== nextState.showPaidAccountUpgradeModal) {\n      return true;\n    }\n    if (this.state.scrolledDown !== nextState.scrolledDown) {\n      return true;\n    }\n    if (this.state.showSignInModal !== nextState.showSignInModal) {\n      return true;\n    }\n    if (this.state.voter && nextState.voter && this.state.voter.is_signed_in !== nextState.voter.is_signed_in) {\n      // console.log('HeaderBar voter.isSignedIn shouldComponentUpdate true');\n      return true;\n    }\n    if (this.state.showSelectBallotModal !== nextState.showSelectBallotModal) {\n      return true;\n    }\n    const currentPathnameExists = this.props.location && this.props.location.pathname;\n    const nextPathnameExists = nextProps.location && nextProps.location.pathname;\n    // One exists, and the other doesn't\n    if ((currentPathnameExists && !nextPathnameExists) || (!currentPathnameExists && nextPathnameExists)) {\n      // console.log(\"HeaderBar shouldComponentUpdate: PathnameExistsDifference\");\n      return true;\n    }\n    if (currentPathnameExists && nextPathnameExists && this.props.location.pathname !== nextProps.location.pathname) {\n      // console.log(\"HeaderBar shouldComponentUpdate: this.props.location.pathname\", this.props.location.pathname, \", nextProps.location.pathname\", nextProps.location.pathname);\n      return true;\n    }\n    const thisVoterExists = this.state.voter !== undefined;\n    const nextVoterExists = nextState.voter !== undefined;\n    if (nextVoterExists && !thisVoterExists) {\n      // console.log(\"HeaderBar shouldComponentUpdate: thisVoterExists\", thisVoterExists, \", nextVoterExists\", nextVoterExists);\n      return true;\n    }\n    if (thisVoterExists && nextVoterExists) {\n      if (this.state.voter.voter_photo_url_medium !== nextState.voter.voter_photo_url_medium) {\n        // console.log('HeaderBar shouldComponentUpdate: this.state.voter.voter_photo_url_medium', this.state.voter.voter_photo_url_medium, ', nextState.voter.voter_photo_url_medium', nextState.voter.voter_photo_url_medium);\n        return true;\n      }\n      if (this.state.voter.signed_in_twitter !== nextState.voter.signed_in_twitter) {\n        // console.log(\"HeaderBar shouldComponentUpdate: this.state.voter.signed_in_twitter\", this.state.voter.signed_in_twitter, \", nextState.voter.signed_in_twitter\", nextState.voter.signed_in_twitter);\n        return true;\n      }\n      if (this.state.voter.signed_in_facebook !== nextState.voter.signed_in_facebook) {\n        // console.log(\"HeaderBar shouldComponentUpdate: this.state.voter.signed_in_facebook\", this.state.voter.signed_in_facebook, \", nextState.voter.signed_in_facebook\", nextState.voter.signed_in_facebook);\n        return true;\n      }\n      if (this.state.voter.signed_in_with_email !== nextState.voter.signed_in_with_email) {\n        return true;\n      }\n    }\n    // console.log('HeaderBar shouldComponentUpdate false');\n    return false;\n  }\n\n  componentWillUnmount () {\n    this.appStoreListener.remove();\n    this.friendStoreListener.remove();\n    this.voterStoreListener.remove();\n  }\n\n  onAppStoreChange () {\n    const paidAccountUpgradeMode = AppStore.showPaidAccountUpgradeModal();\n    // console.log('HeaderBar paidAccountUpgradeMode:', paidAccountUpgradeMode);\n    const showPaidAccountUpgradeModal = paidAccountUpgradeMode && paidAccountUpgradeMode !== '';\n    // console.log('HeaderBar onAppStoreChange showPaidAccountUpgradeModal:', showPaidAccountUpgradeModal);\n    this.setState({\n      chosenSiteLogoUrl: AppStore.getChosenSiteLogoUrl(),\n      hideWeVoteLogo: AppStore.getHideWeVoteLogo(),\n      paidAccountUpgradeMode,\n      scrolledDown: AppStore.getScrolledDown(),\n      showEditAddressButton: AppStore.showEditAddressButton(),\n      showPaidAccountUpgradeModal,\n      showSignInModal: AppStore.showSignInModal(),\n      showSelectBallotModal: AppStore.showSelectBallotModal(),\n    });\n  }\n\n  onFriendStoreChange () {\n    this.setState({\n      friendInvitationsSentToMe: FriendStore.friendInvitationsSentToMe(),\n    });\n  }\n\n  onVoterStoreChange () {\n    const voter = VoterStore.getVoter();\n    const voterIsSignedIn = voter.is_signed_in || false;\n    this.setState({\n      voter,\n      voterIsSignedIn,\n      showSignInModal: AppStore.showSignInModal(),\n    });\n  }\n\n  getSelectedTab = () => {\n    const { pathname } = this.props;\n    if (stringContains('/ballot/vote', pathname.toLowerCase())) return 3;\n    if (pathname && pathname.toLowerCase().startsWith('/ballot')) return 0;\n    if (stringContains('/value', pathname.toLowerCase())) return 1; // '/values'\n    if (stringContains('/friends', pathname.toLowerCase())) return 2;\n\n    return false;\n  };\n\n  handleNavigation = to => historyPush(to);\n\n  toggleProfilePopUp () {\n    if (isWebApp()) {\n      const { profilePopUpOpen } = this.state;\n      this.setState({ profilePopUpOpen: !profilePopUpOpen });\n    } else {\n      this.handleNavigation('/settings/hamburger');\n    }\n  }\n\n  toggleSelectBallotModal (destinationUrlForHistoryPush = '') {\n    const { showSelectBallotModal } = this.state;\n    // console.log('HeaderBar toggleSelectBallotModal, destinationUrlForHistoryPush:', destinationUrlForHistoryPush, ', prior showSelectBallotModal:', showSelectBallotModal);\n    if (showSelectBallotModal && destinationUrlForHistoryPush && destinationUrlForHistoryPush !== '') {\n      historyPush(destinationUrlForHistoryPush);\n    } else if (!showSelectBallotModal) {\n      // console.log('Ballot toggleSelectBallotModal, BallotActions.voterBallotListRetrieve()');\n      BallotActions.voterBallotListRetrieve(); // Retrieve a list of ballots for the voter from other elections\n    }\n    AppActions.setShowSelectBallotModal(!showSelectBallotModal);\n  }\n\n  closeNewVoterGuideModal () {\n    // console.log('HeaderBar closeNewVoterGuideModal');\n    AppActions.setShowNewVoterGuideModal(false);\n    // signInModalGlobalState.set('isShowingSignInModal', false);\n    HeaderBar.goToGetStarted();\n  }\n\n  closeSignInModal () {\n    AppActions.setShowSignInModal(false);\n    // signInModalGlobalState.set('isShowingSignInModal', false);\n    HeaderBar.goToGetStarted();\n  }\n\n  toggleSignInModal () {\n    // console.log('HeaderBar toggleSignInModal');\n    const { showSignInModal } = this.state;\n    AppActions.setShowSignInModal(!showSignInModal);\n  }\n\n  hideProfilePopUp () {\n    this.setState({ profilePopUpOpen: false });\n  }\n\n  signOutAndHideProfilePopUp () {\n    VoterSessionActions.voterSignOut();\n    this.setState({ profilePopUpOpen: false });\n  }\n\n  transitionToYourVoterGuide () {\n    // Positions for this organization, for this voter/election\n    OrganizationActions.positionListForOpinionMaker(this.state.voter.linked_organization_we_vote_id, true);\n\n    // Positions for this organization, NOT including for this voter / election\n    // const googleCivicElectionId = 0;\n    // if (!OrganizationStore.positionListForOpinionMakerHasBeenRetrievedOnce(googleCivicElectionId, this.state.voter.linked_organization_we_vote_id)) {\n    OrganizationActions.positionListForOpinionMaker(this.state.voter.linked_organization_we_vote_id, false, true);\n    // }\n    OrganizationActions.organizationsFollowedRetrieve();\n    VoterGuideActions.voterGuideFollowersRetrieve(this.state.voter.linked_organization_we_vote_id);\n    VoterGuideActions.voterGuidesFollowedByOrganizationRetrieve(this.state.voter.linked_organization_we_vote_id);\n    this.setState({ profilePopUpOpen: false });\n  }\n\n  closePaidAccountUpgradeModal () {\n    AppActions.setShowPaidAccountUpgradeModal(false);\n  }\n\n  render () {\n    renderLog('HeaderBar');  // Set LOG_RENDER_EVENTS to log all renders\n    if (!this.state.componentDidMountFinished) {\n      return null;\n    }\n    const { classes, pathname, location } = this.props;\n    const {\n      chosenSiteLogoUrl, friendInvitationsSentToMe, hideWeVoteLogo, paidAccountUpgradeMode, scrolledDown,\n      showEditAddressButton, showPaidAccountUpgradeModal, showSelectBallotModal,\n      showSignInModal, voter, voterIsSignedIn,\n    } = this.state;\n    // console.log('Header Bar, showSignInModal ', showSignInModal);\n    const ballotBaseUrl = '/ballot';\n    const voterPhotoUrlMedium = voter.voter_photo_url_medium;\n    const numberOfIncomingFriendRequests = friendInvitationsSentToMe.length || 0; // DALE: FRIENDS TEMPORARILY DISABLED\n    const showFullNavigation = true;\n    const weVoteBrandingOff = this.state.we_vote_branding_off;\n    const showingBallot = stringContains(ballotBaseUrl, pathname.toLowerCase().slice(0, 7));\n    const showingFriendsTabs = displayFriendsTabs();\n    const editAddressButtonHtml = (\n      <Tooltip title=\"Change my location or election\" aria-label=\"Change Address or Election\" classes={{ tooltipPlacementBottom: classes.tooltipPlacementBottom }}>\n        <span>\n          <IconButton\n            classes={{ root: classes.iconButtonRoot }}\n            id=\"changeAddressHeaderBar\"\n            onClick={this.toggleSelectBallotModal}\n          >\n            <PlaceIcon />\n          </IconButton>\n          <Button\n            color=\"primary\"\n            classes={{ root: classes.addressButtonRoot }}\n            id=\"changeAddressHeaderBarText\"\n            onClick={this.toggleSelectBallotModal}\n          >\n            <span className=\"u-show-desktop-tablet\">\n              Address & Elections\n            </span>\n            <span className=\"u-show-mobile\">\n              Address\n            </span>\n          </Button>\n        </span>\n      </Tooltip>\n    );\n\n    const doNotShowWeVoteLogo = weVoteBrandingOff || hideWeVoteLogo;\n    const showWeVoteLogo = !doNotShowWeVoteLogo;\n    const enableFriends = webAppConfig.ENABLE_NEXT_RELEASE_FEATURES === undefined ? true : webAppConfig.ENABLE_NEXT_RELEASE_FEATURES;\n\n    return (\n      <Wrapper hasNotch={hasIPhoneNotch()} scrolledDown={scrolledDown && isWebApp() && shouldHeaderRetreat(pathname)}>\n        <AppBar position=\"relative\" color=\"default\" className={`page-header${!isWebApp() ? ' page-header__cordova' : ''}${showingBallot || showingFriendsTabs ? ' page-header__ballot' : ''}`}>\n          <Toolbar className=\"header-toolbar\" disableGutters>\n            {(showWeVoteLogo || chosenSiteLogoUrl) && (\n              <HeaderBarLogo\n                chosenSiteLogoUrl={chosenSiteLogoUrl}\n                showFullNavigation={!!showFullNavigation}\n                isBeta={showWeVoteLogo && !chosenSiteLogoUrl}\n              />\n            )}\n            <div className=\"header-nav\">\n              <Tabs\n                className=\"u-show-desktop\"\n                value={this.getSelectedTab()}\n                indicatorColor=\"primary\"\n                classes={{ indicator: classes.indicator }}\n              >\n                {showFullNavigation && (\n                  <Tab classes={{ root: classes.tabRootBallot }} id=\"ballotTabHeaderBar\" label=\"Ballot\" onClick={() => this.handleNavigation('/ballot')} />\n                )}\n                {showFullNavigation && (\n                  <Tab classes={{ root: classes.tabRootDefault }} id=\"valuesTabHeaderBar\" label=\"My Values\" onClick={() => this.handleNavigation('/values')} />\n                )}\n                { enableFriends && showFullNavigation && (\n                  <Tab\n                    classes={(numberOfIncomingFriendRequests > 0) ? { root: classes.tabRootIncomingFriendRequests } : { root: classes.tabRootDefault }}\n                    id=\"friendsTabHeaderBar\"\n                    label={(\n                      <Badge\n                        classes={{ badge: classes.headerBadge }}\n                        badgeContent={numberOfIncomingFriendRequests}\n                        color=\"primary\"\n                        max={9}\n                      >\n                        My Friends\n                      </Badge>\n                    )}\n                    onClick={() => this.handleNavigation('/friends')}\n                  />\n                )}\n                {showFullNavigation && (\n                  <Tab classes={{ root: classes.tabRootVote }} id=\"voteTabHeaderBar\" label=\"Vote\" onClick={() => this.handleNavigation('/ballot/vote')} />\n                )}\n              </Tabs>\n            </div>\n            {\n              voterIsSignedIn && voterPhotoUrlMedium ? (\n                <div className=\"header-nav__avatar-wrapper u-cursor--pointer u-flex-none\">\n                  {\n                    showEditAddressButton && editAddressButtonHtml\n                  }\n                  <span className=\"u-show-desktop-tablet\">\n                    <span id=\"profileAvatarHeaderBar\"\n                      className={`header-nav__avatar-container ${isCordova() ? 'header-nav__avatar-cordova' : undefined}`}\n                      onClick={this.toggleProfilePopUp}\n                    >\n                      <img\n                        className=\"header-nav__avatar\"\n                        src={voterPhotoUrlMedium}\n                        style={{\n                          marginLeft: 16,\n                        }}\n                        height={34}\n                        width={34}\n                        alt=\"Your Settings\"\n                      />\n                    </span>\n                  </span>\n                  <span className=\"u-show-mobile\">\n                    <div\n                      id=\"profileAvatarHeaderBar\"\n                      className={`header-nav__avatar-container ${isCordova() ? 'header-nav__avatar-cordova' : undefined}`}\n                      onClick={() => this.handleNavigation('/settings/hamburger')}\n                    >\n                      <img\n                        className=\"header-nav__avatar\"\n                        style={{\n                          marginLeft: 16,\n                        }}\n                        src={voterPhotoUrlMedium}\n                        height={34}\n                        width={34}\n                        alt=\"Your Settings\"\n                      />\n                    </div>\n                  </span>\n                  {this.state.profilePopUpOpen && voterIsSignedIn && (\n                    <HeaderBarProfilePopUp\n                      hideProfilePopUp={this.hideProfilePopUp}\n                      onClick={this.toggleProfilePopUp}\n                      profilePopUpOpen={this.state.profilePopUpOpen}\n                      signOutAndHideProfilePopUp={this.signOutAndHideProfilePopUp}\n                      toggleProfilePopUp={this.toggleProfilePopUp}\n                      toggleSignInModal={this.toggleSignInModal}\n                      transitionToYourVoterGuide={this.transitionToYourVoterGuide}\n                      voter={voter}\n                      weVoteBrandingOff={this.state.we_vote_branding_off}\n                    />\n                  )}\n                </div>\n              ) : (\n                voterIsSignedIn && (\n                  <div className=\"header-nav__avatar-wrapper u-cursor--pointer u-flex-none\">\n                    {showEditAddressButton && editAddressButtonHtml}\n                    <span className=\"u-show-desktop-tablet\">\n                      <IconButton\n                        classes={{ root: classes.iconButtonRoot }}\n                        id=\"profileAvatarHeaderBar\"\n                        onClick={this.toggleProfilePopUp}\n                      >\n                        <AccountCircleIcon />\n                      </IconButton>\n                    </span>\n                    <span className=\"u-show-mobile\">\n                      <IconButton\n                        classes={{ root: classes.iconButtonRoot }}\n                        id=\"profileAvatarHeaderBar\"\n                        onClick={() => this.handleNavigation('/settings/hamburger')}\n                      >\n                        <AccountCircleIcon />\n                      </IconButton>\n                    </span>\n                    {this.state.profilePopUpOpen && voterIsSignedIn && (\n                      <HeaderBarProfilePopUp\n                        hideProfilePopUp={this.hideProfilePopUp}\n                        onClick={this.toggleProfilePopUp}\n                        profilePopUpOpen={this.state.profilePopUpOpen}\n                        signOutAndHideProfilePopUp={this.signOutAndHideProfilePopUp}\n                        toggleProfilePopUp={this.toggleProfilePopUp}\n                        toggleSignInModal={this.toggleSignInModal}\n                        transitionToYourVoterGuide={this.transitionToYourVoterGuide}\n                        voter={voter}\n                        weVoteBrandingOff={this.state.we_vote_branding_off}\n                      />\n                    )}\n                  </div>\n                )\n              )\n            }\n            {\n              !voterIsSignedIn && (\n              <div className=\"header-nav__avatar-wrapper u-cursor--pointer u-flex-none d-print-none\">\n                {showEditAddressButton && editAddressButtonHtml}\n                <Button\n                  color=\"primary\"\n                  classes={{ root: classes.headerButtonRoot }}\n                  id=\"signInHeaderBar\"\n                  onClick={this.toggleSignInModal}\n                >\n                  Sign In\n                </Button>\n              </div>\n              )\n            }\n          </Toolbar>\n        </AppBar>\n        {showSignInModal && (\n          <SignInModal\n            show={showSignInModal}\n            closeFunction={this.closeSignInModal}\n          />\n        )}\n        {showSelectBallotModal && (\n          <SelectBallotModal\n            ballotBaseUrl=\"/ballot\"\n            location={location}\n            pathname={pathname}\n            show={showSelectBallotModal}\n            toggleFunction={this.toggleSelectBallotModal}\n          />\n        )}\n        {showPaidAccountUpgradeModal && (\n          <PaidAccountUpgradeModal\n            initialPricingPlan={paidAccountUpgradeMode}\n            pathname={pathname}\n            show={showPaidAccountUpgradeModal}\n            toggleFunction={this.closePaidAccountUpgradeModal}\n          />\n        )}\n      </Wrapper>\n    );\n  }\n}\n\nconst styles = theme => ({\n  headerBadge: {\n    right: -15,\n    top: 9,\n  },\n  padding: {\n    padding: `0 ${theme.spacing(2)}px`,\n  },\n  addressButtonRoot: {\n    '&:hover': {\n      backgroundColor: 'transparent',\n    },\n    color: 'rgba(17, 17, 17, .5)',\n    outline: 'none !important',\n    paddingRight: 20,\n    [theme.breakpoints.down('sm')]: {\n      paddingTop: 6,\n      marginLeft: 2,\n      paddingLeft: 0,\n    },\n  },\n  headerButtonRoot: {\n    paddingTop: 2,\n    paddingBottom: 2,\n    '&:hover': {\n      backgroundColor: 'transparent',\n    },\n    color: 'rgb(6, 95, 212)',\n    marginLeft: '1rem',\n    outline: 'none !important',\n    [theme.breakpoints.down('sm')]: {\n      marginLeft: 12,\n      paddingLeft: 0,\n    },\n  },\n  iconButtonRoot: {\n    paddingTop: 2,\n    paddingRight: 0,\n    paddingBottom: 2,\n    paddingLeft: 0,\n    color: 'rgba(17, 17, 17, .4)',\n    outline: 'none !important',\n    '&:hover': {\n      backgroundColor: 'transparent',\n    },\n  },\n  tooltipPlacementBottom: {\n    marginTop: 0,\n  },\n  outlinedPrimary: {\n    minWidth: 36,\n    marginRight: '.5rem',\n    [theme.breakpoints.down('md')]: {\n      padding: 2,\n    },\n  },\n  tabRootBallot: {\n    minWidth: 90,\n  },\n  tabRootDefault: {\n    minWidth: 110,\n  },\n  tabRootIncomingFriendRequests: {\n    minWidth: 130,\n  },\n  tabRootVote: {\n    minWidth: 70,\n  },\n  indicator: {\n    height: 4,\n  },\n});\n\nconst Wrapper = styled.div`\n  margin-top: ${({ hasNotch }) => (hasNotch ? '1.5rem' : '0')};\n  transition: all 50ms ease-in;\n  ${({ scrolledDown }) => (scrolledDown ? 'transform: translateY(-100%);' : '')}\n`;\n\nexport default withStyles(styles)(HeaderBar);\n"]}*/