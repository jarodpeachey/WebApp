.sy34ief{margin-bottom:10px;text-align:center;}
.s781kb0{height:2px;width:90%;margin:0 auto;background:#2a3757;}
/*# sourceMappingURL=data:application/json;base64,*/