.i1f0fq5{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-flow:row wrap;-ms-flex-flow:row wrap;flex-flow:row wrap;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;}
.m1rxdcbk{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-flow:column;-ms-flex-flow:column;flex-flow:column;max-width:75%;cursor:pointer;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;padding-right:8px;}@media (max-width:var(--m1rxdcbk-0)){.m1rxdcbk{max-width:70%;}}
.twkygqs{font-size:18px;font-weight:bold;margin:.1rem 0;}@media (max-width:var(--twkygqs-0)){.twkygqs{font-size:16px;}}
.s4o145n{font-size:16px;font-weight:300;color:#555;margin-top:.6rem;width:135%;}@media (max-width:var(--s4o145n-0)){.s4o145n{font-size:13px;}}
.i1r5fryl{font-size:13px;font-weight:300;color:#777;width:135%;}
/*# sourceMappingURL=data:application/json;base64,*/