.wm0ylsc{padding:24px 24px 20px 24px;-webkit-transition:all 200ms ease-in;transition:all 200ms ease-in;border:1px solid transparent;border-radius:4px;}
.iq05x75{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;margin-bottom:4px;width:100%;}
.b1hhl4rl{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;}
.o1oavt7e{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;}
.oov4dy1{font-size:18px;font-weight:500;margin:auto 0;margin-right:16px;}@media (max-width:var(--oov4dy1-0)){.oov4dy1{font-size:14px;}}@media print{.oov4dy1{font-size:16px !important;}}
.btfeud4{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-flow:column;-ms-flex-flow:column;flex-flow:column;margin-left:8px;}
.ny8ion1{font-size:18px;font-weight:bold;margin:0;}@media print{.ny8ion1{font-size:1.5rem;}}
.d11z5h2a{font-size:12px;margin:0;}@media print{.d11z5h2a{font-size:1.5rem;}}
.hdwd8no{margin:0 24px;}
.d1sktjwx{display:inherit;}@media (max-width:var(--d1sktjwx-0)){.d1sktjwx{display:none;}}
.m10ew8wz{display:inherit;}@media (min-width:var(--m10ew8wz-0)){.m10ew8wz{display:none;}}
/*# sourceMappingURL=data:application/json;base64,*/