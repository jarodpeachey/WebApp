.cnqp5wa{border-radius:2px;box-shadow:var(--cnqp5wa-0);}
.c1tepdx7{padding:8px;}
.p1ee64so min-height:var(--p1ee64so-0) @media (min-width:960px) and (max-width:991px){min-height:100px;}
.pauf1y1{font-size:18px;color:rgb(219,179,86);font-weight:bold;}
.d1tzlqlu{color:#2E3C5D;font-size:18px;font-weight:bold;}
.d1tf0yxm{font-size:18px;font-weight:500;position:relative;bottom:8px;}
.p1txmo89{font-size:34px;margin:0;display:inline-block;font-weight:500;}
.p1flyx52{display:inline-block;font-size:12px;color:#666;margin-left:8px;font-weight:600;}
.p11oj6s1{margin:3px 0 0 0;padding:0;color:#888;font-weight:normal;margin-top:-5px;}
.d1paj506{font-weight:600;color:black;font-size:14px;min-height:75px;}
.b11rfhk0{margin-left:0;font-size:12px;padding-left:16px;color:#888;}
.b8uygl3{font-weight:500;margin-bottom:3px;}
.b1kl4qmy{text-transform:uppercase;}
.cqw322b{list-style:none;padding:0;margin-top:8px;width:100%;}
.c16frn7e{border-bottom:1px solid #ddd;padding:6px 0;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;font-size:12px;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;font-weight:500;-webkit-box-pack:start;-webkit-justify-content:flex-start;-ms-flex-pack:start;justify-content:flex-start;position:relative;}
.c10vy1d2{box-sizing:border-box;width:100%;height:100% !important;display:block;position:absolute;top:0;left:0;background:rgba(255,255,255,0.6);}
.i2jbuu7{margin-left:6px;}
/*# sourceMappingURL=data:application/json;base64,*/