.w966nws{padding-top:var(--w966nws-0);}
.ln94xdw position:'fixed',.ln94xdw height:'100vh',.ln94xdw width:'100vw',.ln94xdw display:'flex',.ln94xdw top:0,.ln94xdw left:0,.ln94xdw background-color:'#2E3C5D',.ln94xdw justify-content:'center',.ln94xdw align-items:'center',.ln94xdw font-size:'30px',.ln94xdw color:'#fff',.ln94xdw flex-direction:'column',.ln94xdw @media print{color:'#2E3C5D';}
/*# sourceMappingURL=data:application/json;base64,*/